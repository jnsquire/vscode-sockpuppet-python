{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"VSCode Sockpuppet Python API","text":"<p>Welcome to the VSCode Sockpuppet Python API documentation!</p> <p>VSCode Sockpuppet is a Python library that lets you programmatically control Visual Studio Code from Python scripts. It provides a clean, typed API that mirrors the VS Code Extension API.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83c\udfaf Full VS Code Control - Access windows, editors, documents, and workspace</li> <li>\ud83d\udd04 Real-time Events - Subscribe to editor changes, file events, and more</li> <li>\ud83c\udfa8 Rich UI - Create webviews, show messages, and dialogs</li> <li>\ud83d\udcdd Document Manipulation - Read and edit text documents with full API</li> <li>\ud83d\udd0c Extension Integration - Launched by VS Code extensions for seamless integration</li> <li>\ud83d\udc0d Pythonic API - Clean, typed, intuitive interface</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from vscode_sockpuppet import VSCodeClient\n\nwith VSCodeClient() as vscode:\n    # Show a message\n    vscode.window.show_information_message(\"Hello from Python!\")\n\n    # Get the active editor\n    editor = vscode.window.active_text_editor\n    if editor:\n        doc = editor.document\n        print(f\"Editing: {doc.file_name}\")\n        print(f\"Language: {doc.language_id}\")\n        print(f\"Lines: {doc.line_count}\")\n\n    # List workspace folders\n    folders = vscode.workspace.workspace_folders\n    for folder in folders:\n        print(f\"Workspace: {folder['name']} at {folder['uri']}\")\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install vscode-sockpuppet\n</code></pre> <p>Or with <code>uv</code>:</p> <pre><code>uv pip install vscode-sockpuppet\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Quick Start Guide - Get up and running in 5 minutes</li> <li>API Reference - Complete API documentation</li> <li>Examples - Working code examples</li> </ol>"},{"location":"#main-components","title":"Main Components","text":"<ul> <li>VSCodeClient - Main entry point for connecting to VS Code</li> <li>Window - Window operations (messages, dialogs, editors)</li> <li>Workspace - Workspace operations (files, configuration)</li> <li>Editor - Text editor manipulation and decorations</li> <li>TextDocument - Document access and text operations</li> <li>Events - Event subscription system</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>VSCode Sockpuppet consists of two parts:</p> <ol> <li>VS Code Extension (TypeScript) - Runs inside VS Code, provides WebSocket/Named Pipe server</li> <li>Python Package (this library) - Connects to VS Code and provides the API</li> </ol> <p>The extension must be installed and running in VS Code for the Python client to work.</p>"},{"location":"#support","title":"Support","text":"<ul> <li>\ud83d\udcd6 Documentation</li> <li>\ud83d\udc1b Report Issues</li> <li>\ud83d\udcac Discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License - see LICENSE for details.</p>"},{"location":"api/","title":"API Reference","text":"<p>This section contains the complete API reference for VSCode Sockpuppet, automatically generated from the Python source code docstrings.</p>"},{"location":"api/#core-classes","title":"Core Classes","text":""},{"location":"api/#client-connection","title":"Client &amp; Connection","text":"<ul> <li>VSCodeClient - Main client for connecting to VS Code</li> </ul>"},{"location":"api/#ui-windows","title":"UI &amp; Windows","text":"<ul> <li>Window - Window operations, messages, dialogs</li> <li>Editor - Text editor operations and decorations</li> <li>Webview - Custom HTML panels</li> </ul>"},{"location":"api/#documents-files","title":"Documents &amp; Files","text":"<ul> <li>TextDocument - Document access and text operations</li> <li>Workspace - Workspace folders, files, configuration</li> <li>FileSystem - File system operations</li> </ul>"},{"location":"api/#events-monitoring","title":"Events &amp; Monitoring","text":"<ul> <li>Events - Event subscription system</li> <li>FileWatcher - File system watching</li> </ul>"},{"location":"api/#ui-components","title":"UI Components","text":"<ul> <li>Terminal - Terminal management</li> <li>Tabs - Tab and tab group management</li> <li>StatusBar - Status bar items</li> <li>Progress - Progress indicators</li> </ul>"},{"location":"api/#development-tools","title":"Development Tools","text":"<ul> <li>Diagnostics - Problem reporting and language features</li> <li>Configuration - Settings and configuration</li> </ul>"},{"location":"api/#type-definitions","title":"Type Definitions","text":"<ul> <li>Types - TypedDict definitions for API structures</li> </ul>"},{"location":"api/#api-design-principles","title":"API Design Principles","text":""},{"location":"api/#1-mirror-vs-code-api","title":"1. Mirror VS Code API","text":"<p>The Python API closely mirrors the official VS Code Extension API, making it familiar to VS Code extension developers.</p> <pre><code># VS Code Extension API (TypeScript)\nvscode.window.showInformationMessage(\"Hello!\");\n\n# VSCode Sockpuppet (Python) \nvscode.window.show_information_message(\"Hello!\")\n</code></pre>"},{"location":"api/#2-pythonic-conventions","title":"2. Pythonic Conventions","text":"<ul> <li><code>snake_case</code> naming instead of <code>camelCase</code></li> <li>Properties instead of getters</li> <li>Context managers for resource management</li> <li>Type hints throughout</li> </ul>"},{"location":"api/#3-type-safety","title":"3. Type Safety","text":"<p>Full type hints with TypedDict for options:</p> <pre><code>from vscode_sockpuppet import QuickPickOptions\n\noptions: QuickPickOptions = {\n    \"placeHolder\": \"Select an option\",\n    \"canPickMany\": False\n}\nresult = vscode.window.show_quick_pick([\"A\", \"B\", \"C\"], options)\n</code></pre>"},{"location":"api/#4-event-system","title":"4. Event System","text":"<p>VS Code-style event subscriptions:</p> <pre><code># Subscribe to editor changes\ndef on_change(editor):\n    print(f\"Now editing: {editor.document.file_name}\")\n\nvscode.window.on_did_change_active_text_editor(on_change)\n</code></pre>"},{"location":"api/#common-patterns","title":"Common Patterns","text":""},{"location":"api/#context-manager","title":"Context Manager","text":"<p>Always use the context manager for automatic cleanup:</p> <pre><code>with VSCodeClient() as vscode:\n    # Your code here\n    pass\n# Connection automatically closed\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>Methods return <code>None</code> when operations fail or are dismissed:</p> <pre><code>result = vscode.window.show_quick_pick([\"A\", \"B\", \"C\"])\nif result is None:\n    print(\"User dismissed the picker\")\nelse:\n    print(f\"Selected: {result}\")\n</code></pre>"},{"location":"api/#async-operations","title":"Async Operations","text":"<p>Most operations are synchronous, but events use callbacks:</p> <pre><code>def handle_save(doc):\n    print(f\"Saved: {doc.file_name}\")\n\nvscode.workspace.on_did_save_text_document(handle_save)\n</code></pre>"},{"location":"api/#next-steps","title":"Next Steps","text":"<ul> <li>Browse the individual API pages for detailed documentation</li> <li>Check out Examples for practical use cases</li> <li>Read the Development Guide to contribute</li> </ul>"},{"location":"api/client/","title":"VSCodeClient","text":"<p>The main entry point for connecting to VS Code.</p>"},{"location":"api/client/#vscode_sockpuppet.client.VSCodeClient","title":"VSCodeClient","text":"<pre><code>VSCodeClient(pipe_path: Optional[str] = None)\n</code></pre> <p>Main client for interacting with VS Code via Sockpuppet extension.</p> <p>Initialize the VS Code client.</p> <p>Parameters:</p> Name Type Description Default <code>pipe_path</code> <code>Optional[str]</code> <p>Path to the named pipe/socket.       If None, checks VSCODE_SOCKPUPPET_PIPE environment       variable, then falls back to platform default.</p> <code>None</code> Source code in <code>vscode_sockpuppet/client.py</code> <pre><code>def __init__(self, pipe_path: Optional[str] = None):\n    \"\"\"\n    Initialize the VS Code client.\n\n    Args:\n        pipe_path: Path to the named pipe/socket.\n                  If None, checks VSCODE_SOCKPUPPET_PIPE environment\n                  variable, then falls back to platform default.\n    \"\"\"\n    if pipe_path is None:\n        # First try environment variable (set by other extensions)\n        pipe_path = os.environ.get(\"VSCODE_SOCKPUPPET_PIPE\")\n\n    if pipe_path is None:\n        # Use platform-specific default paths\n        if os.name == \"nt\":  # Windows\n            pipe_path = r\"\\\\.\\pipe\\vscode-sockpuppet\"\n        else:  # Unix/Linux/Mac\n            pipe_path = os.path.join(tempfile.gettempdir(), \"vscode-sockpuppet.sock\")\n\n    self.pipe_path = pipe_path\n    self.sock: Optional[Union[socket.socket, Any]] = None\n    self._request_id = 0\n    self._lock = threading.Lock()\n    self._buffer = \"\"\n    self._event_handlers: Dict[str, list[Callable]] = {}\n    self._event_thread: Optional[threading.Thread] = None\n    self._running = False\n\n    # API namespaces\n    self.window = Window(self)\n    self.workspace = Workspace(self)\n    self.editor = Editor(self)\n    self.fs = FileSystem(self)\n    self.languages = Languages(self)\n    self.lm = LanguageModel(self)\n</code></pre>"},{"location":"api/client/#vscode_sockpuppet.client.VSCodeClient.connect","title":"connect","text":"<pre><code>connect() -&gt; None\n</code></pre> <p>Connect to the VS Code extension via named pipe/socket.</p> Source code in <code>vscode_sockpuppet/client.py</code> <pre><code>def connect(self) -&gt; None:\n    \"\"\"Connect to the VS Code extension via named pipe/socket.\"\"\"\n    if os.name == \"nt\":  # Windows named pipe\n        try:\n            # On Windows, use standard file operations for named pipes\n            # Python 3 can open named pipes like regular files\n            import time\n\n            # Wait for pipe to be available (retry for up to 5 seconds)\n            max_retries = 50\n            retry_delay = 0.1\n\n            for attempt in range(max_retries):\n                try:\n                    # Open named pipe with read/write binary mode\n                    self.sock = open(self.pipe_path, \"r+b\", buffering=0)\n                    break\n                except FileNotFoundError as e:\n                    if attempt &lt; max_retries - 1:\n                        time.sleep(retry_delay)\n                    else:\n                        raise ConnectionError(\n                            f\"Named pipe not found: {self.pipe_path}. \"\n                            \"Make sure VS Code extension is running.\"\n                        ) from e\n                except PermissionError as e:\n                    raise ConnectionError(f\"Permission denied accessing pipe: {e}\") from e\n        except Exception as e:\n            if not isinstance(e, ConnectionError):\n                raise ConnectionError(\n                    f\"Could not connect to VS Code. Make sure extension is running. Error: {e}\"\n                ) from e\n            raise\n    else:  # Unix domain socket\n        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        try:\n            self.sock.connect(self.pipe_path)\n        except Exception as e:\n            raise ConnectionError(\n                f\"Could not connect to VS Code. Make sure extension is running. Error: {e}\"\n            ) from e\n</code></pre>"},{"location":"api/client/#vscode_sockpuppet.client.VSCodeClient.disconnect","title":"disconnect","text":"<pre><code>disconnect() -&gt; None\n</code></pre> <p>Disconnect from the VS Code extension.</p> Source code in <code>vscode_sockpuppet/client.py</code> <pre><code>def disconnect(self) -&gt; None:\n    \"\"\"Disconnect from the VS Code extension.\"\"\"\n    if self.sock:\n        try:\n            if hasattr(self.sock, \"close\"):\n                self.sock.close()\n        except Exception:\n            pass\n        self.sock = None\n</code></pre>"},{"location":"api/client/#vscode_sockpuppet.client.VSCodeClient.is_connected","title":"is_connected","text":"<pre><code>is_connected() -&gt; bool\n</code></pre> <p>Check if connected to VS Code.</p> Source code in <code>vscode_sockpuppet/client.py</code> <pre><code>def is_connected(self) -&gt; bool:\n    \"\"\"Check if connected to VS Code.\"\"\"\n    return self.sock is not None\n</code></pre>"},{"location":"api/client/#vscode_sockpuppet.client.VSCodeClient.execute_command","title":"execute_command","text":"<pre><code>execute_command(command: str, *args) -&gt; Any\n</code></pre> <p>Execute a VS Code command.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>The command identifier</p> required <code>*args</code> <p>Arguments to pass to the command</p> <code>()</code> <p>Returns:</p> Type Description <code>Any</code> <p>The result of the command execution</p> Source code in <code>vscode_sockpuppet/client.py</code> <pre><code>def execute_command(self, command: str, *args) -&gt; Any:\n    \"\"\"\n    Execute a VS Code command.\n\n    Args:\n        command: The command identifier\n        *args: Arguments to pass to the command\n\n    Returns:\n        The result of the command execution\n    \"\"\"\n    return self._send_request(\n        \"commands.executeCommand\", {\"command\": command, \"args\": list(args)}\n    )\n</code></pre>"},{"location":"api/client/#vscode_sockpuppet.client.VSCodeClient.get_commands","title":"get_commands","text":"<pre><code>get_commands(filter_internal: bool = False) -&gt; list[str]\n</code></pre> <p>Get all available VS Code commands.</p> <p>Parameters:</p> Name Type Description Default <code>filter_internal</code> <code>bool</code> <p>Whether to filter internal commands</p> <code>False</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of command identifiers</p> Source code in <code>vscode_sockpuppet/client.py</code> <pre><code>def get_commands(self, filter_internal: bool = False) -&gt; list[str]:\n    \"\"\"\n    Get all available VS Code commands.\n\n    Args:\n        filter_internal: Whether to filter internal commands\n\n    Returns:\n        List of command identifiers\n    \"\"\"\n    return self._send_request(\"commands.getCommands\", {\"filterInternal\": filter_internal})\n</code></pre>"},{"location":"api/client/#vscode_sockpuppet.client.VSCodeClient.subscribe","title":"subscribe","text":"<pre><code>subscribe(event: str, handler: Callable[[Any], None]) -&gt; None\n</code></pre> <p>Subscribe to a VS Code event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>Event name (e.g., 'workspace.onDidSaveTextDocument')</p> required <code>handler</code> <code>Callable[[Any], None]</code> <p>Callback function to handle the event data</p> required Available events <ul> <li>workspace.onDidOpenTextDocument</li> <li>workspace.onDidCloseTextDocument</li> <li>workspace.onDidSaveTextDocument</li> <li>workspace.onDidChangeTextDocument</li> <li>window.onDidChangeActiveTextEditor</li> <li>window.onDidChangeTextEditorSelection</li> <li>window.onDidChangeVisibleTextEditors</li> <li>window.onDidOpenTerminal</li> <li>window.onDidCloseTerminal</li> <li>workspace.onDidChangeWorkspaceFolders</li> <li>workspace.onDidChangeConfiguration</li> </ul> Source code in <code>vscode_sockpuppet/client.py</code> <pre><code>def subscribe(self, event: str, handler: Callable[[Any], None]) -&gt; None:\n    \"\"\"\n    Subscribe to a VS Code event.\n\n    Args:\n        event: Event name (e.g., 'workspace.onDidSaveTextDocument')\n        handler: Callback function to handle the event data\n\n    Available events:\n        - workspace.onDidOpenTextDocument\n        - workspace.onDidCloseTextDocument\n        - workspace.onDidSaveTextDocument\n        - workspace.onDidChangeTextDocument\n        - window.onDidChangeActiveTextEditor\n        - window.onDidChangeTextEditorSelection\n        - window.onDidChangeVisibleTextEditors\n        - window.onDidOpenTerminal\n        - window.onDidCloseTerminal\n        - workspace.onDidChangeWorkspaceFolders\n        - workspace.onDidChangeConfiguration\n    \"\"\"\n    # Start event listener thread if not running\n    if not self._running and self._event_thread is None:\n        self._running = True\n        self._event_thread = threading.Thread(target=self._event_loop, daemon=True)\n        self._event_thread.start()\n\n    if event not in self._event_handlers:\n        self._event_handlers[event] = []\n        # Subscribe on server\n        self._send_request(\"events.subscribe\", {\"event\": event})\n\n    self._event_handlers[event].append(handler)\n</code></pre>"},{"location":"api/client/#vscode_sockpuppet.client.VSCodeClient.unsubscribe","title":"unsubscribe","text":"<pre><code>unsubscribe(event: str, handler: Optional[Callable] = None) -&gt; None\n</code></pre> <p>Unsubscribe from a VS Code event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>str</code> <p>Event name</p> required <code>handler</code> <code>Optional[Callable]</code> <p>Specific handler to remove, or None to remove all</p> <code>None</code> Source code in <code>vscode_sockpuppet/client.py</code> <pre><code>def unsubscribe(self, event: str, handler: Optional[Callable] = None) -&gt; None:\n    \"\"\"\n    Unsubscribe from a VS Code event.\n\n    Args:\n        event: Event name\n        handler: Specific handler to remove, or None to remove all\n    \"\"\"\n    if event not in self._event_handlers:\n        return\n\n    if handler is None:\n        # Remove all handlers for this event\n        del self._event_handlers[event]\n        self._send_request(\"events.unsubscribe\", {\"event\": event})\n    else:\n        # Remove specific handler\n        if handler in self._event_handlers[event]:\n            self._event_handlers[event].remove(handler)\n\n        # If no handlers left, unsubscribe from server\n        if not self._event_handlers[event]:\n            del self._event_handlers[event]\n            self._send_request(\"events.unsubscribe\", {\"event\": event})\n</code></pre>"},{"location":"api/client/#vscode_sockpuppet.client.VSCodeClient.get_subscriptions","title":"get_subscriptions","text":"<pre><code>get_subscriptions() -&gt; list[str]\n</code></pre> <p>Get list of currently subscribed events.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of event names</p> Source code in <code>vscode_sockpuppet/client.py</code> <pre><code>def get_subscriptions(self) -&gt; list[str]:\n    \"\"\"\n    Get list of currently subscribed events.\n\n    Returns:\n        List of event names\n    \"\"\"\n    return self._send_request(\"events.listSubscriptions\")\n</code></pre>"},{"location":"api/client/#vscode_sockpuppet.client.VSCodeClient.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> <p>Context manager entry.</p> Source code in <code>vscode_sockpuppet/client.py</code> <pre><code>def __enter__(self):\n    \"\"\"Context manager entry.\"\"\"\n    self.connect()\n    return self\n</code></pre>"},{"location":"api/client/#vscode_sockpuppet.client.VSCodeClient.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_val, exc_tb)\n</code></pre> <p>Context manager exit.</p> Source code in <code>vscode_sockpuppet/client.py</code> <pre><code>def __exit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Context manager exit.\"\"\"\n    self._running = False\n    if self._event_thread:\n        self._event_thread.join(timeout=1.0)\n    self.disconnect()\n</code></pre>"},{"location":"api/configuration/","title":"Configuration","text":"<p>Workspace and user settings management.</p>"},{"location":"api/configuration/#vscode_sockpuppet.configuration.WorkspaceConfiguration","title":"WorkspaceConfiguration","text":"<pre><code>WorkspaceConfiguration(client: VSCodeClient, section: Optional[str] = None, scope: Optional[str] = None)\n</code></pre> <p>VS Code workspace configuration.</p> <p>Represents configuration values that can be read and updated.</p> <p>Initialize configuration.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>The VS Code client</p> required <code>section</code> <code>Optional[str]</code> <p>Configuration section (e.g., 'editor', 'python.linting')</p> <code>None</code> <code>scope</code> <code>Optional[str]</code> <p>Resource URI or language ID for scoped configuration</p> <code>None</code> Source code in <code>vscode_sockpuppet/configuration.py</code> <pre><code>def __init__(\n    self,\n    client: \"VSCodeClient\",\n    section: Optional[str] = None,\n    scope: Optional[str] = None,\n):\n    \"\"\"\n    Initialize configuration.\n\n    Args:\n        client: The VS Code client\n        section: Configuration section (e.g., 'editor', 'python.linting')\n        scope: Resource URI or language ID for scoped configuration\n    \"\"\"\n    self.client = client\n    self.section = section or \"\"\n    self.scope = scope\n</code></pre>"},{"location":"api/configuration/#vscode_sockpuppet.configuration.WorkspaceConfiguration.get","title":"get","text":"<pre><code>get(key: str, default_value: Any = None) -&gt; Any\n</code></pre> <p>Get a configuration value.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Configuration key (supports dot notation)</p> required <code>default_value</code> <code>Any</code> <p>Default value if key doesn't exist</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>Configuration value or default_value</p> Example <p>config = client.workspace.get_configuration('editor') font_size = config.get('fontSize', 14)</p> Source code in <code>vscode_sockpuppet/configuration.py</code> <pre><code>def get(self, key: str, default_value: Any = None) -&gt; Any:\n    \"\"\"\n    Get a configuration value.\n\n    Args:\n        key: Configuration key (supports dot notation)\n        default_value: Default value if key doesn't exist\n\n    Returns:\n        Configuration value or default_value\n\n    Example:\n        config = client.workspace.get_configuration('editor')\n        font_size = config.get('fontSize', 14)\n    \"\"\"\n    full_key = f\"{self.section}.{key}\" if self.section else key\n\n    result = self.client._send_request(\n        \"workspace.getConfiguration\",\n        {\"section\": full_key, \"scope\": self.scope},\n    )\n\n    if result is None:\n        return default_value\n    return result\n</code></pre>"},{"location":"api/configuration/#vscode_sockpuppet.configuration.WorkspaceConfiguration.has","title":"has","text":"<pre><code>has(key: str) -&gt; bool\n</code></pre> <p>Check if a configuration key exists.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Configuration key (supports dot notation)</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the key exists</p> Example <p>config = client.workspace.get_configuration('editor') if config.has('fontSize'):     print(\"Font size is configured\")</p> Source code in <code>vscode_sockpuppet/configuration.py</code> <pre><code>def has(self, key: str) -&gt; bool:\n    \"\"\"\n    Check if a configuration key exists.\n\n    Args:\n        key: Configuration key (supports dot notation)\n\n    Returns:\n        True if the key exists\n\n    Example:\n        config = client.workspace.get_configuration('editor')\n        if config.has('fontSize'):\n            print(\"Font size is configured\")\n    \"\"\"\n    full_key = f\"{self.section}.{key}\" if self.section else key\n\n    return self.client._send_request(\n        \"workspace.hasConfiguration\",\n        {\"section\": full_key, \"scope\": self.scope},\n    )\n</code></pre>"},{"location":"api/configuration/#vscode_sockpuppet.configuration.WorkspaceConfiguration.inspect","title":"inspect","text":"<pre><code>inspect(key: str) -&gt; Optional[dict]\n</code></pre> <p>Inspect all configuration values for a key.</p> <p>Returns detailed information about where a configuration value comes from (default, global, workspace, workspace folder).</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Configuration key (supports dot notation)</p> required <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Dictionary with keys: key, defaultValue, globalValue,</p> <code>Optional[dict]</code> <p>workspaceValue, workspaceFolderValue, etc.</p> <code>Optional[dict]</code> <p>Returns None if key doesn't exist.</p> Example <p>config = client.workspace.get_configuration('editor') info = config.inspect('fontSize') if info:     print(f\"Default: {info.get('defaultValue')}\")     print(f\"Global: {info.get('globalValue')}\")     print(f\"Workspace: {info.get('workspaceValue')}\")</p> Source code in <code>vscode_sockpuppet/configuration.py</code> <pre><code>def inspect(self, key: str) -&gt; Optional[dict]:\n    \"\"\"\n    Inspect all configuration values for a key.\n\n    Returns detailed information about where a configuration value\n    comes from (default, global, workspace, workspace folder).\n\n    Args:\n        key: Configuration key (supports dot notation)\n\n    Returns:\n        Dictionary with keys: key, defaultValue, globalValue,\n        workspaceValue, workspaceFolderValue, etc.\n        Returns None if key doesn't exist.\n\n    Example:\n        config = client.workspace.get_configuration('editor')\n        info = config.inspect('fontSize')\n        if info:\n            print(f\"Default: {info.get('defaultValue')}\")\n            print(f\"Global: {info.get('globalValue')}\")\n            print(f\"Workspace: {info.get('workspaceValue')}\")\n    \"\"\"\n    full_key = f\"{self.section}.{key}\" if self.section else key\n\n    return self.client._send_request(\n        \"workspace.inspectConfiguration\",\n        {\"section\": full_key, \"scope\": self.scope},\n    )\n</code></pre>"},{"location":"api/configuration/#vscode_sockpuppet.configuration.WorkspaceConfiguration.update","title":"update","text":"<pre><code>update(key: str, value: Any, configuration_target: Optional[ConfigurationTarget | bool | None] = None, override_in_language: bool = False) -&gt; None\n</code></pre> <p>Update a configuration value.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Configuration key (supports dot notation)</p> required <code>value</code> <code>Any</code> <p>New value (use None to remove the setting)</p> required <code>configuration_target</code> <code>Optional[ConfigurationTarget | bool | None]</code> <p>Where to save the setting: - ConfigurationTarget.GLOBAL: User settings - ConfigurationTarget.WORKSPACE: Workspace settings - ConfigurationTarget.WORKSPACE_FOLDER: Folder settings - True: User settings (same as GLOBAL) - False: Workspace settings - None: Auto-detect based on scope</p> <code>None</code> <code>override_in_language</code> <code>bool</code> <p>Whether to update language-specific value</p> <code>False</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If update fails (e.g., invalid key, no workspace)</p> Example <p>config = client.workspace.get_configuration('editor')</p> Source code in <code>vscode_sockpuppet/configuration.py</code> <pre><code>def update(\n    self,\n    key: str,\n    value: Any,\n    configuration_target: Optional[ConfigurationTarget | bool | None] = None,\n    override_in_language: bool = False,\n) -&gt; None:\n    \"\"\"\n    Update a configuration value.\n\n    Args:\n        key: Configuration key (supports dot notation)\n        value: New value (use None to remove the setting)\n        configuration_target: Where to save the setting:\n            - ConfigurationTarget.GLOBAL: User settings\n            - ConfigurationTarget.WORKSPACE: Workspace settings\n            - ConfigurationTarget.WORKSPACE_FOLDER: Folder settings\n            - True: User settings (same as GLOBAL)\n            - False: Workspace settings\n            - None: Auto-detect based on scope\n        override_in_language: Whether to update language-specific value\n\n    Raises:\n        Exception: If update fails (e.g., invalid key, no workspace)\n\n    Example:\n        config = client.workspace.get_configuration('editor')\n        # Update user settings\n        config.update('fontSize', 16, ConfigurationTarget.GLOBAL)\n        # Update workspace settings\n        config.update('tabSize', 2, ConfigurationTarget.WORKSPACE)\n        # Remove a setting\n        config.update('fontSize', None, ConfigurationTarget.GLOBAL)\n    \"\"\"\n    full_key = f\"{self.section}.{key}\" if self.section else key\n\n    # Convert boolean to ConfigurationTarget\n    if isinstance(configuration_target, bool):\n        target = (\n            ConfigurationTarget.GLOBAL\n            if configuration_target\n            else ConfigurationTarget.WORKSPACE\n        )\n    elif configuration_target is None:\n        target = None\n    else:\n        target = configuration_target\n\n    self.client._send_request(\n        \"workspace.updateConfiguration\",\n        {\n            \"section\": full_key,\n            \"value\": value,\n            \"configurationTarget\": target.value if target else None,\n            \"scope\": self.scope,\n            \"overrideInLanguage\": override_in_language,\n        },\n    )\n</code></pre>"},{"location":"api/configuration/#vscode_sockpuppet.configuration.WorkspaceConfiguration.update--update-user-settings","title":"Update user settings","text":"<p>config.update('fontSize', 16, ConfigurationTarget.GLOBAL)</p>"},{"location":"api/configuration/#vscode_sockpuppet.configuration.WorkspaceConfiguration.update--update-workspace-settings","title":"Update workspace settings","text":"<p>config.update('tabSize', 2, ConfigurationTarget.WORKSPACE)</p>"},{"location":"api/configuration/#vscode_sockpuppet.configuration.WorkspaceConfiguration.update--remove-a-setting","title":"Remove a setting","text":"<p>config.update('fontSize', None, ConfigurationTarget.GLOBAL)</p>"},{"location":"api/configuration/#configurationtarget","title":"ConfigurationTarget","text":""},{"location":"api/configuration/#vscode_sockpuppet.configuration.ConfigurationTarget","title":"ConfigurationTarget","text":"<p>               Bases: <code>IntEnum</code></p> <p>Configuration target specifies where to save settings.</p>"},{"location":"api/diagnostics/","title":"Diagnostics","text":"<p>Problem reporting and language server features.</p>"},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.Languages","title":"Languages","text":"<pre><code>Languages(client: VSCodeClient)\n</code></pre> <p>Language-related operations for VS Code.</p> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\"):\n    self.client = client\n    self._collections: dict[str, DiagnosticCollection] = {}\n</code></pre>"},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.Languages.create_diagnostic_collection","title":"create_diagnostic_collection","text":"<pre><code>create_diagnostic_collection(name: str = 'default') -&gt; DiagnosticCollection\n</code></pre> <p>Create a diagnostic collection.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the collection (default: 'default')</p> <code>'default'</code> <p>Returns:</p> Type Description <code>DiagnosticCollection</code> <p>A new diagnostic collection</p> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def create_diagnostic_collection(self, name: str = \"default\") -&gt; DiagnosticCollection:\n    \"\"\"\n    Create a diagnostic collection.\n\n    Args:\n        name: Name of the collection (default: 'default')\n\n    Returns:\n        A new diagnostic collection\n    \"\"\"\n    if name in self._collections:\n        return self._collections[name]\n\n    self.client._send_request(\"languages.createDiagnosticCollection\", {\"name\": name})\n    collection = DiagnosticCollection(self.client, name)\n    self._collections[name] = collection\n    return collection\n</code></pre>"},{"location":"api/diagnostics/#diagnostic","title":"Diagnostic","text":""},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.Diagnostic","title":"Diagnostic","text":"<pre><code>Diagnostic(range: dict, message: str, severity: Union[int, str] = DiagnosticSeverity.Error, source: Optional[str] = None, code: Optional[Union[str, int]] = None)\n</code></pre> <p>Represents a diagnostic, such as a compiler error or warning.</p> <p>Create a diagnostic.</p> <p>Parameters:</p> Name Type Description Default <code>range</code> <code>dict</code> <p>Range dict with start and end positions</p> required <code>message</code> <code>str</code> <p>Diagnostic message</p> required <code>severity</code> <code>Union[int, str]</code> <p>Severity level (Error, Warning, Information, Hint)</p> <code>Error</code> <code>source</code> <code>Optional[str]</code> <p>Source of the diagnostic (e.g., 'python', 'mypy')</p> <code>None</code> <code>code</code> <code>Optional[Union[str, int]]</code> <p>Diagnostic code</p> <code>None</code> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def __init__(\n    self,\n    range: dict,\n    message: str,\n    severity: Union[int, str] = DiagnosticSeverity.Error,\n    source: Optional[str] = None,\n    code: Optional[Union[str, int]] = None,\n):\n    \"\"\"\n    Create a diagnostic.\n\n    Args:\n        range: Range dict with start and end positions\n        message: Diagnostic message\n        severity: Severity level (Error, Warning, Information, Hint)\n        source: Source of the diagnostic (e.g., 'python', 'mypy')\n        code: Diagnostic code\n    \"\"\"\n    self.range = range\n    self.message = message\n    self.severity = severity\n    self.source = source\n    self.code = code\n    self.related_information: List[DiagnosticRelatedInformation] = []\n</code></pre>"},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.Diagnostic.add_related_information","title":"add_related_information","text":"<pre><code>add_related_information(location: dict, message: str) -&gt; Diagnostic\n</code></pre> <p>Add related information to this diagnostic.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>dict</code> <p>Location dict with uri and range</p> required <code>message</code> <code>str</code> <p>Related message</p> required <p>Returns:</p> Type Description <code>Diagnostic</code> <p>Self for chaining</p> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def add_related_information(self, location: dict, message: str) -&gt; \"Diagnostic\":\n    \"\"\"\n    Add related information to this diagnostic.\n\n    Args:\n        location: Location dict with uri and range\n        message: Related message\n\n    Returns:\n        Self for chaining\n    \"\"\"\n    self.related_information.append(DiagnosticRelatedInformation(location, message))\n    return self\n</code></pre>"},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.Diagnostic.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre> <p>Convert to dictionary for JSON serialization.</p> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def to_dict(self) -&gt; dict:\n    \"\"\"Convert to dictionary for JSON serialization.\"\"\"\n    result = {\n        \"range\": self.range,\n        \"message\": self.message,\n        \"severity\": self.severity,\n    }\n    if self.source:\n        result[\"source\"] = self.source\n    if self.code is not None:\n        result[\"code\"] = self.code\n    if self.related_information:\n        result[\"relatedInformation\"] = [info.to_dict() for info in self.related_information]\n    return result\n</code></pre>"},{"location":"api/diagnostics/#diagnosticseverity","title":"DiagnosticSeverity","text":""},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.DiagnosticSeverity","title":"DiagnosticSeverity","text":"<p>Diagnostic severity levels.</p>"},{"location":"api/diagnostics/#diagnosticcollection","title":"DiagnosticCollection","text":""},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.DiagnosticCollection","title":"DiagnosticCollection","text":"<pre><code>DiagnosticCollection(client: VSCodeClient, name: str)\n</code></pre> <p>A collection of diagnostics for a specific source.</p> <p>Create a diagnostic collection.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>The VS Code client</p> required <code>name</code> <code>str</code> <p>Name of the collection</p> required Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\", name: str):\n    \"\"\"\n    Create a diagnostic collection.\n\n    Args:\n        client: The VS Code client\n        name: Name of the collection\n    \"\"\"\n    self.client = client\n    self.name = name\n</code></pre>"},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.DiagnosticCollection.set","title":"set","text":"<pre><code>set(uri: str, diagnostics: Optional[List[Diagnostic]] = None) -&gt; None\n</code></pre> <p>Set diagnostics for a URI.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI to set diagnostics for</p> required <code>diagnostics</code> <code>Optional[List[Diagnostic]]</code> <p>List of diagnostics (None or [] clears)</p> <code>None</code> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def set(self, uri: str, diagnostics: Optional[List[Diagnostic]] = None) -&gt; None:\n    \"\"\"\n    Set diagnostics for a URI.\n\n    Args:\n        uri: The URI to set diagnostics for\n        diagnostics: List of diagnostics (None or [] clears)\n    \"\"\"\n    diag_list = [d.to_dict() for d in diagnostics] if diagnostics else []\n    self.client._send_request(\n        \"languages.setDiagnostics\",\n        {\"name\": self.name, \"uri\": uri, \"diagnostics\": diag_list},\n    )\n</code></pre>"},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.DiagnosticCollection.delete","title":"delete","text":"<pre><code>delete(uri: str) -&gt; None\n</code></pre> <p>Delete diagnostics for a URI.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI to clear diagnostics for</p> required Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def delete(self, uri: str) -&gt; None:\n    \"\"\"\n    Delete diagnostics for a URI.\n\n    Args:\n        uri: The URI to clear diagnostics for\n    \"\"\"\n    self.client._send_request(\"languages.clearDiagnostics\", {\"name\": self.name, \"uri\": uri})\n</code></pre>"},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.DiagnosticCollection.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clear all diagnostics in this collection.</p> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"Clear all diagnostics in this collection.\"\"\"\n    self.client._send_request(\"languages.clearDiagnostics\", {\"name\": self.name})\n</code></pre>"},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.DiagnosticCollection.dispose","title":"dispose","text":"<pre><code>dispose() -&gt; None\n</code></pre> <p>Dispose this diagnostic collection.</p> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def dispose(self) -&gt; None:\n    \"\"\"Dispose this diagnostic collection.\"\"\"\n    self.client._send_request(\"languages.disposeDiagnosticCollection\", {\"name\": self.name})\n</code></pre>"},{"location":"api/diagnostics/#diagnosticrelatedinformation","title":"DiagnosticRelatedInformation","text":""},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.DiagnosticRelatedInformation","title":"DiagnosticRelatedInformation","text":"<pre><code>DiagnosticRelatedInformation(location: dict, message: str)\n</code></pre> <p>Related information for a diagnostic.</p> <p>Create diagnostic related information.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>dict</code> <p>Location dict with uri and range</p> required <code>message</code> <code>str</code> <p>Related message</p> required Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def __init__(self, location: dict, message: str):\n    \"\"\"\n    Create diagnostic related information.\n\n    Args:\n        location: Location dict with uri and range\n        message: Related message\n    \"\"\"\n    self.location = location\n    self.message = message\n</code></pre>"},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.DiagnosticRelatedInformation.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre> <p>Convert to dictionary for JSON serialization.</p> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def to_dict(self) -&gt; dict:\n    \"\"\"Convert to dictionary for JSON serialization.\"\"\"\n    return {\n        \"location\": self.location,\n        \"message\": self.message,\n    }\n</code></pre>"},{"location":"api/diagnostics/#utility-functions","title":"Utility Functions","text":""},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.create_position","title":"create_position","text":"<pre><code>create_position(line: int, character: int) -&gt; dict\n</code></pre> <p>Create a position object.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>int</code> <p>Line number (0-based)</p> required <code>character</code> <code>int</code> <p>Character position (0-based)</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Position dictionary</p> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def create_position(line: int, character: int) -&gt; dict:\n    \"\"\"\n    Create a position object.\n\n    Args:\n        line: Line number (0-based)\n        character: Character position (0-based)\n\n    Returns:\n        Position dictionary\n    \"\"\"\n    return {\"line\": line, \"character\": character}\n</code></pre>"},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.create_range","title":"create_range","text":"<pre><code>create_range(start_line: int, start_char: int, end_line: int, end_char: int) -&gt; dict\n</code></pre> <p>Create a range object.</p> <p>Parameters:</p> Name Type Description Default <code>start_line</code> <code>int</code> <p>Start line (0-based)</p> required <code>start_char</code> <code>int</code> <p>Start character (0-based)</p> required <code>end_line</code> <code>int</code> <p>End line (0-based)</p> required <code>end_char</code> <code>int</code> <p>End character (0-based)</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Range dictionary</p> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def create_range(start_line: int, start_char: int, end_line: int, end_char: int) -&gt; dict:\n    \"\"\"\n    Create a range object.\n\n    Args:\n        start_line: Start line (0-based)\n        start_char: Start character (0-based)\n        end_line: End line (0-based)\n        end_char: End character (0-based)\n\n    Returns:\n        Range dictionary\n    \"\"\"\n    return {\n        \"start\": {\"line\": start_line, \"character\": start_char},\n        \"end\": {\"line\": end_line, \"character\": end_char},\n    }\n</code></pre>"},{"location":"api/diagnostics/#vscode_sockpuppet.diagnostics.create_location","title":"create_location","text":"<pre><code>create_location(uri: str, range: dict) -&gt; dict\n</code></pre> <p>Create a location object.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the location</p> required <code>range</code> <code>dict</code> <p>The range in the document</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Location dictionary</p> Source code in <code>vscode_sockpuppet/diagnostics.py</code> <pre><code>def create_location(uri: str, range: dict) -&gt; dict:\n    \"\"\"\n    Create a location object.\n\n    Args:\n        uri: The URI of the location\n        range: The range in the document\n\n    Returns:\n        Location dictionary\n    \"\"\"\n    return {\"uri\": uri, \"range\": range}\n</code></pre>"},{"location":"api/document/","title":"TextDocument","text":"<p>Document model for reading and manipulating text documents.</p>"},{"location":"api/document/#position","title":"Position","text":""},{"location":"api/document/#vscode_sockpuppet.document.Position","title":"Position  <code>dataclass</code>","text":"<pre><code>Position(line: int, character: int)\n</code></pre> <p>Represents a line and character position in a document.</p>"},{"location":"api/document/#vscode_sockpuppet.document.Position.is_before","title":"is_before","text":"<pre><code>is_before(other: Position) -&gt; bool\n</code></pre> <p>Check if this position is before another position.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def is_before(self, other: \"Position\") -&gt; bool:\n    \"\"\"Check if this position is before another position.\"\"\"\n    if self.line &lt; other.line:\n        return True\n    if self.line == other.line and self.character &lt; other.character:\n        return True\n    return False\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Position.is_before_or_equal","title":"is_before_or_equal","text":"<pre><code>is_before_or_equal(other: Position) -&gt; bool\n</code></pre> <p>Check if this position is before or equal to another.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def is_before_or_equal(self, other: \"Position\") -&gt; bool:\n    \"\"\"Check if this position is before or equal to another.\"\"\"\n    return self.is_before(other) or self.is_equal(other)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Position.is_after","title":"is_after","text":"<pre><code>is_after(other: Position) -&gt; bool\n</code></pre> <p>Check if this position is after another position.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def is_after(self, other: \"Position\") -&gt; bool:\n    \"\"\"Check if this position is after another position.\"\"\"\n    return not self.is_before_or_equal(other)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Position.is_after_or_equal","title":"is_after_or_equal","text":"<pre><code>is_after_or_equal(other: Position) -&gt; bool\n</code></pre> <p>Check if this position is after or equal to another.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def is_after_or_equal(self, other: \"Position\") -&gt; bool:\n    \"\"\"Check if this position is after or equal to another.\"\"\"\n    return not self.is_before(other)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Position.is_equal","title":"is_equal","text":"<pre><code>is_equal(other: Position) -&gt; bool\n</code></pre> <p>Check if this position is equal to another position.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def is_equal(self, other: \"Position\") -&gt; bool:\n    \"\"\"Check if this position is equal to another position.\"\"\"\n    return self.line == other.line and self.character == other.character\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Position.compare_to","title":"compare_to","text":"<pre><code>compare_to(other: Position) -&gt; int\n</code></pre> <p>Compare this position to another.</p> <p>Returns:</p> Type Description <code>int</code> <p>Negative if this &lt; other, 0 if equal, positive if this &gt; other</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def compare_to(self, other: \"Position\") -&gt; int:\n    \"\"\"\n    Compare this position to another.\n\n    Returns:\n        Negative if this &lt; other, 0 if equal, positive if this &gt; other\n    \"\"\"\n    if self.line &lt; other.line:\n        return -1\n    if self.line &gt; other.line:\n        return 1\n    return self.character - other.character\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Position.translate","title":"translate","text":"<pre><code>translate(line_delta: int = 0, character_delta: int = 0) -&gt; Position\n</code></pre> <p>Create a new position relative to this position.</p> <p>Parameters:</p> Name Type Description Default <code>line_delta</code> <code>int</code> <p>Delta for line value (default 0)</p> <code>0</code> <code>character_delta</code> <code>int</code> <p>Delta for character value (default 0)</p> <code>0</code> <p>Returns:</p> Type Description <code>Position</code> <p>New Position object</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def translate(self, line_delta: int = 0, character_delta: int = 0) -&gt; \"Position\":\n    \"\"\"\n    Create a new position relative to this position.\n\n    Args:\n        line_delta: Delta for line value (default 0)\n        character_delta: Delta for character value (default 0)\n\n    Returns:\n        New Position object\n    \"\"\"\n    return Position(\n        line=self.line + line_delta,\n        character=self.character + character_delta,\n    )\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Position.with_line","title":"with_line","text":"<pre><code>with_line(line: int) -&gt; Position\n</code></pre> <p>Create a new position with a different line number.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def with_line(self, line: int) -&gt; \"Position\":\n    \"\"\"Create a new position with a different line number.\"\"\"\n    return Position(line=line, character=self.character)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Position.with_character","title":"with_character","text":"<pre><code>with_character(character: int) -&gt; Position\n</code></pre> <p>Create a new position with a different character.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def with_character(self, character: int) -&gt; \"Position\":\n    \"\"\"Create a new position with a different character.\"\"\"\n    return Position(line=self.line, character=character)\n</code></pre>"},{"location":"api/document/#range","title":"Range","text":""},{"location":"api/document/#vscode_sockpuppet.document.Range","title":"Range  <code>dataclass</code>","text":"<pre><code>Range(start: Position, end: Position)\n</code></pre> <p>Represents a range in a document with start and end positions.</p>"},{"location":"api/document/#vscode_sockpuppet.document.Range.is_empty","title":"is_empty  <code>property</code>","text":"<pre><code>is_empty: bool\n</code></pre> <p>Check if this range is empty (start == end).</p>"},{"location":"api/document/#vscode_sockpuppet.document.Range.is_single_line","title":"is_single_line  <code>property</code>","text":"<pre><code>is_single_line: bool\n</code></pre> <p>Check if this range is on a single line.</p>"},{"location":"api/document/#vscode_sockpuppet.document.Range.contains","title":"contains","text":"<pre><code>contains(position_or_range: Position | Range) -&gt; bool\n</code></pre> <p>Check if a position or range is contained in this range.</p> <p>Parameters:</p> Name Type Description Default <code>position_or_range</code> <code>Position | Range</code> <p>Position or Range to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if contained within this range</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def contains(self, position_or_range: \"Position | Range\") -&gt; bool:\n    \"\"\"\n    Check if a position or range is contained in this range.\n\n    Args:\n        position_or_range: Position or Range to check\n\n    Returns:\n        True if contained within this range\n    \"\"\"\n    if isinstance(position_or_range, Position):\n        pos = position_or_range\n        return self.start.is_before_or_equal(pos) and self.end.is_after_or_equal(pos)\n    else:\n        other_range = position_or_range\n        return self.start.is_before_or_equal(other_range.start) and self.end.is_after_or_equal(\n            other_range.end\n        )\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Range.is_equal","title":"is_equal","text":"<pre><code>is_equal(other: Range) -&gt; bool\n</code></pre> <p>Check if this range is equal to another range.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def is_equal(self, other: \"Range\") -&gt; bool:\n    \"\"\"Check if this range is equal to another range.\"\"\"\n    return self.start.is_equal(other.start) and self.end.is_equal(other.end)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Range.intersection","title":"intersection","text":"<pre><code>intersection(other: Range) -&gt; Optional[Range]\n</code></pre> <p>Compute the intersection of two ranges.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Range</code> <p>Another range</p> required <p>Returns:</p> Type Description <code>Optional[Range]</code> <p>The intersection range, or None if no intersection</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def intersection(self, other: \"Range\") -&gt; Optional[\"Range\"]:\n    \"\"\"\n    Compute the intersection of two ranges.\n\n    Args:\n        other: Another range\n\n    Returns:\n        The intersection range, or None if no intersection\n    \"\"\"\n    # Find the later start and earlier end\n    start = self.start if self.start.is_after(other.start) else other.start\n    end = self.end if self.end.is_before(other.end) else other.end\n\n    # Check if valid intersection\n    if start.is_after(end):\n        return None\n    return Range(start=start, end=end)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Range.union","title":"union","text":"<pre><code>union(other: Range) -&gt; Range\n</code></pre> <p>Compute the union of two ranges.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Range</code> <p>Another range</p> required <p>Returns:</p> Type Description <code>Range</code> <p>Range spanning both ranges</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def union(self, other: \"Range\") -&gt; \"Range\":\n    \"\"\"\n    Compute the union of two ranges.\n\n    Args:\n        other: Another range\n\n    Returns:\n        Range spanning both ranges\n    \"\"\"\n    start = self.start if self.start.is_before(other.start) else other.start\n    end = self.end if self.end.is_after(other.end) else other.end\n    return Range(start=start, end=end)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Range.with_start","title":"with_start","text":"<pre><code>with_start(start: Position) -&gt; Range\n</code></pre> <p>Create a new range with a different start position.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def with_start(self, start: Position) -&gt; \"Range\":\n    \"\"\"Create a new range with a different start position.\"\"\"\n    return Range(start=start, end=self.end)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.Range.with_end","title":"with_end","text":"<pre><code>with_end(end: Position) -&gt; Range\n</code></pre> <p>Create a new range with a different end position.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def with_end(self, end: Position) -&gt; \"Range\":\n    \"\"\"Create a new range with a different end position.\"\"\"\n    return Range(start=self.start, end=end)\n</code></pre>"},{"location":"api/document/#textline","title":"TextLine","text":""},{"location":"api/document/#vscode_sockpuppet.document.TextLine","title":"TextLine","text":"<pre><code>TextLine(line_number: int, text: str, is_empty_or_whitespace: bool, first_non_whitespace_char_index: int, range_obj: Range, range_including_line_break: Range)\n</code></pre> <p>Represents a line of text in a document.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def __init__(\n    self,\n    line_number: int,\n    text: str,\n    is_empty_or_whitespace: bool,\n    first_non_whitespace_char_index: int,\n    range_obj: Range,\n    range_including_line_break: Range,\n):\n    self.line_number = line_number\n    self.text = text\n    self.is_empty_or_whitespace = is_empty_or_whitespace\n    self.first_non_whitespace_character_index = first_non_whitespace_char_index\n    self.range = range_obj\n    self.range_including_line_break = range_including_line_break\n</code></pre>"},{"location":"api/document/#textdocument_1","title":"TextDocument","text":""},{"location":"api/document/#vscode_sockpuppet.document.TextDocument","title":"TextDocument","text":"<pre><code>TextDocument(client: VSCodeClient, data: dict)\n</code></pre> <p>Represents a text document in VS Code. Mirrors the VS Code TextDocument API.</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\", data: dict):\n    self._client = client\n    self._uri = data[\"uri\"]\n    self._file_name = data[\"fileName\"]\n    self._is_untitled = data[\"isUntitled\"]\n    self._language_id = data[\"languageId\"]\n    self._version = data[\"version\"]\n    self._is_dirty = data[\"isDirty\"]\n    self._is_closed = data[\"isClosed\"]\n    self._eol = data[\"eol\"]\n    self._line_count = data[\"lineCount\"]\n    self._encoding = data[\"encoding\"]\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.uri","title":"uri  <code>property</code>","text":"<pre><code>uri: str\n</code></pre> <p>The URI of this document.</p>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.file_name","title":"file_name  <code>property</code>","text":"<pre><code>file_name: str\n</code></pre> <p>The file system path of this document.</p>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.is_untitled","title":"is_untitled  <code>property</code>","text":"<pre><code>is_untitled: bool\n</code></pre> <p>True if the document is not saved.</p>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.language_id","title":"language_id  <code>property</code>","text":"<pre><code>language_id: str\n</code></pre> <p>The language identifier (e.g., 'python', 'typescript').</p>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.version","title":"version  <code>property</code>","text":"<pre><code>version: int\n</code></pre> <p>The version number (incremented on each change).</p>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.is_dirty","title":"is_dirty  <code>property</code>","text":"<pre><code>is_dirty: bool\n</code></pre> <p>True if there are unsaved changes.</p>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>True if the document has been closed.</p>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.eol","title":"eol  <code>property</code>","text":"<pre><code>eol: str\n</code></pre> <p>End-of-line sequence ('\\n' or '\\r\\n').</p>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.line_count","title":"line_count  <code>property</code>","text":"<pre><code>line_count: int\n</code></pre> <p>The number of lines in this document.</p>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.encoding","title":"encoding  <code>property</code>","text":"<pre><code>encoding: str\n</code></pre> <p>The file encoding that will be used when the document is saved.</p> <p>Common values include: 'utf8', 'utf8bom', 'utf16le', 'utf16be', 'windows1252', 'iso88591', etc.</p>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.save","title":"save","text":"<pre><code>save() -&gt; bool\n</code></pre> <p>Save the document.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if saved successfully</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def save(self) -&gt; bool:\n    \"\"\"\n    Save the document.\n\n    Returns:\n        True if saved successfully\n    \"\"\"\n    result = self._client._send_request(\"document.save\", {\"uri\": self._uri})\n    if result.get(\"success\"):\n        self._is_dirty = False\n        self._version = result.get(\"version\", self._version)\n    return result.get(\"success\", False)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.line_at","title":"line_at","text":"<pre><code>line_at(line_or_position: int | Position) -&gt; TextLine\n</code></pre> <p>Get a text line by line number or position.</p> <p>Parameters:</p> Name Type Description Default <code>line_or_position</code> <code>int | Position</code> <p>Line number (0-based) or Position</p> required <p>Returns:</p> Type Description <code>TextLine</code> <p>TextLine object</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def line_at(self, line_or_position: int | Position) -&gt; TextLine:\n    \"\"\"\n    Get a text line by line number or position.\n\n    Args:\n        line_or_position: Line number (0-based) or Position\n\n    Returns:\n        TextLine object\n    \"\"\"\n    if isinstance(line_or_position, Position):\n        line_num = line_or_position.line\n    else:\n        line_num = line_or_position\n\n    result = self._client._send_request(\n        \"document.lineAt\", {\"uri\": self._uri, \"line\": line_num}\n    )\n    return TextLine.from_dict(result)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.offset_at","title":"offset_at","text":"<pre><code>offset_at(position: Position) -&gt; int\n</code></pre> <p>Get the document offset for a position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>Position</code> <p>The position</p> required <p>Returns:</p> Type Description <code>int</code> <p>The character offset</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def offset_at(self, position: Position) -&gt; int:\n    \"\"\"\n    Get the document offset for a position.\n\n    Args:\n        position: The position\n\n    Returns:\n        The character offset\n    \"\"\"\n    return self._client._send_request(\n        \"document.offsetAt\",\n        {\"uri\": self._uri, \"position\": position.to_dict()},\n    )\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.position_at","title":"position_at","text":"<pre><code>position_at(offset: int) -&gt; Position\n</code></pre> <p>Get the position for a document offset.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The character offset</p> required <p>Returns:</p> Type Description <code>Position</code> <p>Position object</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def position_at(self, offset: int) -&gt; Position:\n    \"\"\"\n    Get the position for a document offset.\n\n    Args:\n        offset: The character offset\n\n    Returns:\n        Position object\n    \"\"\"\n    result = self._client._send_request(\n        \"document.positionAt\", {\"uri\": self._uri, \"offset\": offset}\n    )\n    return Position.from_dict(result)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.get_text","title":"get_text","text":"<pre><code>get_text(range: Optional[Range] = None) -&gt; str\n</code></pre> <p>Get text from the document.</p> <p>Parameters:</p> Name Type Description Default <code>range</code> <code>Optional[Range]</code> <p>Optional range to get text from (entire document if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The text content</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def get_text(self, range: Optional[Range] = None) -&gt; str:\n    \"\"\"\n    Get text from the document.\n\n    Args:\n        range: Optional range to get text from (entire document if None)\n\n    Returns:\n        The text content\n    \"\"\"\n    params = {\"uri\": self._uri}\n    if range:\n        params[\"range\"] = range.to_dict()\n\n    return self._client._send_request(\"document.getText\", params)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.get_word_range_at_position","title":"get_word_range_at_position","text":"<pre><code>get_word_range_at_position(position: Position, regex: Optional[str] = None) -&gt; Optional[Range]\n</code></pre> <p>Get the word range at a position.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>Position</code> <p>The position</p> required <code>regex</code> <code>Optional[str]</code> <p>Optional regex pattern for word boundaries</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Range]</code> <p>Range of the word, or None if no word at position</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def get_word_range_at_position(\n    self, position: Position, regex: Optional[str] = None\n) -&gt; Optional[Range]:\n    \"\"\"\n    Get the word range at a position.\n\n    Args:\n        position: The position\n        regex: Optional regex pattern for word boundaries\n\n    Returns:\n        Range of the word, or None if no word at position\n    \"\"\"\n    params = {\"uri\": self._uri, \"position\": position.to_dict()}\n    if regex:\n        params[\"regex\"] = regex\n\n    result = self._client._send_request(\"document.getWordRangeAtPosition\", params)\n    return Range.from_dict(result) if result else None\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.validate_range","title":"validate_range","text":"<pre><code>validate_range(range: Range) -&gt; Range\n</code></pre> <p>Ensure a range is valid for this document.</p> <p>Parameters:</p> Name Type Description Default <code>range</code> <code>Range</code> <p>The range to validate</p> required <p>Returns:</p> Type Description <code>Range</code> <p>Validated range</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def validate_range(self, range: Range) -&gt; Range:\n    \"\"\"\n    Ensure a range is valid for this document.\n\n    Args:\n        range: The range to validate\n\n    Returns:\n        Validated range\n    \"\"\"\n    result = self._client._send_request(\n        \"document.validateRange\",\n        {\"uri\": self._uri, \"range\": range.to_dict()},\n    )\n    return Range.from_dict(result)\n</code></pre>"},{"location":"api/document/#vscode_sockpuppet.document.TextDocument.validate_position","title":"validate_position","text":"<pre><code>validate_position(position: Position) -&gt; Position\n</code></pre> <p>Ensure a position is valid for this document.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>Position</code> <p>The position to validate</p> required <p>Returns:</p> Type Description <code>Position</code> <p>Validated position</p> Source code in <code>vscode_sockpuppet/document.py</code> <pre><code>def validate_position(self, position: Position) -&gt; Position:\n    \"\"\"\n    Ensure a position is valid for this document.\n\n    Args:\n        position: The position to validate\n\n    Returns:\n        Validated position\n    \"\"\"\n    result = self._client._send_request(\n        \"document.validatePosition\",\n        {\"uri\": self._uri, \"position\": position.to_dict()},\n    )\n    return Position.from_dict(result)\n</code></pre>"},{"location":"api/editor/","title":"Editor","text":"<p>Text editor operations including selections, decorations, and snippets.</p>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor","title":"Editor","text":"<pre><code>Editor(client: VSCodeClient)\n</code></pre> <p>VS Code editor operations.</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\"):\n    self.client = client\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.get_selection","title":"get_selection","text":"<pre><code>get_selection() -&gt; dict\n</code></pre> <p>Get the current selection in the active editor.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Selection information with start, end positions and text</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def get_selection(self) -&gt; dict:\n    \"\"\"\n    Get the current selection in the active editor.\n\n    Returns:\n        Selection information with start, end positions and text\n    \"\"\"\n    return self.client._send_request(\"window.activeTextEditor.selection\")\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.set_selection","title":"set_selection","text":"<pre><code>set_selection(start_line: int, start_char: int, end_line: int, end_char: int) -&gt; dict\n</code></pre> <p>Set the selection in the active editor.</p> <p>Parameters:</p> Name Type Description Default <code>start_line</code> <code>int</code> <p>Starting line number</p> required <code>start_char</code> <code>int</code> <p>Starting character position</p> required <code>end_line</code> <code>int</code> <p>Ending line number</p> required <code>end_char</code> <code>int</code> <p>Ending character position</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def set_selection(\n    self, start_line: int, start_char: int, end_line: int, end_char: int\n) -&gt; dict:\n    \"\"\"\n    Set the selection in the active editor.\n\n    Args:\n        start_line: Starting line number\n        start_char: Starting character position\n        end_line: Ending line number\n        end_char: Ending character position\n\n    Returns:\n        Success status\n    \"\"\"\n    return self.client._send_request(\n        \"window.activeTextEditor.setSelection\",\n        {\n            \"start\": {\"line\": start_line, \"character\": start_char},\n            \"end\": {\"line\": end_line, \"character\": end_char},\n        },\n    )\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.insert_text","title":"insert_text","text":"<pre><code>insert_text(line: int, character: int, text: str) -&gt; dict\n</code></pre> <p>Insert text at a position.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>int</code> <p>Line number</p> required <code>character</code> <code>int</code> <p>Character position</p> required <code>text</code> <code>str</code> <p>Text to insert</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def insert_text(self, line: int, character: int, text: str) -&gt; dict:\n    \"\"\"\n    Insert text at a position.\n\n    Args:\n        line: Line number\n        character: Character position\n        text: Text to insert\n\n    Returns:\n        Success status\n    \"\"\"\n    return self.client._send_request(\n        \"window.activeTextEditor.edit\",\n        {\n            \"edits\": [\n                {\n                    \"type\": \"insert\",\n                    \"range\": {\n                        \"start\": {\"line\": line, \"character\": character},\n                        \"end\": {\"line\": line, \"character\": character},\n                    },\n                    \"text\": text,\n                }\n            ]\n        },\n    )\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.delete_range","title":"delete_range","text":"<pre><code>delete_range(start_line: int, start_char: int, end_line: int, end_char: int) -&gt; dict\n</code></pre> <p>Delete text in a range.</p> <p>Parameters:</p> Name Type Description Default <code>start_line</code> <code>int</code> <p>Starting line number</p> required <code>start_char</code> <code>int</code> <p>Starting character position</p> required <code>end_line</code> <code>int</code> <p>Ending line number</p> required <code>end_char</code> <code>int</code> <p>Ending character position</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def delete_range(self, start_line: int, start_char: int, end_line: int, end_char: int) -&gt; dict:\n    \"\"\"\n    Delete text in a range.\n\n    Args:\n        start_line: Starting line number\n        start_char: Starting character position\n        end_line: Ending line number\n        end_char: Ending character position\n\n    Returns:\n        Success status\n    \"\"\"\n    return self.client._send_request(\n        \"window.activeTextEditor.edit\",\n        {\n            \"edits\": [\n                {\n                    \"type\": \"delete\",\n                    \"range\": {\n                        \"start\": {\n                            \"line\": start_line,\n                            \"character\": start_char,\n                        },\n                        \"end\": {\"line\": end_line, \"character\": end_char},\n                    },\n                }\n            ]\n        },\n    )\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.replace_text","title":"replace_text","text":"<pre><code>replace_text(start_line: int, start_char: int, end_line: int, end_char: int, text: str) -&gt; dict\n</code></pre> <p>Replace text in a range.</p> <p>Parameters:</p> Name Type Description Default <code>start_line</code> <code>int</code> <p>Starting line number</p> required <code>start_char</code> <code>int</code> <p>Starting character position</p> required <code>end_line</code> <code>int</code> <p>Ending line number</p> required <code>end_char</code> <code>int</code> <p>Ending character position</p> required <code>text</code> <code>str</code> <p>Replacement text</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def replace_text(\n    self,\n    start_line: int,\n    start_char: int,\n    end_line: int,\n    end_char: int,\n    text: str,\n) -&gt; dict:\n    \"\"\"\n    Replace text in a range.\n\n    Args:\n        start_line: Starting line number\n        start_char: Starting character position\n        end_line: Ending line number\n        end_char: Ending character position\n        text: Replacement text\n\n    Returns:\n        Success status\n    \"\"\"\n    return self.client._send_request(\n        \"window.activeTextEditor.edit\",\n        {\n            \"edits\": [\n                {\n                    \"type\": \"replace\",\n                    \"range\": {\n                        \"start\": {\n                            \"line\": start_line,\n                            \"character\": start_char,\n                        },\n                        \"end\": {\"line\": end_line, \"character\": end_char},\n                    },\n                    \"text\": text,\n                }\n            ]\n        },\n    )\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.edit","title":"edit","text":"<pre><code>edit(callback: Callable[[EditBuilder], None], undo_stop_before: bool = True, undo_stop_after: bool = True) -&gt; bool\n</code></pre> <p>Perform complex edits with multiple operations atomically.</p> <p>This is the preferred way to make multiple edits as they will be applied together in a single transaction.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[EditBuilder], None]</code> <p>Function that receives an EditBuilder and adds edits</p> required <code>undo_stop_before</code> <code>bool</code> <p>Add undo stop before edits</p> <code>True</code> <code>undo_stop_after</code> <code>bool</code> <p>Add undo stop after edits</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if edits were applied successfully</p> Example <p>def make_edits(edit_builder):     edit_builder.insert(0, 0, \"# Header\\n\")     edit_builder.replace(5, 0, 5, 10, \"new text\")     edit_builder.delete(10, 0, 11, 0)</p> <p>editor.edit(make_edits)</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def edit(\n    self,\n    callback: Callable[[\"EditBuilder\"], None],\n    undo_stop_before: bool = True,\n    undo_stop_after: bool = True,\n) -&gt; bool:\n    \"\"\"\n    Perform complex edits with multiple operations atomically.\n\n    This is the preferred way to make multiple edits as they will\n    be applied together in a single transaction.\n\n    Args:\n        callback: Function that receives an EditBuilder and adds edits\n        undo_stop_before: Add undo stop before edits\n        undo_stop_after: Add undo stop after edits\n\n    Returns:\n        True if edits were applied successfully\n\n    Example:\n        def make_edits(edit_builder):\n            edit_builder.insert(0, 0, \"# Header\\\\n\")\n            edit_builder.replace(5, 0, 5, 10, \"new text\")\n            edit_builder.delete(10, 0, 11, 0)\n\n        editor.edit(make_edits)\n    \"\"\"\n    edit_builder = EditBuilder()\n    callback(edit_builder)\n\n    result = self.client._send_request(\n        \"window.activeTextEditor.edit\",\n        {\n            \"edits\": edit_builder.edits,\n            \"undoStopBefore\": undo_stop_before,\n            \"undoStopAfter\": undo_stop_after,\n        },\n    )\n    return result.get(\"success\", False)\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.insert_snippet","title":"insert_snippet","text":"<pre><code>insert_snippet(snippet: str, location: Optional[Union[PositionType, RangeType]] = None, undo_stop_before: bool = True, undo_stop_after: bool = True) -&gt; bool\n</code></pre> <p>Insert a snippet at the current selection or specified location.</p> <p>Parameters:</p> Name Type Description Default <code>snippet</code> <code>str</code> <p>Snippet string with placeholders ($1, $2, etc.)</p> required <code>location</code> <code>Optional[Union[PositionType, RangeType]]</code> <p>Position/Range (dict or dataclass), or None for current</p> <code>None</code> <code>undo_stop_before</code> <code>bool</code> <p>Add undo stop before insertion</p> <code>True</code> <code>undo_stop_after</code> <code>bool</code> <p>Add undo stop after insertion</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if snippet was inserted successfully</p> Example Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def insert_snippet(\n    self,\n    snippet: str,\n    location: Optional[Union[PositionType, RangeType]] = None,\n    undo_stop_before: bool = True,\n    undo_stop_after: bool = True,\n) -&gt; bool:\n    \"\"\"\n    Insert a snippet at the current selection or specified location.\n\n    Args:\n        snippet: Snippet string with placeholders ($1, $2, etc.)\n        location: Position/Range (dict or dataclass), or None for current\n        undo_stop_before: Add undo stop before insertion\n        undo_stop_after: Add undo stop after insertion\n\n    Returns:\n        True if snippet was inserted successfully\n\n    Example:\n        # Insert at current position\n        editor.insert_snippet(\"console.log('$1');$0\")\n\n        # Insert at specific position (dict)\n        editor.insert_snippet(\n            \"for (let ${1:i} = 0; $1 &lt; ${2:10}; $1++) {\\\\n\\\\t$0\\\\n}\",\n            location={\"line\": 5, \"character\": 0}\n        )\n\n        # Or use Position/Range from document.py\n        from vscode_sockpuppet.document import Position\n        editor.insert_snippet(\"$0\", location=Position(5, 0))\n    \"\"\"\n    # Normalize location to dict format\n    normalized_location = None\n    if location is not None:\n        if isinstance(location, dict):\n            # Check if it's a Position or Range dict\n            if \"start\" in location:\n                normalized_location = _normalize_range(\n                    location  # type: ignore[arg-type]\n                )\n            else:\n                normalized_location = _normalize_position(\n                    location  # type: ignore[arg-type]\n                )\n        else:\n            # It's a dataclass - check if Position or Range\n            if hasattr(location, \"start\"):\n                normalized_location = _normalize_range(\n                    location  # type: ignore[arg-type]\n                )\n            else:\n                normalized_location = _normalize_position(\n                    location  # type: ignore[arg-type]\n                )\n\n    result = self.client._send_request(\n        \"window.activeTextEditor.insertSnippet\",\n        {\n            \"snippet\": snippet,\n            \"location\": normalized_location,\n            \"undoStopBefore\": undo_stop_before,\n            \"undoStopAfter\": undo_stop_after,\n        },\n    )\n    return result.get(\"success\", False)\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.insert_snippet--insert-at-current-position","title":"Insert at current position","text":"<p>editor.insert_snippet(\"console.log('$1');$0\")</p>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.insert_snippet--insert-at-specific-position-dict","title":"Insert at specific position (dict)","text":"<p>editor.insert_snippet(     \"for (let ${1:i} = 0; $1 &lt; ${2:10}; $1++) {\\n\\t$0\\n}\",     location={\"line\": 5, \"character\": 0} )</p>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.insert_snippet--or-use-positionrange-from-documentpy","title":"Or use Position/Range from document.py","text":"<p>from vscode_sockpuppet.document import Position editor.insert_snippet(\"$0\", location=Position(5, 0))</p>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.reveal_range","title":"reveal_range","text":"<pre><code>reveal_range(start_line: int, start_char: int, end_line: int, end_char: int, reveal_type: Optional[str] = None) -&gt; dict\n</code></pre> <p>Scroll to make a range visible in the editor.</p> <p>Parameters:</p> Name Type Description Default <code>start_line</code> <code>int</code> <p>Starting line number</p> required <code>start_char</code> <code>int</code> <p>Starting character position</p> required <code>end_line</code> <code>int</code> <p>Ending line number</p> required <code>end_char</code> <code>int</code> <p>Ending character position</p> required <code>reveal_type</code> <code>Optional[str]</code> <p>How to reveal: - None/Default: Scroll minimally to reveal range - 'InCenter': Scroll to center range in viewport - 'InCenterIfOutsideViewport': Center only if outside - 'AtTop': Scroll to show range at top</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Example Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def reveal_range(\n    self,\n    start_line: int,\n    start_char: int,\n    end_line: int,\n    end_char: int,\n    reveal_type: Optional[str] = None,\n) -&gt; dict:\n    \"\"\"\n    Scroll to make a range visible in the editor.\n\n    Args:\n        start_line: Starting line number\n        start_char: Starting character position\n        end_line: Ending line number\n        end_char: Ending character position\n        reveal_type: How to reveal:\n            - None/Default: Scroll minimally to reveal range\n            - 'InCenter': Scroll to center range in viewport\n            - 'InCenterIfOutsideViewport': Center only if outside\n            - 'AtTop': Scroll to show range at top\n\n    Returns:\n        Success status\n\n    Example:\n        # Scroll to line 100\n        editor.reveal_range(100, 0, 100, 0)\n\n        # Scroll and center line 50\n        editor.reveal_range(50, 0, 50, 0, 'InCenter')\n    \"\"\"\n    return self.client._send_request(\n        \"window.activeTextEditor.revealRange\",\n        {\n            \"range\": {\n                \"start\": {\"line\": start_line, \"character\": start_char},\n                \"end\": {\"line\": end_line, \"character\": end_char},\n            },\n            \"revealType\": reveal_type,\n        },\n    )\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.reveal_range--scroll-to-line-100","title":"Scroll to line 100","text":"<p>editor.reveal_range(100, 0, 100, 0)</p>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.reveal_range--scroll-and-center-line-50","title":"Scroll and center line 50","text":"<p>editor.reveal_range(50, 0, 50, 0, 'InCenter')</p>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.get_selections","title":"get_selections","text":"<pre><code>get_selections() -&gt; list[dict]\n</code></pre> <p>Get all selections in the active editor.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>List of selection objects with start, end, and text</p> Example <p>selections = editor.get_selections() for sel in selections:     print(f\"Selected: {sel['text']}\")</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def get_selections(self) -&gt; list[dict]:\n    \"\"\"\n    Get all selections in the active editor.\n\n    Returns:\n        List of selection objects with start, end, and text\n\n    Example:\n        selections = editor.get_selections()\n        for sel in selections:\n            print(f\"Selected: {sel['text']}\")\n    \"\"\"\n    return self.client._send_request(\"window.activeTextEditor.selections\")\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.set_selections","title":"set_selections","text":"<pre><code>set_selections(selections: list[RangeType]) -&gt; dict\n</code></pre> <p>Set multiple selections (multi-cursor support).</p> <p>Parameters:</p> Name Type Description Default <code>selections</code> <code>list[RangeType]</code> <p>List of Range objects (dict or dataclass)</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Example Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def set_selections(self, selections: list[RangeType]) -&gt; dict:\n    \"\"\"\n    Set multiple selections (multi-cursor support).\n\n    Args:\n        selections: List of Range objects (dict or dataclass)\n\n    Returns:\n        Success status\n\n    Example:\n        # Using dicts\n        editor.set_selections([\n            {\n                \"start\": {\"line\": 0, \"character\": 0},\n                \"end\": {\"line\": 0, \"character\": 5}\n            },\n            {\n                \"start\": {\"line\": 2, \"character\": 0},\n                \"end\": {\"line\": 2, \"character\": 5}\n            }\n        ])\n\n        # Or using Range from document.py\n        from vscode_sockpuppet.document import Range, Position\n        editor.set_selections([\n            Range(Position(0, 0), Position(0, 5)),\n            Range(Position(2, 0), Position(2, 5))\n        ])\n    \"\"\"\n    # Normalize all ranges to dict format\n    normalized_selections = [_normalize_range(sel) for sel in selections]\n\n    return self.client._send_request(\n        \"window.activeTextEditor.setSelections\",\n        {\"selections\": normalized_selections},\n    )\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.set_selections--using-dicts","title":"Using dicts","text":"<p>editor.set_selections([     {         \"start\": {\"line\": 0, \"character\": 0},         \"end\": {\"line\": 0, \"character\": 5}     },     {         \"start\": {\"line\": 2, \"character\": 0},         \"end\": {\"line\": 2, \"character\": 5}     } ])</p>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.set_selections--or-using-range-from-documentpy","title":"Or using Range from document.py","text":"<p>from vscode_sockpuppet.document import Range, Position editor.set_selections([     Range(Position(0, 0), Position(0, 5)),     Range(Position(2, 0), Position(2, 5)) ])</p>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.get_options","title":"get_options","text":"<pre><code>get_options() -&gt; dict\n</code></pre> <p>Get editor options (tab size, insert spaces, etc.).</p> <p>Returns:</p> Type Description <code>dict</code> <p>Dict with editor options</p> Example <p>options = editor.get_options() print(f\"Tab size: {options['tabSize']}\") print(f\"Insert spaces: {options['insertSpaces']}\")</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def get_options(self) -&gt; dict:\n    \"\"\"\n    Get editor options (tab size, insert spaces, etc.).\n\n    Returns:\n        Dict with editor options\n\n    Example:\n        options = editor.get_options()\n        print(f\"Tab size: {options['tabSize']}\")\n        print(f\"Insert spaces: {options['insertSpaces']}\")\n    \"\"\"\n    return self.client._send_request(\"window.activeTextEditor.options\")\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.set_options","title":"set_options","text":"<pre><code>set_options(options: dict) -&gt; dict\n</code></pre> <p>Set editor options.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>dict</code> <p>Dict with options to set (tabSize, insertSpaces, etc.)</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Example <p>editor.set_options({     \"tabSize\": 2,     \"insertSpaces\": True })</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def set_options(self, options: dict) -&gt; dict:\n    \"\"\"\n    Set editor options.\n\n    Args:\n        options: Dict with options to set (tabSize, insertSpaces, etc.)\n\n    Returns:\n        Success status\n\n    Example:\n        editor.set_options({\n            \"tabSize\": 2,\n            \"insertSpaces\": True\n        })\n    \"\"\"\n    return self.client._send_request(\n        \"window.activeTextEditor.setOptions\",\n        {\"options\": options},\n    )\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.get_visible_ranges","title":"get_visible_ranges","text":"<pre><code>get_visible_ranges() -&gt; list[dict]\n</code></pre> <p>Get the ranges that are currently visible in the editor.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>List of visible range objects</p> Example <p>ranges = editor.get_visible_ranges() for r in ranges:     print(f\"Visible: lines {r['start']['line']}-\"           f\"{r['end']['line']}\")</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def get_visible_ranges(self) -&gt; list[dict]:\n    \"\"\"\n    Get the ranges that are currently visible in the editor.\n\n    Returns:\n        List of visible range objects\n\n    Example:\n        ranges = editor.get_visible_ranges()\n        for r in ranges:\n            print(f\"Visible: lines {r['start']['line']}-\"\n                  f\"{r['end']['line']}\")\n    \"\"\"\n    return self.client._send_request(\"window.activeTextEditor.visibleRanges\")\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.get_view_column","title":"get_view_column","text":"<pre><code>get_view_column() -&gt; Optional[int]\n</code></pre> <p>Get the view column of the active editor.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>View column number (1-9), or None</p> Example <p>column = editor.get_view_column() print(f\"Editor in column: {column}\")</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def get_view_column(self) -&gt; Optional[int]:\n    \"\"\"\n    Get the view column of the active editor.\n\n    Returns:\n        View column number (1-9), or None\n\n    Example:\n        column = editor.get_view_column()\n        print(f\"Editor in column: {column}\")\n    \"\"\"\n    return self.client._send_request(\"window.activeTextEditor.viewColumn\")\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.create_decoration_type","title":"create_decoration_type","text":"<pre><code>create_decoration_type(options: DecorationRenderOptions) -&gt; DecorationType\n</code></pre> <p>Create a text editor decoration type.</p> <p>The returned DecorationType object will automatically dispose the server-side resource when garbage collected. Call dispose() manually for immediate cleanup.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>DecorationRenderOptions</code> <p>DecorationRenderOptions dict with styling options</p> required <p>Returns:</p> Type Description <code>DecorationType</code> <p>DecorationType object with <code>id</code> attribute and dispose() method</p> Example <p>from vscode_sockpuppet import DecorationRenderOptions</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def create_decoration_type(self, options: DecorationRenderOptions) -&gt; DecorationType:\n    \"\"\"\n    Create a text editor decoration type.\n\n    The returned DecorationType object will automatically dispose the\n    server-side resource when garbage collected. Call dispose() manually\n    for immediate cleanup.\n\n    Args:\n        options: DecorationRenderOptions dict with styling options\n\n    Returns:\n        DecorationType object with `id` attribute and dispose() method\n\n    Example:\n        from vscode_sockpuppet import DecorationRenderOptions\n\n        # Type-safe decoration options\n        options: DecorationRenderOptions = {\n            \"backgroundColor\": \"rgba(255, 0, 0, 0.3)\",\n            \"border\": \"1px solid red\",\n            \"borderRadius\": \"3px\",\n            \"isWholeLine\": True,\n            \"overviewRulerLane\": 2,  # Center\n            \"light\": {\n                \"backgroundColor\": \"rgba(255, 0, 0, 0.1)\"\n            },\n            \"dark\": {\n                \"backgroundColor\": \"rgba(255, 0, 0, 0.3)\"\n            }\n        }\n        decoration = editor.create_decoration_type(options)\n        editor.set_decorations(decoration, [range1, range2])\n\n        # Manual disposal\n        decoration.dispose()\n    \"\"\"\n    result = self.client._send_request(\n        \"window.createTextEditorDecorationType\", {\"options\": options}\n    )\n    return DecorationType(self.client, result.get(\"id\"))\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.create_decoration_type--type-safe-decoration-options","title":"Type-safe decoration options","text":"<p>options: DecorationRenderOptions = {     \"backgroundColor\": \"rgba(255, 0, 0, 0.3)\",     \"border\": \"1px solid red\",     \"borderRadius\": \"3px\",     \"isWholeLine\": True,     \"overviewRulerLane\": 2,  # Center     \"light\": {         \"backgroundColor\": \"rgba(255, 0, 0, 0.1)\"     },     \"dark\": {         \"backgroundColor\": \"rgba(255, 0, 0, 0.3)\"     } } decoration = editor.create_decoration_type(options) editor.set_decorations(decoration, [range1, range2])</p>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.create_decoration_type--manual-disposal","title":"Manual disposal","text":"<p>decoration.dispose()</p>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.set_decorations","title":"set_decorations","text":"<pre><code>set_decorations(decoration: Union[DecorationType, str], ranges: list[RangeType]) -&gt; dict\n</code></pre> <p>Apply decorations to the active text editor.</p> <p>Parameters:</p> Name Type Description Default <code>decoration</code> <code>Union[DecorationType, str]</code> <p>DecorationType object or decoration ID string</p> required <code>ranges</code> <code>list[RangeType]</code> <p>List of Range objects (dict or dataclass)</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Example <p>decoration = editor.create_decoration_type({     \"backgroundColor\": \"yellow\" })</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def set_decorations(\n    self, decoration: Union[DecorationType, str], ranges: list[RangeType]\n) -&gt; dict:\n    \"\"\"\n    Apply decorations to the active text editor.\n\n    Args:\n        decoration: DecorationType object or decoration ID string\n        ranges: List of Range objects (dict or dataclass)\n\n    Returns:\n        Success status\n\n    Example:\n        decoration = editor.create_decoration_type({\n            \"backgroundColor\": \"yellow\"\n        })\n\n        # Using dicts\n        ranges = [{\n            \"start\": {\"line\": 0, \"character\": 0},\n            \"end\": {\"line\": 0, \"character\": 10}\n        }]\n        editor.set_decorations(decoration, ranges)\n\n        # Or using Range from document.py\n        from vscode_sockpuppet.document import Range, Position\n        ranges = [Range(Position(0, 0), Position(0, 10))]\n        editor.set_decorations(decoration, ranges)\n    \"\"\"\n    if isinstance(decoration, DecorationType):\n        dec_id = decoration.id\n    else:\n        dec_id = decoration\n\n    # Normalize all ranges to dict format\n    normalized_ranges = [_normalize_range(r) for r in ranges]\n\n    return self.client._send_request(\n        \"window.activeTextEditor.setDecorations\",\n        {\"decorationId\": dec_id, \"ranges\": normalized_ranges},\n    )\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.set_decorations--using-dicts","title":"Using dicts","text":"<p>ranges = [{     \"start\": {\"line\": 0, \"character\": 0},     \"end\": {\"line\": 0, \"character\": 10} }] editor.set_decorations(decoration, ranges)</p>"},{"location":"api/editor/#vscode_sockpuppet.editor.Editor.set_decorations--or-using-range-from-documentpy","title":"Or using Range from document.py","text":"<p>from vscode_sockpuppet.document import Range, Position ranges = [Range(Position(0, 0), Position(0, 10))] editor.set_decorations(decoration, ranges)</p>"},{"location":"api/editor/#editbuilder","title":"EditBuilder","text":""},{"location":"api/editor/#vscode_sockpuppet.editor.EditBuilder","title":"EditBuilder","text":"<pre><code>EditBuilder()\n</code></pre> <p>Builder for creating multiple text edits.</p> <p>Used with Editor.edit() to batch multiple edits together.</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def __init__(self):\n    self.edits = []\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.EditBuilder.insert","title":"insert","text":"<pre><code>insert(line: int, character: int, text: str) -&gt; EditBuilder\n</code></pre> <p>Add an insert operation.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>int</code> <p>Line number</p> required <code>character</code> <code>int</code> <p>Character position</p> required <code>text</code> <code>str</code> <p>Text to insert</p> required <p>Returns:</p> Type Description <code>EditBuilder</code> <p>Self for chaining</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def insert(self, line: int, character: int, text: str) -&gt; \"EditBuilder\":\n    \"\"\"\n    Add an insert operation.\n\n    Args:\n        line: Line number\n        character: Character position\n        text: Text to insert\n\n    Returns:\n        Self for chaining\n    \"\"\"\n    self.edits.append(\n        {\n            \"type\": \"insert\",\n            \"range\": {\n                \"start\": {\"line\": line, \"character\": character},\n                \"end\": {\"line\": line, \"character\": character},\n            },\n            \"text\": text,\n        }\n    )\n    return self\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.EditBuilder.delete","title":"delete","text":"<pre><code>delete(start_line: int, start_char: int, end_line: int, end_char: int) -&gt; EditBuilder\n</code></pre> <p>Add a delete operation.</p> <p>Parameters:</p> Name Type Description Default <code>start_line</code> <code>int</code> <p>Starting line number</p> required <code>start_char</code> <code>int</code> <p>Starting character position</p> required <code>end_line</code> <code>int</code> <p>Ending line number</p> required <code>end_char</code> <code>int</code> <p>Ending character position</p> required <p>Returns:</p> Type Description <code>EditBuilder</code> <p>Self for chaining</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def delete(\n    self, start_line: int, start_char: int, end_line: int, end_char: int\n) -&gt; \"EditBuilder\":\n    \"\"\"\n    Add a delete operation.\n\n    Args:\n        start_line: Starting line number\n        start_char: Starting character position\n        end_line: Ending line number\n        end_char: Ending character position\n\n    Returns:\n        Self for chaining\n    \"\"\"\n    self.edits.append(\n        {\n            \"type\": \"delete\",\n            \"range\": {\n                \"start\": {\"line\": start_line, \"character\": start_char},\n                \"end\": {\"line\": end_line, \"character\": end_char},\n            },\n        }\n    )\n    return self\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.EditBuilder.replace","title":"replace","text":"<pre><code>replace(start_line: int, start_char: int, end_line: int, end_char: int, text: str) -&gt; EditBuilder\n</code></pre> <p>Add a replace operation.</p> <p>Parameters:</p> Name Type Description Default <code>start_line</code> <code>int</code> <p>Starting line number</p> required <code>start_char</code> <code>int</code> <p>Starting character position</p> required <code>end_line</code> <code>int</code> <p>Ending line number</p> required <code>end_char</code> <code>int</code> <p>Ending character position</p> required <code>text</code> <code>str</code> <p>Replacement text</p> required <p>Returns:</p> Type Description <code>EditBuilder</code> <p>Self for chaining</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def replace(\n    self,\n    start_line: int,\n    start_char: int,\n    end_line: int,\n    end_char: int,\n    text: str,\n) -&gt; \"EditBuilder\":\n    \"\"\"\n    Add a replace operation.\n\n    Args:\n        start_line: Starting line number\n        start_char: Starting character position\n        end_line: Ending line number\n        end_char: Ending character position\n        text: Replacement text\n\n    Returns:\n        Self for chaining\n    \"\"\"\n    self.edits.append(\n        {\n            \"type\": \"replace\",\n            \"range\": {\n                \"start\": {\"line\": start_line, \"character\": start_char},\n                \"end\": {\"line\": end_line, \"character\": end_char},\n            },\n            \"text\": text,\n        }\n    )\n    return self\n</code></pre>"},{"location":"api/editor/#decorationtype","title":"DecorationType","text":""},{"location":"api/editor/#vscode_sockpuppet.editor.DecorationType","title":"DecorationType","text":"<pre><code>DecorationType(client: VSCodeClient, decoration_id: str)\n</code></pre> <p>Wrapper for a text editor decoration type.</p> <p>This object automatically disposes the server-side decoration resource when it's garbage collected, preventing resource leaks.</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\", decoration_id: str):\n    self._client = client\n    self.id = decoration_id\n    self._disposed = False\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.DecorationType.dispose","title":"dispose","text":"<pre><code>dispose() -&gt; dict\n</code></pre> <p>Manually dispose the decoration type on the server.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Success status from server</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def dispose(self) -&gt; dict:\n    \"\"\"\n    Manually dispose the decoration type on the server.\n\n    Returns:\n        Success status from server\n    \"\"\"\n    if self._disposed:\n        return {\"success\": True}\n\n    self._disposed = True\n    return self._client._send_request(\n        \"window.disposeTextEditorDecorationType\",\n        {\"decorationId\": self.id},\n    )\n</code></pre>"},{"location":"api/editor/#vscode_sockpuppet.editor.DecorationType.__del__","title":"__del__","text":"<pre><code>__del__()\n</code></pre> <p>Best-effort cleanup when object is garbage collected.</p> Source code in <code>vscode_sockpuppet/editor.py</code> <pre><code>def __del__(self):\n    \"\"\"Best-effort cleanup when object is garbage collected.\"\"\"\n    if not self._disposed:\n        try:\n            self._client._send_request(\n                \"window.disposeTextEditorDecorationType\",\n                {\"decorationId\": self.id},\n            )\n        except Exception:\n            # Silently ignore errors during cleanup\n            pass\n</code></pre>"},{"location":"api/events/","title":"Events","text":"<p>Event subscription system for monitoring VS Code state changes.</p>"},{"location":"api/events/#windowevents","title":"WindowEvents","text":""},{"location":"api/events/#vscode_sockpuppet.events.WindowEvents","title":"WindowEvents","text":"<pre><code>WindowEvents(client: VSCodeClient)\n</code></pre> <p>Event emitters for window-related VS Code events.</p> <p>Provides VS Code-style event subscription with on_did_* methods.</p> <p>Initialize window events.</p> Source code in <code>vscode_sockpuppet/events.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\"):\n    \"\"\"Initialize window events.\"\"\"\n    self._client = client\n</code></pre>"},{"location":"api/events/#vscode_sockpuppet.events.WindowEvents.on_did_change_active_text_editor","title":"on_did_change_active_text_editor  <code>property</code>","text":"<pre><code>on_did_change_active_text_editor: Event\n</code></pre> <p>Event fired when the active text editor changes.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(editor):     if editor:         print(f\"Active editor: {editor['fileName']}\")</p> <p>dispose = window.on_did_change_active_text_editor(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WindowEvents.on_did_change_text_editor_selection","title":"on_did_change_text_editor_selection  <code>property</code>","text":"<pre><code>on_did_change_text_editor_selection: Event\n</code></pre> <p>Event fired when the selection in an editor changes.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(data):     sel = data['selections'][0]     print(f\"Line {sel['start']['line']}\")</p> <p>dispose = window.on_did_change_text_editor_selection(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WindowEvents.on_did_change_visible_text_editors","title":"on_did_change_visible_text_editors  <code>property</code>","text":"<pre><code>on_did_change_visible_text_editors: Event\n</code></pre> <p>Event fired when the visible text editors change.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(data):     print(f\"{data['count']} editors visible\")</p> <p>dispose = window.on_did_change_visible_text_editors(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WindowEvents.on_did_open_terminal","title":"on_did_open_terminal  <code>property</code>","text":"<pre><code>on_did_open_terminal: Event\n</code></pre> <p>Event fired when a terminal is opened.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(terminal):     print(f\"Terminal opened: {terminal['name']}\")</p> <p>dispose = window.on_did_open_terminal(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WindowEvents.on_did_close_terminal","title":"on_did_close_terminal  <code>property</code>","text":"<pre><code>on_did_close_terminal: Event\n</code></pre> <p>Event fired when a terminal is closed.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>dispose = window.on_did_close_terminal(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WindowEvents.on_did_change_terminal_state","title":"on_did_change_terminal_state  <code>property</code>","text":"<pre><code>on_did_change_terminal_state: Event\n</code></pre> <p>Event fired when a terminal's state changes.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(data):     print(f\"Terminal {data['name']}: interacted = {data['isInteractedWith']}\")</p> <p>dispose = window.on_did_change_terminal_state(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WindowEvents.on_did_change_text_editor_visible_ranges","title":"on_did_change_text_editor_visible_ranges  <code>property</code>","text":"<pre><code>on_did_change_text_editor_visible_ranges: Event\n</code></pre> <p>Event fired when visible ranges in an editor change (scrolling).</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(data):     print(f\"Visible in {data['uri']}: {len(data['visibleRanges'])} ranges\")</p> <p>dispose = window.on_did_change_text_editor_visible_ranges(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WindowEvents.on_did_change_text_editor_options","title":"on_did_change_text_editor_options  <code>property</code>","text":"<pre><code>on_did_change_text_editor_options: Event\n</code></pre> <p>Event fired when text editor options change.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(data):     opts = data['options']     print(f\"Tab size: {opts['tabSize']}\")</p> <p>dispose = window.on_did_change_text_editor_options(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WindowEvents.on_did_change_text_editor_view_column","title":"on_did_change_text_editor_view_column  <code>property</code>","text":"<pre><code>on_did_change_text_editor_view_column: Event\n</code></pre> <p>Event fired when an editor's view column changes.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(data):     print(f\"Editor moved to column {data['viewColumn']}\")</p> <p>dispose = window.on_did_change_text_editor_view_column(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WindowEvents.on_did_change_window_state","title":"on_did_change_window_state  <code>property</code>","text":"<pre><code>on_did_change_window_state: Event\n</code></pre> <p>Event fired when the window state changes (focus).</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(data):     if data['focused']:         print(\"Window gained focus\")     else:         print(\"Window lost focus\")</p> <p>dispose = window.on_did_change_window_state(handler)</p>"},{"location":"api/events/#workspaceevents","title":"WorkspaceEvents","text":""},{"location":"api/events/#vscode_sockpuppet.events.WorkspaceEvents","title":"WorkspaceEvents","text":"<pre><code>WorkspaceEvents(client: VSCodeClient)\n</code></pre> <p>Event emitters for workspace-related VS Code events.</p> <p>Provides VS Code-style event subscription with on_did_* methods.</p> <p>Initialize workspace events.</p> Source code in <code>vscode_sockpuppet/events.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\"):\n    \"\"\"Initialize workspace events.\"\"\"\n    self._client = client\n</code></pre>"},{"location":"api/events/#vscode_sockpuppet.events.WorkspaceEvents.on_did_open_text_document","title":"on_did_open_text_document  <code>property</code>","text":"<pre><code>on_did_open_text_document: Event\n</code></pre> <p>Event fired when a text document is opened.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(document):     print(f\"Opened: {document['fileName']}\")</p> <p>dispose = workspace.on_did_open_text_document(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WorkspaceEvents.on_did_close_text_document","title":"on_did_close_text_document  <code>property</code>","text":"<pre><code>on_did_close_text_document: Event\n</code></pre> <p>Event fired when a text document is closed.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(document):     print(f\"Closed: {document['fileName']}\")</p> <p>dispose = workspace.on_did_close_text_document(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WorkspaceEvents.on_did_save_text_document","title":"on_did_save_text_document  <code>property</code>","text":"<pre><code>on_did_save_text_document: Event\n</code></pre> <p>Event fired when a text document is saved.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(document):     print(f\"Saved: {document['fileName']}\")</p> <p>dispose = workspace.on_did_save_text_document(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WorkspaceEvents.on_did_change_text_document","title":"on_did_change_text_document  <code>property</code>","text":"<pre><code>on_did_change_text_document: Event\n</code></pre> <p>Event fired when a text document changes.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(event):     print(f\"Changed: {event['uri']}\")     for change in event['contentChanges']:         print(f\"  Text: {change['text']}\")</p> <p>dispose = workspace.on_did_change_text_document(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WorkspaceEvents.on_did_change_workspace_folders","title":"on_did_change_workspace_folders  <code>property</code>","text":"<pre><code>on_did_change_workspace_folders: Event\n</code></pre> <p>Event fired when workspace folders are added or removed.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(event):     print(f\"Added: {len(event['added'])}\")     print(f\"Removed: {len(event['removed'])}\")</p> <p>dispose = workspace.on_did_change_workspace_folders(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WorkspaceEvents.on_did_change_configuration","title":"on_did_change_configuration  <code>property</code>","text":"<pre><code>on_did_change_configuration: Event\n</code></pre> <p>Event fired when the configuration changes.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(event):     print(\"Configuration changed\")</p> <p>dispose = workspace.on_did_change_configuration(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WorkspaceEvents.on_did_create_files","title":"on_did_create_files  <code>property</code>","text":"<pre><code>on_did_create_files: Event\n</code></pre> <p>Event fired when files are created.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(data):     for file in data['files']:         print(f\"Created: {file['uri']}\")</p> <p>dispose = workspace.on_did_create_files(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WorkspaceEvents.on_did_delete_files","title":"on_did_delete_files  <code>property</code>","text":"<pre><code>on_did_delete_files: Event\n</code></pre> <p>Event fired when files are deleted.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(data):     for file in data['files']:         print(f\"Deleted: {file['uri']}\")</p> <p>dispose = workspace.on_did_delete_files(handler)</p>"},{"location":"api/events/#vscode_sockpuppet.events.WorkspaceEvents.on_did_rename_files","title":"on_did_rename_files  <code>property</code>","text":"<pre><code>on_did_rename_files: Event\n</code></pre> <p>Event fired when files are renamed or moved.</p> <p>Returns:</p> Type Description <code>Event</code> <p>Event that can be called with a handler</p> Example <p>def handler(data):     for file in data['files']:         print(f\"Renamed: {file['oldUri']} -&gt; {file['newUri']}\")</p> <p>dispose = workspace.on_did_rename_files(handler)</p>"},{"location":"api/filesystem/","title":"FileSystem","text":"<p>File system operations for reading and writing files.</p>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem","title":"FileSystem","text":"<pre><code>FileSystem(client: VSCodeClient)\n</code></pre> <p>VS Code file system operations.</p> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\"):\n    self.client = client\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.read_file","title":"read_file","text":"<pre><code>read_file(uri: str) -&gt; bytes\n</code></pre> <p>Read a file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the file to read</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The file contents as bytes</p> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def read_file(self, uri: str) -&gt; bytes:\n    \"\"\"\n    Read a file.\n\n    Args:\n        uri: The URI of the file to read\n\n    Returns:\n        The file contents as bytes\n    \"\"\"\n    result = self.client._send_request(\"fs.readFile\", {\"uri\": uri})\n    return bytes(result)\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.write_file","title":"write_file","text":"<pre><code>write_file(uri: str, content: bytes) -&gt; None\n</code></pre> <p>Write to a file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the file to write</p> required <code>content</code> <code>bytes</code> <p>The content to write</p> required Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def write_file(self, uri: str, content: bytes) -&gt; None:\n    \"\"\"\n    Write to a file.\n\n    Args:\n        uri: The URI of the file to write\n        content: The content to write\n    \"\"\"\n    self.client._send_request(\"fs.writeFile\", {\"uri\": uri, \"content\": list(content)})\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.delete","title":"delete","text":"<pre><code>delete(uri: str, recursive: bool = False, use_trash: bool = False) -&gt; None\n</code></pre> <p>Delete a file or directory.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the file/directory to delete</p> required <code>recursive</code> <code>bool</code> <p>Delete recursively if a directory</p> <code>False</code> <code>use_trash</code> <code>bool</code> <p>Use the OS trash/recycle bin</p> <code>False</code> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def delete(self, uri: str, recursive: bool = False, use_trash: bool = False) -&gt; None:\n    \"\"\"\n    Delete a file or directory.\n\n    Args:\n        uri: The URI of the file/directory to delete\n        recursive: Delete recursively if a directory\n        use_trash: Use the OS trash/recycle bin\n    \"\"\"\n    options = {\"recursive\": recursive, \"useTrash\": use_trash}\n    self.client._send_request(\"fs.delete\", {\"uri\": uri, \"options\": options})\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.rename","title":"rename","text":"<pre><code>rename(source: str, target: str, overwrite: bool = False) -&gt; None\n</code></pre> <p>Rename/move a file or directory.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>Source URI</p> required <code>target</code> <code>str</code> <p>Target URI</p> required <code>overwrite</code> <code>bool</code> <p>Overwrite if target exists</p> <code>False</code> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def rename(self, source: str, target: str, overwrite: bool = False) -&gt; None:\n    \"\"\"\n    Rename/move a file or directory.\n\n    Args:\n        source: Source URI\n        target: Target URI\n        overwrite: Overwrite if target exists\n    \"\"\"\n    options = {\"overwrite\": overwrite}\n    self.client._send_request(\n        \"fs.rename\",\n        {\"source\": source, \"target\": target, \"options\": options},\n    )\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.copy","title":"copy","text":"<pre><code>copy(source: str, target: str, overwrite: bool = False) -&gt; None\n</code></pre> <p>Copy a file or directory.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>Source URI</p> required <code>target</code> <code>str</code> <p>Target URI</p> required <code>overwrite</code> <code>bool</code> <p>Overwrite if target exists</p> <code>False</code> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def copy(self, source: str, target: str, overwrite: bool = False) -&gt; None:\n    \"\"\"\n    Copy a file or directory.\n\n    Args:\n        source: Source URI\n        target: Target URI\n        overwrite: Overwrite if target exists\n    \"\"\"\n    options = {\"overwrite\": overwrite}\n    self.client._send_request(\n        \"fs.copy\", {\"source\": source, \"target\": target, \"options\": options}\n    )\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.create_directory","title":"create_directory","text":"<pre><code>create_directory(uri: str) -&gt; None\n</code></pre> <p>Create a directory.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the directory to create</p> required Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def create_directory(self, uri: str) -&gt; None:\n    \"\"\"\n    Create a directory.\n\n    Args:\n        uri: The URI of the directory to create\n    \"\"\"\n    self.client._send_request(\"fs.createDirectory\", {\"uri\": uri})\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.read_directory","title":"read_directory","text":"<pre><code>read_directory(uri: str) -&gt; List[Tuple[str, int]]\n</code></pre> <p>Read a directory.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the directory to read</p> required <p>Returns:</p> Type Description <code>List[Tuple[str, int]]</code> <p>List of (name, type) tuples where type is from FileType</p> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def read_directory(self, uri: str) -&gt; List[Tuple[str, int]]:\n    \"\"\"\n    Read a directory.\n\n    Args:\n        uri: The URI of the directory to read\n\n    Returns:\n        List of (name, type) tuples where type is from FileType\n    \"\"\"\n    result = self.client._send_request(\"fs.readDirectory\", {\"uri\": uri})\n    return [(entry[\"name\"], entry[\"type\"]) for entry in result]\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.stat","title":"stat","text":"<pre><code>stat(uri: str) -&gt; FileStat\n</code></pre> <p>Get file metadata.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the file</p> required <p>Returns:</p> Type Description <code>FileStat</code> <p>File metadata</p> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def stat(self, uri: str) -&gt; FileStat:\n    \"\"\"\n    Get file metadata.\n\n    Args:\n        uri: The URI of the file\n\n    Returns:\n        File metadata\n    \"\"\"\n    result = self.client._send_request(\"fs.stat\", {\"uri\": uri})\n    return FileStat(result)\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.read_text","title":"read_text","text":"<pre><code>read_text(uri: str, encoding: str = 'utf-8') -&gt; str\n</code></pre> <p>Read a text file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the file</p> required <code>encoding</code> <code>str</code> <p>Text encoding (default: utf-8)</p> <code>'utf-8'</code> <p>Returns:</p> Type Description <code>str</code> <p>File contents as string</p> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def read_text(self, uri: str, encoding: str = \"utf-8\") -&gt; str:\n    \"\"\"\n    Read a text file.\n\n    Args:\n        uri: The URI of the file\n        encoding: Text encoding (default: utf-8)\n\n    Returns:\n        File contents as string\n    \"\"\"\n    content = self.read_file(uri)\n    return content.decode(encoding)\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.write_text","title":"write_text","text":"<pre><code>write_text(uri: str, text: str, encoding: str = 'utf-8') -&gt; None\n</code></pre> <p>Write a text file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the file</p> required <code>text</code> <code>str</code> <p>Text content to write</p> required <code>encoding</code> <code>str</code> <p>Text encoding (default: utf-8)</p> <code>'utf-8'</code> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def write_text(self, uri: str, text: str, encoding: str = \"utf-8\") -&gt; None:\n    \"\"\"\n    Write a text file.\n\n    Args:\n        uri: The URI of the file\n        text: Text content to write\n        encoding: Text encoding (default: utf-8)\n    \"\"\"\n    content = text.encode(encoding)\n    self.write_file(uri, content)\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.exists","title":"exists","text":"<pre><code>exists(uri: str) -&gt; bool\n</code></pre> <p>Check if a file or directory exists.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if exists, False otherwise</p> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def exists(self, uri: str) -&gt; bool:\n    \"\"\"\n    Check if a file or directory exists.\n\n    Args:\n        uri: The URI to check\n\n    Returns:\n        True if exists, False otherwise\n    \"\"\"\n    try:\n        self.stat(uri)\n        return True\n    except Exception:\n        return False\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.is_directory","title":"is_directory","text":"<pre><code>is_directory(uri: str) -&gt; bool\n</code></pre> <p>Check if a URI points to a directory.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if directory, False otherwise</p> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def is_directory(self, uri: str) -&gt; bool:\n    \"\"\"\n    Check if a URI points to a directory.\n\n    Args:\n        uri: The URI to check\n\n    Returns:\n        True if directory, False otherwise\n    \"\"\"\n    try:\n        stat = self.stat(uri)\n        return stat.type == FileType.Directory\n    except Exception:\n        return False\n</code></pre>"},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileSystem.is_file","title":"is_file","text":"<pre><code>is_file(uri: str) -&gt; bool\n</code></pre> <p>Check if a URI points to a file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if file, False otherwise</p> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def is_file(self, uri: str) -&gt; bool:\n    \"\"\"\n    Check if a URI points to a file.\n\n    Args:\n        uri: The URI to check\n\n    Returns:\n        True if file, False otherwise\n    \"\"\"\n    try:\n        stat = self.stat(uri)\n        return stat.type == FileType.File\n    except Exception:\n        return False\n</code></pre>"},{"location":"api/filesystem/#filestat","title":"FileStat","text":""},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileStat","title":"FileStat","text":"<pre><code>FileStat(data: dict)\n</code></pre> <p>File metadata.</p> Source code in <code>vscode_sockpuppet/fs.py</code> <pre><code>def __init__(self, data: dict):\n    self.type: int = data[\"type\"]\n    self.ctime: int = data[\"ctime\"]\n    self.mtime: int = data[\"mtime\"]\n    self.size: int = data[\"size\"]\n</code></pre>"},{"location":"api/filesystem/#filetype","title":"FileType","text":""},{"location":"api/filesystem/#vscode_sockpuppet.fs.FileType","title":"FileType","text":"<p>File type enumeration.</p>"},{"location":"api/filewatcher/","title":"FileWatcher","text":"<p>File system watching for monitoring file changes.</p>"},{"location":"api/filewatcher/#vscode_sockpuppet.filewatcher.FileSystemWatcher","title":"FileSystemWatcher","text":"<pre><code>FileSystemWatcher(client: VSCodeClient, watcher_id: str, glob_pattern: str, ignore_create_events: bool = False, ignore_change_events: bool = False, ignore_delete_events: bool = False)\n</code></pre> <p>Watches for file system changes (create, change, delete).</p> <p>File system watchers use glob patterns to match files and can monitor workspace folders or specific paths.</p> <p>Initialize a FileSystemWatcher.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>The VSCodeClient instance</p> required <code>watcher_id</code> <code>str</code> <p>Unique identifier for this watcher</p> required <code>glob_pattern</code> <code>str</code> <p>Glob pattern to match files (e.g., '*/.py')</p> required <code>ignore_create_events</code> <code>bool</code> <p>If true, file creation events are ignored</p> <code>False</code> <code>ignore_change_events</code> <code>bool</code> <p>If true, file change events are ignored</p> <code>False</code> <code>ignore_delete_events</code> <code>bool</code> <p>If true, file deletion events are ignored</p> <code>False</code> Source code in <code>vscode_sockpuppet/filewatcher.py</code> <pre><code>def __init__(\n    self,\n    client: \"VSCodeClient\",\n    watcher_id: str,\n    glob_pattern: str,\n    ignore_create_events: bool = False,\n    ignore_change_events: bool = False,\n    ignore_delete_events: bool = False,\n):\n    \"\"\"\n    Initialize a FileSystemWatcher.\n\n    Args:\n        client: The VSCodeClient instance\n        watcher_id: Unique identifier for this watcher\n        glob_pattern: Glob pattern to match files (e.g., '**/*.py')\n        ignore_create_events: If true, file creation events are ignored\n        ignore_change_events: If true, file change events are ignored\n        ignore_delete_events: If true, file deletion events are ignored\n    \"\"\"\n    self.client = client\n    self.watcher_id = watcher_id\n    self.glob_pattern = glob_pattern\n    self.ignore_create_events = ignore_create_events\n    self.ignore_change_events = ignore_change_events\n    self.ignore_delete_events = ignore_delete_events\n    self._disposed = False\n\n    # Event handler callbacks\n    self._on_create_handlers: list[Callable[[str], None]] = []\n    self._on_change_handlers: list[Callable[[str], None]] = []\n    self._on_delete_handlers: list[Callable[[str], None]] = []\n\n    # Subscribe to watcher events\n    if not ignore_create_events:\n        event_name = f\"watcher.{watcher_id}.onCreate\"\n        self.client.subscribe(event_name, self._handle_create)\n\n    if not ignore_change_events:\n        event_name = f\"watcher.{watcher_id}.onChange\"\n        self.client.subscribe(event_name, self._handle_change)\n\n    if not ignore_delete_events:\n        event_name = f\"watcher.{watcher_id}.onDelete\"\n        self.client.subscribe(event_name, self._handle_delete)\n</code></pre>"},{"location":"api/filewatcher/#vscode_sockpuppet.filewatcher.FileSystemWatcher.on_did_create","title":"on_did_create","text":"<pre><code>on_did_create(handler: Callable[[str], None]) -&gt; Callable[[], None]\n</code></pre> <p>Register a handler for file creation events.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable[[str], None]</code> <p>Callback function that takes a file URI string</p> required <p>Returns:</p> Type Description <code>Callable[[], None]</code> <p>Dispose function to unregister the handler</p> Example <p>def on_file_created(uri: str):     print(f\"File created: {uri}\")</p> <p>watcher = workspace.create_file_system_watcher(\"*/.py\") dispose = watcher.on_did_create(on_file_created)</p> Source code in <code>vscode_sockpuppet/filewatcher.py</code> <pre><code>def on_did_create(self, handler: Callable[[str], None]) -&gt; Callable[[], None]:\n    \"\"\"\n    Register a handler for file creation events.\n\n    Args:\n        handler: Callback function that takes a file URI string\n\n    Returns:\n        Dispose function to unregister the handler\n\n    Example:\n        def on_file_created(uri: str):\n            print(f\"File created: {uri}\")\n\n        watcher = workspace.create_file_system_watcher(\"**/*.py\")\n        dispose = watcher.on_did_create(on_file_created)\n\n        # Later, to stop listening:\n        dispose()\n    \"\"\"\n    if self.ignore_create_events:\n        raise ValueError(\"Cannot register onCreate handler when ignoreCreateEvents is True\")\n\n    self._on_create_handlers.append(handler)\n\n    def dispose():\n        if handler in self._on_create_handlers:\n            self._on_create_handlers.remove(handler)\n\n    return dispose\n</code></pre>"},{"location":"api/filewatcher/#vscode_sockpuppet.filewatcher.FileSystemWatcher.on_did_create--later-to-stop-listening","title":"Later, to stop listening:","text":"<p>dispose()</p>"},{"location":"api/filewatcher/#vscode_sockpuppet.filewatcher.FileSystemWatcher.on_did_change","title":"on_did_change","text":"<pre><code>on_did_change(handler: Callable[[str], None]) -&gt; Callable[[], None]\n</code></pre> <p>Register a handler for file change events.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable[[str], None]</code> <p>Callback function that takes a file URI string</p> required <p>Returns:</p> Type Description <code>Callable[[], None]</code> <p>Dispose function to unregister the handler</p> Example <p>def on_file_changed(uri: str):     print(f\"File changed: {uri}\")</p> <p>watcher = workspace.create_file_system_watcher(\"*/.py\") dispose = watcher.on_did_change(on_file_changed)</p> Source code in <code>vscode_sockpuppet/filewatcher.py</code> <pre><code>def on_did_change(self, handler: Callable[[str], None]) -&gt; Callable[[], None]:\n    \"\"\"\n    Register a handler for file change events.\n\n    Args:\n        handler: Callback function that takes a file URI string\n\n    Returns:\n        Dispose function to unregister the handler\n\n    Example:\n        def on_file_changed(uri: str):\n            print(f\"File changed: {uri}\")\n\n        watcher = workspace.create_file_system_watcher(\"**/*.py\")\n        dispose = watcher.on_did_change(on_file_changed)\n    \"\"\"\n    if self.ignore_change_events:\n        raise ValueError(\"Cannot register onChange handler when ignoreChangeEvents is True\")\n\n    self._on_change_handlers.append(handler)\n\n    def dispose():\n        if handler in self._on_change_handlers:\n            self._on_change_handlers.remove(handler)\n\n    return dispose\n</code></pre>"},{"location":"api/filewatcher/#vscode_sockpuppet.filewatcher.FileSystemWatcher.on_did_delete","title":"on_did_delete","text":"<pre><code>on_did_delete(handler: Callable[[str], None]) -&gt; Callable[[], None]\n</code></pre> <p>Register a handler for file deletion events.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable[[str], None]</code> <p>Callback function that takes a file URI string</p> required <p>Returns:</p> Type Description <code>Callable[[], None]</code> <p>Dispose function to unregister the handler</p> Example <p>def on_file_deleted(uri: str):     print(f\"File deleted: {uri}\")</p> <p>watcher = workspace.create_file_system_watcher(\"*/.py\") dispose = watcher.on_did_delete(on_file_deleted)</p> Source code in <code>vscode_sockpuppet/filewatcher.py</code> <pre><code>def on_did_delete(self, handler: Callable[[str], None]) -&gt; Callable[[], None]:\n    \"\"\"\n    Register a handler for file deletion events.\n\n    Args:\n        handler: Callback function that takes a file URI string\n\n    Returns:\n        Dispose function to unregister the handler\n\n    Example:\n        def on_file_deleted(uri: str):\n            print(f\"File deleted: {uri}\")\n\n        watcher = workspace.create_file_system_watcher(\"**/*.py\")\n        dispose = watcher.on_did_delete(on_file_deleted)\n    \"\"\"\n    if self.ignore_delete_events:\n        raise ValueError(\"Cannot register onDelete handler when ignoreDeleteEvents is True\")\n\n    self._on_delete_handlers.append(handler)\n\n    def dispose():\n        if handler in self._on_delete_handlers:\n            self._on_delete_handlers.remove(handler)\n\n    return dispose\n</code></pre>"},{"location":"api/filewatcher/#vscode_sockpuppet.filewatcher.FileSystemWatcher.dispose","title":"dispose","text":"<pre><code>dispose() -&gt; None\n</code></pre> <p>Dispose the file system watcher and stop watching for events.</p> Example <p>watcher = workspace.create_file_system_watcher(\"*/.py\")</p> Source code in <code>vscode_sockpuppet/filewatcher.py</code> <pre><code>def dispose(self) -&gt; None:\n    \"\"\"\n    Dispose the file system watcher and stop watching for events.\n\n    Example:\n        watcher = workspace.create_file_system_watcher(\"**/*.py\")\n        # ... use watcher ...\n        watcher.dispose()  # Stop watching\n    \"\"\"\n    if self._disposed:\n        return\n\n    self._disposed = True\n\n    # Clear all handlers\n    self._on_create_handlers.clear()\n    self._on_change_handlers.clear()\n    self._on_delete_handlers.clear()\n\n    # Notify server to dispose watcher\n    self.client._send_request(\n        \"workspace.disposeFileSystemWatcher\",\n        {\"watcherId\": self.watcher_id},\n    )\n</code></pre>"},{"location":"api/filewatcher/#vscode_sockpuppet.filewatcher.FileSystemWatcher.dispose--use-watcher","title":"... use watcher ...","text":"<p>watcher.dispose()  # Stop watching</p>"},{"location":"api/filewatcher/#vscode_sockpuppet.filewatcher.FileSystemWatcher.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>String representation of the watcher.</p> Source code in <code>vscode_sockpuppet/filewatcher.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"String representation of the watcher.\"\"\"\n    return f\"FileSystemWatcher(id={self.watcher_id!r}, pattern={self.glob_pattern!r})\"\n</code></pre>"},{"location":"api/filewatcher/#vscode_sockpuppet.filewatcher.FileSystemWatcher.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> <p>Context manager entry.</p> Source code in <code>vscode_sockpuppet/filewatcher.py</code> <pre><code>def __enter__(self):\n    \"\"\"Context manager entry.\"\"\"\n    return self\n</code></pre>"},{"location":"api/filewatcher/#vscode_sockpuppet.filewatcher.FileSystemWatcher.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_val, exc_tb)\n</code></pre> <p>Context manager exit - automatically dispose.</p> Source code in <code>vscode_sockpuppet/filewatcher.py</code> <pre><code>def __exit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Context manager exit - automatically dispose.\"\"\"\n    self.dispose()\n</code></pre>"},{"location":"api/language_model/","title":"Language Model API","text":"<p>Access VS Code's Language Model API to interact with GitHub Copilot and other AI models directly from Python.</p>"},{"location":"api/language_model/#overview","title":"Overview","text":"<p>The Language Model API enables Python scripts to: - Query available language models (Copilot, custom providers) - Send chat requests with conversation history - Generate code, documentation, and explanations - Count tokens for cost estimation - Build AI-powered automation workflows</p>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModel","title":"LanguageModel","text":"<pre><code>LanguageModel(client: VSCodeClient)\n</code></pre> <p>Language Model API for interacting with Copilot and other LLMs.</p> <p>This class provides access to VS Code's Language Model API, allowing Python scripts to select and interact with available language models.</p> <p>Initialize the language model API.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>VSCode client instance</p> required Source code in <code>vscode_sockpuppet/language_model.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\"):\n    \"\"\"\n    Initialize the language model API.\n\n    Args:\n        client: VSCode client instance\n    \"\"\"\n    self.client = client\n</code></pre>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModel.select_chat_models","title":"select_chat_models","text":"<pre><code>select_chat_models(vendor: Optional[str] = None, family: Optional[str] = None, version: Optional[str] = None, id: Optional[str] = None) -&gt; List[LanguageModelChat]\n</code></pre> <p>Select language models matching the given criteria.</p> <p>Parameters:</p> Name Type Description Default <code>vendor</code> <code>Optional[str]</code> <p>Filter by vendor (e.g., 'copilot')</p> <code>None</code> <code>family</code> <code>Optional[str]</code> <p>Filter by model family (e.g., 'gpt-4o')</p> <code>None</code> <code>version</code> <code>Optional[str]</code> <p>Filter by version</p> <code>None</code> <code>id</code> <code>Optional[str]</code> <p>Filter by specific model ID</p> <code>None</code> <p>Returns:</p> Type Description <code>List[LanguageModelChat]</code> <p>List of matching language models</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If no models match the criteria or models not available</p> Example Source code in <code>vscode_sockpuppet/language_model.py</code> <pre><code>def select_chat_models(\n    self,\n    vendor: Optional[str] = None,\n    family: Optional[str] = None,\n    version: Optional[str] = None,\n    id: Optional[str] = None,\n) -&gt; List[LanguageModelChat]:\n    \"\"\"\n    Select language models matching the given criteria.\n\n    Args:\n        vendor: Filter by vendor (e.g., 'copilot')\n        family: Filter by model family (e.g., 'gpt-4o')\n        version: Filter by version\n        id: Filter by specific model ID\n\n    Returns:\n        List of matching language models\n\n    Raises:\n        Exception: If no models match the criteria or models not available\n\n    Example:\n        # Get all Copilot models\n        models = client.lm.select_chat_models(vendor='copilot')\n\n        # Get specific model family\n        models = client.lm.select_chat_models(\n            vendor='copilot',\n            family='gpt-4o'\n        )\n\n        # Get specific model by ID\n        models = client.lm.select_chat_models(\n            id='copilot-gpt-4o'\n        )\n    \"\"\"\n    selector = {}\n    if vendor is not None:\n        selector[\"vendor\"] = vendor\n    if family is not None:\n        selector[\"family\"] = family\n    if version is not None:\n        selector[\"version\"] = version\n    if id is not None:\n        selector[\"id\"] = id\n\n    models_data = self.client._send_request(\"lm.selectChatModels\", {\"selector\": selector})\n    return [LanguageModelChat(self.client, model_data) for model_data in models_data]\n</code></pre>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModel.select_chat_models--get-all-copilot-models","title":"Get all Copilot models","text":"<p>models = client.lm.select_chat_models(vendor='copilot')</p>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModel.select_chat_models--get-specific-model-family","title":"Get specific model family","text":"<p>models = client.lm.select_chat_models(     vendor='copilot',     family='gpt-4o' )</p>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModel.select_chat_models--get-specific-model-by-id","title":"Get specific model by ID","text":"<p>models = client.lm.select_chat_models(     id='copilot-gpt-4o' )</p>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChat","title":"LanguageModelChat","text":"<pre><code>LanguageModelChat(client: VSCodeClient, model_data: Dict[str, Any])\n</code></pre> <p>Represents a language model for making chat requests.</p> <p>Initialize a language model.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>VSCode client instance</p> required <code>model_data</code> <code>Dict[str, Any]</code> <p>Model metadata from VS Code</p> required Source code in <code>vscode_sockpuppet/language_model.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\", model_data: Dict[str, Any]):\n    \"\"\"\n    Initialize a language model.\n\n    Args:\n        client: VSCode client instance\n        model_data: Model metadata from VS Code\n    \"\"\"\n    self.client = client\n    self._id = model_data[\"id\"]\n    self._name = model_data[\"name\"]\n    self._vendor = model_data[\"vendor\"]\n    self._family = model_data[\"family\"]\n    self._version = model_data[\"version\"]\n    self._max_input_tokens = model_data[\"maxInputTokens\"]\n</code></pre>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChat.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre> <p>Unique identifier of the language model.</p>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChat.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Human-readable name of the model.</p>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChat.vendor","title":"vendor  <code>property</code>","text":"<pre><code>vendor: str\n</code></pre> <p>Vendor of the model (e.g., 'copilot').</p>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChat.family","title":"family  <code>property</code>","text":"<pre><code>family: str\n</code></pre> <p>Model family (e.g., 'gpt-4o', 'gpt-3.5-turbo').</p>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChat.version","title":"version  <code>property</code>","text":"<pre><code>version: str\n</code></pre> <p>Model version.</p>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChat.max_input_tokens","title":"max_input_tokens  <code>property</code>","text":"<pre><code>max_input_tokens: int\n</code></pre> <p>Maximum number of input tokens the model supports.</p>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChat.send_request","title":"send_request","text":"<pre><code>send_request(messages: List[LanguageModelChatMessage], options: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Send a chat request to the language model.</p> <p>Parameters:</p> Name Type Description Default <code>messages</code> <code>List[LanguageModelChatMessage]</code> <p>List of chat messages</p> required <code>options</code> <code>Optional[Dict[str, Any]]</code> <p>Optional request options (e.g., temperature, top_p)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Response dictionary with 'text' (full response) and</p> <code>Dict[str, Any]</code> <p>'parts' (individual fragments)</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the model is not available or request fails</p> Example <p>messages = [     LanguageModelChatMessage.user(\"Explain async/await\") ] response = model.send_request(messages) print(response['text'])</p> Source code in <code>vscode_sockpuppet/language_model.py</code> <pre><code>def send_request(\n    self,\n    messages: List[LanguageModelChatMessage],\n    options: Optional[Dict[str, Any]] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Send a chat request to the language model.\n\n    Args:\n        messages: List of chat messages\n        options: Optional request options (e.g., temperature, top_p)\n\n    Returns:\n        Response dictionary with 'text' (full response) and\n        'parts' (individual fragments)\n\n    Raises:\n        Exception: If the model is not available or request fails\n\n    Example:\n        messages = [\n            LanguageModelChatMessage.user(\"Explain async/await\")\n        ]\n        response = model.send_request(messages)\n        print(response['text'])\n    \"\"\"\n    message_dicts = [msg.to_dict() for msg in messages]\n    return self.client._send_request(\n        \"lm.sendRequest\",\n        {\n            \"modelId\": self._id,\n            \"messages\": message_dicts,\n            \"options\": options or {},\n        },\n    )\n</code></pre>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChat.count_tokens","title":"count_tokens","text":"<pre><code>count_tokens(text: str) -&gt; int\n</code></pre> <p>Count the number of tokens in a text string.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to count tokens for</p> required <p>Returns:</p> Type Description <code>int</code> <p>Number of tokens</p> Example <p>tokens = model.count_tokens(\"Hello, world!\") print(f\"Token count: {tokens}\")</p> Source code in <code>vscode_sockpuppet/language_model.py</code> <pre><code>def count_tokens(self, text: str) -&gt; int:\n    \"\"\"\n    Count the number of tokens in a text string.\n\n    Args:\n        text: The text to count tokens for\n\n    Returns:\n        Number of tokens\n\n    Example:\n        tokens = model.count_tokens(\"Hello, world!\")\n        print(f\"Token count: {tokens}\")\n    \"\"\"\n    return self.client._send_request(\"lm.countTokens\", {\"modelId\": self._id, \"text\": text})\n</code></pre>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChat.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>String representation of the model.</p> Source code in <code>vscode_sockpuppet/language_model.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"String representation of the model.\"\"\"\n    return (\n        f\"LanguageModelChat(id={self._id!r}, vendor={self._vendor!r}, family={self._family!r})\"\n    )\n</code></pre>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChatMessage","title":"LanguageModelChatMessage","text":"<pre><code>LanguageModelChatMessage(role: str, content: str)\n</code></pre> <p>Represents a chat message for language model requests.</p> <p>Create a chat message.</p> <p>Parameters:</p> Name Type Description Default <code>role</code> <code>str</code> <p>Message role ('user' or 'assistant')</p> required <code>content</code> <code>str</code> <p>Message content</p> required Source code in <code>vscode_sockpuppet/language_model.py</code> <pre><code>def __init__(self, role: str, content: str):\n    \"\"\"\n    Create a chat message.\n\n    Args:\n        role: Message role ('user' or 'assistant')\n        content: Message content\n    \"\"\"\n    self.role = role\n    self.content = content\n</code></pre>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChatMessage.user","title":"user  <code>classmethod</code>","text":"<pre><code>user(content: str) -&gt; LanguageModelChatMessage\n</code></pre> <p>Create a user message.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The user's message content</p> required <p>Returns:</p> Type Description <code>LanguageModelChatMessage</code> <p>A chat message with role 'user'</p> Example <p>msg = LanguageModelChatMessage.user(\"Explain this code\")</p> Source code in <code>vscode_sockpuppet/language_model.py</code> <pre><code>@classmethod\ndef user(cls, content: str) -&gt; \"LanguageModelChatMessage\":\n    \"\"\"\n    Create a user message.\n\n    Args:\n        content: The user's message content\n\n    Returns:\n        A chat message with role 'user'\n\n    Example:\n        msg = LanguageModelChatMessage.user(\"Explain this code\")\n    \"\"\"\n    return cls(\"user\", content)\n</code></pre>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChatMessage.assistant","title":"assistant  <code>classmethod</code>","text":"<pre><code>assistant(content: str) -&gt; LanguageModelChatMessage\n</code></pre> <p>Create an assistant message.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The assistant's message content</p> required <p>Returns:</p> Type Description <code>LanguageModelChatMessage</code> <p>A chat message with role 'assistant'</p> Example <p>msg = LanguageModelChatMessage.assistant(\"This code...\")</p> Source code in <code>vscode_sockpuppet/language_model.py</code> <pre><code>@classmethod\ndef assistant(cls, content: str) -&gt; \"LanguageModelChatMessage\":\n    \"\"\"\n    Create an assistant message.\n\n    Args:\n        content: The assistant's message content\n\n    Returns:\n        A chat message with role 'assistant'\n\n    Example:\n        msg = LanguageModelChatMessage.assistant(\"This code...\")\n    \"\"\"\n    return cls(\"assistant\", content)\n</code></pre>"},{"location":"api/language_model/#vscode_sockpuppet.language_model.LanguageModelChatMessage.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; Dict[str, str]\n</code></pre> <p>Convert message to dictionary for JSON serialization.</p> Source code in <code>vscode_sockpuppet/language_model.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, str]:\n    \"\"\"Convert message to dictionary for JSON serialization.\"\"\"\n    return {\"role\": self.role, \"content\": self.content}\n</code></pre>"},{"location":"api/language_model/#usage-examples","title":"Usage Examples","text":""},{"location":"api/language_model/#basic-chat-request","title":"Basic Chat Request","text":"<pre><code>from vscode_sockpuppet import VSCodeClient, LanguageModelChatMessage\n\nclient = VSCodeClient()\nclient.connect()\n\n# Get available models\nmodels = client.lm.select_chat_models(vendor='copilot')\nmodel = models[0]\n\n# Send a request\nmessages = [\n    LanguageModelChatMessage.user(\"Explain async/await in Python\")\n]\n\nresponse = model.send_request(messages)\nprint(response['text'])\n</code></pre>"},{"location":"api/language_model/#multi-turn-conversation","title":"Multi-turn Conversation","text":"<pre><code># Start conversation\nmessages = [\n    LanguageModelChatMessage.user(\"What is a Python decorator?\")\n]\n\nresponse = model.send_request(messages)\nprint(f\"Assistant: {response['text']}\")\n\n# Add response to history\nmessages.append(\n    LanguageModelChatMessage.assistant(response['text'])\n)\n\n# Ask follow-up\nmessages.append(\n    LanguageModelChatMessage.user(\"Show me an example\")\n)\n\nresponse = model.send_request(messages)\nprint(f\"Assistant: {response['text']}\")\n</code></pre>"},{"location":"api/language_model/#code-generation","title":"Code Generation","text":"<pre><code>messages = [\n    LanguageModelChatMessage.user(\n        \"Write a Python function to check if a number is prime. \"\n        \"Include docstring and type hints.\"\n    )\n]\n\nresponse = model.send_request(messages)\ngenerated_code = response['text']\nprint(generated_code)\n</code></pre>"},{"location":"api/language_model/#token-counting","title":"Token Counting","text":"<pre><code># Count tokens before sending\ntext = \"This is a long piece of text...\"\ntoken_count = model.count_tokens(text)\nprint(f\"This will use approximately {token_count} tokens\")\n\n# Helpful for estimating costs and staying within limits\nif token_count &lt; model.max_input_tokens:\n    response = model.send_request([\n        LanguageModelChatMessage.user(text)\n    ])\n</code></pre>"},{"location":"api/language_model/#code-explanation-workflow","title":"Code Explanation Workflow","text":"<pre><code># Get selected code from active editor\neditor = client.editor.get_active_text_editor()\nif editor and editor.selection:\n    doc = client.workspace.open_text_document(editor.document['uri'])\n    selected_text = doc.get_text_range(editor.selection)\n\n    # Ask model to explain\n    messages = [\n        LanguageModelChatMessage.user(\n            f\"Explain this code:\\n\\n{selected_text}\"\n        )\n    ]\n\n    response = model.send_request(messages)\n\n    # Show explanation in VS Code\n    client.window.show_information_message(\n        f\"Explanation: {response['text'][:200]}...\"\n    )\n</code></pre>"},{"location":"api/language_model/#error-analysis","title":"Error Analysis","text":"<pre><code>error_code = \"\"\"\ndef divide(a, b):\n    return a / b\n\"\"\"\n\nerror_message = \"ZeroDivisionError: division by zero\"\n\nmessages = [\n    LanguageModelChatMessage.user(\n        f\"This code has an error:\\n\\n{error_code}\\n\\n\"\n        f\"Error: {error_message}\\n\\n\"\n        \"Explain the problem and suggest a fix.\"\n    )\n]\n\nresponse = model.send_request(messages)\nprint(response['text'])\n</code></pre>"},{"location":"api/language_model/#model-selection","title":"Model Selection","text":"<pre><code># Get all available models\nall_models = client.lm.select_chat_models()\nfor model in all_models:\n    print(f\"{model.name}: {model.max_input_tokens:,} tokens\")\n\n# Get specific vendor\ncopilot_models = client.lm.select_chat_models(vendor='copilot')\n\n# Get specific model family\ngpt4_models = client.lm.select_chat_models(\n    vendor='copilot',\n    family='gpt-4o'\n)\n\n# Get by exact ID\nspecific = client.lm.select_chat_models(\n    id='copilot-gpt-4o'\n)\n</code></pre>"},{"location":"api/language_model/#requirements","title":"Requirements","text":""},{"location":"api/language_model/#github-copilot","title":"GitHub Copilot","text":"<p>To use the Language Model API with Copilot:</p> <ol> <li>Install the GitHub Copilot extension in VS Code</li> <li>Sign in to your GitHub account</li> <li>Have an active Copilot subscription</li> </ol>"},{"location":"api/language_model/#custom-language-model-providers","title":"Custom Language Model Providers","text":"<p>VS Code's Language Model API supports custom providers. Any extension that implements the <code>LanguageModelChatProvider</code> interface will be accessible through this API.</p>"},{"location":"api/language_model/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    models = client.lm.select_chat_models(vendor='copilot')\n\n    if not models:\n        print(\"No models available - is Copilot installed?\")\n        exit(1)\n\n    model = models[0]\n    response = model.send_request(messages)\n\nexcept Exception as e:\n    if \"LanguageModelError\" in str(e):\n        print(f\"Language model error: {e}\")\n        # Could be: model not found, user consent not given,\n        # quota exceeded, content filtered, etc.\n    else:\n        print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"api/language_model/#best-practices","title":"Best Practices","text":""},{"location":"api/language_model/#1-check-model-availability","title":"1. Check Model Availability","text":"<pre><code>models = client.lm.select_chat_models(vendor='copilot')\nif not models:\n    client.window.show_warning_message(\n        \"Copilot not available. Please sign in and try again.\"\n    )\n    exit(1)\n</code></pre>"},{"location":"api/language_model/#2-handle-conversation-context","title":"2. Handle Conversation Context","text":"<pre><code># Keep conversation history for context\nconversation = []\n\ndef ask(question: str) -&gt; str:\n    conversation.append(LanguageModelChatMessage.user(question))\n    response = model.send_request(conversation)\n    answer = response['text']\n    conversation.append(LanguageModelChatMessage.assistant(answer))\n    return answer\n</code></pre>"},{"location":"api/language_model/#3-stay-within-token-limits","title":"3. Stay Within Token Limits","text":"<pre><code># Check if prompt fits within limits\nprompt_tokens = model.count_tokens(user_prompt)\nif prompt_tokens &gt; model.max_input_tokens:\n    print(f\"Prompt too long! {prompt_tokens}/{model.max_input_tokens}\")\n    # Truncate or split the prompt\n</code></pre>"},{"location":"api/language_model/#4-provide-clear-instructions","title":"4. Provide Clear Instructions","text":"<pre><code># Be specific in your requests\nmessages = [\n    LanguageModelChatMessage.user(\n        \"Write a Python function that:\\n\"\n        \"1. Takes a list of numbers\\n\"\n        \"2. Returns only the even numbers\\n\"\n        \"3. Includes type hints\\n\"\n        \"4. Has a docstring with an example\\n\"\n        \"5. Uses list comprehension\"\n    )\n]\n</code></pre>"},{"location":"api/language_model/#use-cases","title":"Use Cases","text":""},{"location":"api/language_model/#documentation-generation","title":"Documentation Generation","text":"<p>Generate docstrings, comments, and README content:</p> <pre><code>def generate_docstring(function_code: str) -&gt; str:\n    messages = [\n        LanguageModelChatMessage.user(\n            f\"Generate a comprehensive Google-style docstring \"\n            f\"for this function:\\n\\n{function_code}\"\n        )\n    ]\n    response = model.send_request(messages)\n    return response['text']\n</code></pre>"},{"location":"api/language_model/#code-review-assistant","title":"Code Review Assistant","text":"<p>Analyze code for issues and suggestions:</p> <pre><code>def review_code(code: str) -&gt; str:\n    messages = [\n        LanguageModelChatMessage.user(\n            f\"Review this code for:\\n\"\n            f\"- Potential bugs\\n\"\n            f\"- Performance issues\\n\"\n            f\"- Best practices\\n\\n\"\n            f\"{code}\"\n        )\n    ]\n    response = model.send_request(messages)\n    return response['text']\n</code></pre>"},{"location":"api/language_model/#test-generation","title":"Test Generation","text":"<p>Create unit tests automatically:</p> <pre><code>def generate_tests(function_code: str) -&gt; str:\n    messages = [\n        LanguageModelChatMessage.user(\n            f\"Generate pytest unit tests for this function:\\n\\n\"\n            f\"{function_code}\\n\\n\"\n            f\"Include edge cases and error conditions.\"\n        )\n    ]\n    response = model.send_request(messages)\n    return response['text']\n</code></pre>"},{"location":"api/language_model/#refactoring-suggestions","title":"Refactoring Suggestions","text":"<p>Get improvement recommendations:</p> <pre><code>def suggest_refactoring(code: str) -&gt; str:\n    messages = [\n        LanguageModelChatMessage.user(\n            f\"Suggest refactoring improvements for:\\n\\n{code}\\n\\n\"\n            f\"Focus on readability and maintainability.\"\n        )\n    ]\n    response = model.send_request(messages)\n    return response['text']\n</code></pre>"},{"location":"api/language_model/#api-reference","title":"API Reference","text":"<p>See the full API documentation for detailed information about:</p> <ul> <li><code>LanguageModel</code> class and methods</li> <li><code>LanguageModelChat</code> properties and operations  </li> <li><code>LanguageModelChatMessage</code> message construction</li> <li>Error handling and exceptions</li> <li>Advanced options and parameters</li> </ul>"},{"location":"api/progress/","title":"Progress","text":"<p>Progress indicators and notifications.</p>"},{"location":"api/progress/#vscode_sockpuppet.progress.Progress","title":"Progress","text":"<pre><code>Progress(client: VSCodeClient, progress_id: str)\n</code></pre> <p>Represents a progress indicator.</p> <p>Note: This is a simplified version. For complex progress scenarios, you may want to manage progress updates through custom events.</p> <p>Create a progress indicator.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>The VS Code client</p> required <code>progress_id</code> <code>str</code> <p>Unique progress identifier</p> required Source code in <code>vscode_sockpuppet/progress.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\", progress_id: str):\n    \"\"\"\n    Create a progress indicator.\n\n    Args:\n        client: The VS Code client\n        progress_id: Unique progress identifier\n    \"\"\"\n    self.client = client\n    self.progress_id = progress_id\n</code></pre>"},{"location":"api/progress/#vscode_sockpuppet.progress.Progress.report","title":"report","text":"<pre><code>report(message: Optional[str] = None, increment: Optional[int] = None) -&gt; None\n</code></pre> <p>Report progress.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Optional[str]</code> <p>Progress message</p> <code>None</code> <code>increment</code> <code>Optional[int]</code> <p>Progress increment (percentage)</p> <code>None</code> Source code in <code>vscode_sockpuppet/progress.py</code> <pre><code>def report(self, message: Optional[str] = None, increment: Optional[int] = None) -&gt; None:\n    \"\"\"\n    Report progress.\n\n    Args:\n        message: Progress message\n        increment: Progress increment (percentage)\n    \"\"\"\n    # This would need additional server-side support\n    # for real-time progress updates\n    pass\n</code></pre>"},{"location":"api/progress/#progresslocation","title":"ProgressLocation","text":""},{"location":"api/progress/#vscode_sockpuppet.progress.ProgressLocation","title":"ProgressLocation","text":"<p>Progress location options.</p>"},{"location":"api/progress/#with_progress","title":"with_progress","text":""},{"location":"api/progress/#vscode_sockpuppet.progress.with_progress","title":"with_progress","text":"<pre><code>with_progress(client: VSCodeClient, location: str = ProgressLocation.Notification, title: str = '', cancellable: bool = False, message: Optional[str] = None) -&gt; dict\n</code></pre> <p>Show a progress indicator.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>The VS Code client</p> required <code>location</code> <code>str</code> <p>Where to show progress (notification, window, sourcecontrol)</p> <code>Notification</code> <code>title</code> <code>str</code> <p>Progress title</p> <code>''</code> <code>cancellable</code> <code>bool</code> <p>Whether the operation can be cancelled</p> <code>False</code> <code>message</code> <code>Optional[str]</code> <p>Initial progress message</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>Result dictionary with success status</p> Example <p>with_progress( ...     client, ...     location=ProgressLocation.Notification, ...     title=\"Processing\", ...     message=\"Please wait...\" ... )</p> Source code in <code>vscode_sockpuppet/progress.py</code> <pre><code>def with_progress(\n    client: \"VSCodeClient\",\n    location: str = ProgressLocation.Notification,\n    title: str = \"\",\n    cancellable: bool = False,\n    message: Optional[str] = None,\n) -&gt; dict:\n    \"\"\"\n    Show a progress indicator.\n\n    Args:\n        client: The VS Code client\n        location: Where to show progress (notification, window, sourcecontrol)\n        title: Progress title\n        cancellable: Whether the operation can be cancelled\n        message: Initial progress message\n\n    Returns:\n        Result dictionary with success status\n\n    Example:\n        &gt;&gt;&gt; with_progress(\n        ...     client,\n        ...     location=ProgressLocation.Notification,\n        ...     title=\"Processing\",\n        ...     message=\"Please wait...\"\n        ... )\n    \"\"\"\n    return client._send_request(\n        \"window.withProgress\",\n        {\n            \"location\": location,\n            \"title\": title,\n            \"cancellable\": cancellable,\n            \"message\": message,\n            \"task\": \"wait\",\n        },\n    )\n</code></pre>"},{"location":"api/statusbar/","title":"StatusBar","text":"<p>Status bar items for displaying information at the bottom of VS Code.</p>"},{"location":"api/statusbar/#vscode_sockpuppet.statusbar.StatusBarItem","title":"StatusBarItem","text":"<pre><code>StatusBarItem(client: VSCodeClient, id: str, alignment: str = StatusBarAlignment.Left, priority: Optional[int] = None)\n</code></pre> <p>Represents a status bar item.</p> <p>Create a status bar item.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>The VS Code client</p> required <code>id</code> <code>str</code> <p>Unique identifier</p> required <code>alignment</code> <code>str</code> <p>Alignment (left or right)</p> <code>Left</code> <code>priority</code> <code>Optional[int]</code> <p>Priority (higher = more left)</p> <code>None</code> Source code in <code>vscode_sockpuppet/statusbar.py</code> <pre><code>def __init__(\n    self,\n    client: \"VSCodeClient\",\n    id: str,\n    alignment: str = StatusBarAlignment.Left,\n    priority: Optional[int] = None,\n):\n    \"\"\"\n    Create a status bar item.\n\n    Args:\n        client: The VS Code client\n        id: Unique identifier\n        alignment: Alignment (left or right)\n        priority: Priority (higher = more left)\n    \"\"\"\n    self.client = client\n    self.id = id\n    self._text = \"\"\n    self._tooltip: Optional[str] = None\n    self._command: Optional[str] = None\n    self._color: Optional[str] = None\n    self._background_color: Optional[str] = None\n    self._visible = False\n\n    # Create on server side\n    self.client._send_request(\n        \"window.createStatusBarItem\",\n        {\"id\": id, \"alignment\": alignment, \"priority\": priority},\n    )\n</code></pre>"},{"location":"api/statusbar/#vscode_sockpuppet.statusbar.StatusBarItem.text","title":"text  <code>property</code> <code>writable</code>","text":"<pre><code>text: str\n</code></pre> <p>Get the text of the status bar item.</p>"},{"location":"api/statusbar/#vscode_sockpuppet.statusbar.StatusBarItem.tooltip","title":"tooltip  <code>property</code> <code>writable</code>","text":"<pre><code>tooltip: Optional[str]\n</code></pre> <p>Get the tooltip of the status bar item.</p>"},{"location":"api/statusbar/#vscode_sockpuppet.statusbar.StatusBarItem.command","title":"command  <code>property</code> <code>writable</code>","text":"<pre><code>command: Optional[str]\n</code></pre> <p>Get the command of the status bar item.</p>"},{"location":"api/statusbar/#vscode_sockpuppet.statusbar.StatusBarItem.color","title":"color  <code>property</code> <code>writable</code>","text":"<pre><code>color: Optional[str]\n</code></pre> <p>Get the text color.</p>"},{"location":"api/statusbar/#vscode_sockpuppet.statusbar.StatusBarItem.background_color","title":"background_color  <code>property</code> <code>writable</code>","text":"<pre><code>background_color: Optional[str]\n</code></pre> <p>Get the background color.</p>"},{"location":"api/statusbar/#vscode_sockpuppet.statusbar.StatusBarItem.show","title":"show","text":"<pre><code>show() -&gt; None\n</code></pre> <p>Show the status bar item.</p> Source code in <code>vscode_sockpuppet/statusbar.py</code> <pre><code>def show(self) -&gt; None:\n    \"\"\"Show the status bar item.\"\"\"\n    self._visible = True\n    self._update()\n</code></pre>"},{"location":"api/statusbar/#vscode_sockpuppet.statusbar.StatusBarItem.hide","title":"hide","text":"<pre><code>hide() -&gt; None\n</code></pre> <p>Hide the status bar item.</p> Source code in <code>vscode_sockpuppet/statusbar.py</code> <pre><code>def hide(self) -&gt; None:\n    \"\"\"Hide the status bar item.\"\"\"\n    self._visible = False\n    self._update()\n</code></pre>"},{"location":"api/statusbar/#vscode_sockpuppet.statusbar.StatusBarItem.dispose","title":"dispose","text":"<pre><code>dispose() -&gt; None\n</code></pre> <p>Dispose the status bar item.</p> Source code in <code>vscode_sockpuppet/statusbar.py</code> <pre><code>def dispose(self) -&gt; None:\n    \"\"\"Dispose the status bar item.\"\"\"\n    self.client._send_request(\"window.disposeStatusBarItem\", {\"id\": self.id})\n</code></pre>"},{"location":"api/statusbar/#statusbaralignment","title":"StatusBarAlignment","text":""},{"location":"api/statusbar/#vscode_sockpuppet.statusbar.StatusBarAlignment","title":"StatusBarAlignment","text":"<p>Status bar alignment options.</p>"},{"location":"api/statusbar/#create_status_bar_item","title":"create_status_bar_item","text":""},{"location":"api/statusbar/#vscode_sockpuppet.statusbar.create_status_bar_item","title":"create_status_bar_item","text":"<pre><code>create_status_bar_item(client: VSCodeClient, alignment: str = StatusBarAlignment.Left, priority: Optional[int] = None) -&gt; StatusBarItem\n</code></pre> <p>Create a status bar item.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>The VS Code client</p> required <code>alignment</code> <code>str</code> <p>Alignment (left or right)</p> <code>Left</code> <code>priority</code> <code>Optional[int]</code> <p>Priority (higher = more left)</p> <code>None</code> <p>Returns:</p> Type Description <code>StatusBarItem</code> <p>A new status bar item</p> Source code in <code>vscode_sockpuppet/statusbar.py</code> <pre><code>def create_status_bar_item(\n    client: \"VSCodeClient\",\n    alignment: str = StatusBarAlignment.Left,\n    priority: Optional[int] = None,\n) -&gt; StatusBarItem:\n    \"\"\"\n    Create a status bar item.\n\n    Args:\n        client: The VS Code client\n        alignment: Alignment (left or right)\n        priority: Priority (higher = more left)\n\n    Returns:\n        A new status bar item\n    \"\"\"\n    item_id = str(uuid.uuid4())\n    return StatusBarItem(client, item_id, alignment, priority)\n</code></pre>"},{"location":"api/tabs/","title":"Tabs","text":"<p>Tab and tab group management.</p>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.Tab","title":"Tab","text":"<pre><code>Tab(data: dict)\n</code></pre> <p>Represents a tab within a tab group.</p> <p>Initialize a Tab from VS Code data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Tab data from VS Code</p> required Source code in <code>vscode_sockpuppet/tabs.py</code> <pre><code>def __init__(self, data: dict):\n    \"\"\"\n    Initialize a Tab from VS Code data.\n\n    Args:\n        data: Tab data from VS Code\n    \"\"\"\n    self.label = data.get(\"label\", \"\")\n    self.is_active = data.get(\"isActive\", False)\n    self.is_dirty = data.get(\"isDirty\", False)\n    self.is_pinned = data.get(\"isPinned\", False)\n    self.is_preview = data.get(\"isPreview\", False)\n    self.group_id = data.get(\"groupId\", 0)\n    self.input = data.get(\"input\")\n</code></pre>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.Tab.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>String representation of the tab.</p> Source code in <code>vscode_sockpuppet/tabs.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"String representation of the tab.\"\"\"\n    flags = []\n    if self.is_active:\n        flags.append(\"active\")\n    if self.is_dirty:\n        flags.append(\"dirty\")\n    if self.is_pinned:\n        flags.append(\"pinned\")\n    if self.is_preview:\n        flags.append(\"preview\")\n    flag_str = f\" [{', '.join(flags)}]\" if flags else \"\"\n    return f\"Tab({self.label!r}{flag_str})\"\n</code></pre>"},{"location":"api/tabs/#tabgroup","title":"TabGroup","text":""},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroup","title":"TabGroup","text":"<pre><code>TabGroup(data: dict)\n</code></pre> <p>Represents a group of tabs.</p> <p>Initialize a TabGroup from VS Code data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Tab group data from VS Code</p> required Source code in <code>vscode_sockpuppet/tabs.py</code> <pre><code>def __init__(self, data: dict):\n    \"\"\"\n    Initialize a TabGroup from VS Code data.\n\n    Args:\n        data: Tab group data from VS Code\n    \"\"\"\n    self.is_active = data.get(\"isActive\", False)\n    self.view_column = data.get(\"viewColumn\", 1)\n    self.group_id = data.get(\"groupId\", 0)\n    self.tabs = [Tab(tab_data) for tab_data in data.get(\"tabs\", [])]\n</code></pre>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroup.active_tab","title":"active_tab  <code>property</code>","text":"<pre><code>active_tab: Optional[Tab]\n</code></pre> <p>Get the active tab in this group.</p>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroup.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>String representation of the tab group.</p> Source code in <code>vscode_sockpuppet/tabs.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"String representation of the tab group.\"\"\"\n    active_str = \" (active)\" if self.is_active else \"\"\n    return f\"TabGroup(column={self.view_column}, tabs={len(self.tabs)}{active_str})\"\n</code></pre>"},{"location":"api/tabs/#tabgroups","title":"TabGroups","text":""},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroups","title":"TabGroups","text":"<pre><code>TabGroups(client: VSCodeClient)\n</code></pre> <p>Manages tab groups in VS Code.</p> <p>Initialize TabGroups.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>The VSCodeClient instance</p> required Source code in <code>vscode_sockpuppet/tabs.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\"):\n    \"\"\"\n    Initialize TabGroups.\n\n    Args:\n        client: The VSCodeClient instance\n    \"\"\"\n    self.client = client\n</code></pre>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroups.get_all","title":"get_all","text":"<pre><code>get_all() -&gt; list[TabGroup]\n</code></pre> <p>Get all tab groups.</p> <p>Returns:</p> Type Description <code>list[TabGroup]</code> <p>List of all TabGroup instances</p> Example <p>tab_groups = window.tab_groups.get_all() for group in tab_groups:     print(f\"Group {group.view_column}: {len(group.tabs)} tabs\")</p> Source code in <code>vscode_sockpuppet/tabs.py</code> <pre><code>def get_all(self) -&gt; list[TabGroup]:\n    \"\"\"\n    Get all tab groups.\n\n    Returns:\n        List of all TabGroup instances\n\n    Example:\n        tab_groups = window.tab_groups.get_all()\n        for group in tab_groups:\n            print(f\"Group {group.view_column}: {len(group.tabs)} tabs\")\n    \"\"\"\n    result = self.client._send_request(\"window.tabGroups.all\")\n    return [TabGroup(group_data) for group_data in result.get(\"groups\", [])]\n</code></pre>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroups.get_active_tab_group","title":"get_active_tab_group","text":"<pre><code>get_active_tab_group() -&gt; Optional[TabGroup]\n</code></pre> <p>Get the currently active tab group.</p> <p>Returns:</p> Type Description <code>Optional[TabGroup]</code> <p>The active TabGroup or None</p> Example <p>active_group = window.tab_groups.get_active_tab_group() if active_group:     print(f\"Active group has {len(active_group.tabs)} tabs\")</p> Source code in <code>vscode_sockpuppet/tabs.py</code> <pre><code>def get_active_tab_group(self) -&gt; Optional[TabGroup]:\n    \"\"\"\n    Get the currently active tab group.\n\n    Returns:\n        The active TabGroup or None\n\n    Example:\n        active_group = window.tab_groups.get_active_tab_group()\n        if active_group:\n            print(f\"Active group has {len(active_group.tabs)} tabs\")\n    \"\"\"\n    result = self.client._send_request(\"window.tabGroups.activeTabGroup\")\n    group_data = result.get(\"group\")\n    return TabGroup(group_data) if group_data else None\n</code></pre>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroups.close_tab","title":"close_tab","text":"<pre><code>close_tab(tab: Tab, preserve_focus: bool = False) -&gt; bool\n</code></pre> <p>Close a specific tab.</p> <p>Parameters:</p> Name Type Description Default <code>tab</code> <code>Tab</code> <p>The tab to close</p> required <code>preserve_focus</code> <code>bool</code> <p>Whether to preserve focus</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if successful</p> Example <p>groups = window.tab_groups.get_all() for group in groups:     for tab in group.tabs:         if \"test\" in tab.label.lower():             window.tab_groups.close_tab(tab)</p> Source code in <code>vscode_sockpuppet/tabs.py</code> <pre><code>def close_tab(\n    self,\n    tab: Tab,\n    preserve_focus: bool = False,\n) -&gt; bool:\n    \"\"\"\n    Close a specific tab.\n\n    Args:\n        tab: The tab to close\n        preserve_focus: Whether to preserve focus\n\n    Returns:\n        True if successful\n\n    Example:\n        groups = window.tab_groups.get_all()\n        for group in groups:\n            for tab in group.tabs:\n                if \"test\" in tab.label.lower():\n                    window.tab_groups.close_tab(tab)\n    \"\"\"\n    result = self.client._send_request(\n        \"window.tabGroups.closeTab\",\n        {\n            \"groupId\": tab.group_id,\n            \"tabLabel\": tab.label,\n            \"preserveFocus\": preserve_focus,\n        },\n    )\n    return result.get(\"success\", False)\n</code></pre>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroups.close_group","title":"close_group","text":"<pre><code>close_group(group: TabGroup, preserve_focus: bool = False) -&gt; bool\n</code></pre> <p>Close all tabs in a tab group.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>TabGroup</code> <p>The tab group to close</p> required <code>preserve_focus</code> <code>bool</code> <p>Whether to preserve focus</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if successful</p> Example <p>groups = window.tab_groups.get_all()</p> Source code in <code>vscode_sockpuppet/tabs.py</code> <pre><code>def close_group(\n    self,\n    group: TabGroup,\n    preserve_focus: bool = False,\n) -&gt; bool:\n    \"\"\"\n    Close all tabs in a tab group.\n\n    Args:\n        group: The tab group to close\n        preserve_focus: Whether to preserve focus\n\n    Returns:\n        True if successful\n\n    Example:\n        groups = window.tab_groups.get_all()\n        # Close all groups except the active one\n        for group in groups:\n            if not group.is_active:\n                window.tab_groups.close_group(group)\n    \"\"\"\n    result = self.client._send_request(\n        \"window.tabGroups.closeGroup\",\n        {\n            \"groupId\": group.group_id,\n            \"preserveFocus\": preserve_focus,\n        },\n    )\n    return result.get(\"success\", False)\n</code></pre>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroups.close_group--close-all-groups-except-the-active-one","title":"Close all groups except the active one","text":"<p>for group in groups:     if not group.is_active:         window.tab_groups.close_group(group)</p>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroups.on_did_change_tab_groups","title":"on_did_change_tab_groups","text":"<pre><code>on_did_change_tab_groups(handler: Callable[[Any], None]) -&gt; Callable[[], None]\n</code></pre> <p>Subscribe to tab group changes.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable[[Any], None]</code> <p>Callback function for tab group changes</p> required <p>Returns:</p> Type Description <code>Callable[[], None]</code> <p>Dispose function to unsubscribe</p> Example <p>def on_groups_changed(data):     print(\"Tab groups changed!\")     groups = window.tab_groups.get_all()     print(f\"Now have {len(groups)} groups\")</p> <p>dispose = window.tab_groups.on_did_change_tab_groups(     on_groups_changed )</p> Source code in <code>vscode_sockpuppet/tabs.py</code> <pre><code>def on_did_change_tab_groups(\n    self,\n    handler: Callable[[Any], None],\n) -&gt; Callable[[], None]:\n    \"\"\"\n    Subscribe to tab group changes.\n\n    Args:\n        handler: Callback function for tab group changes\n\n    Returns:\n        Dispose function to unsubscribe\n\n    Example:\n        def on_groups_changed(data):\n            print(\"Tab groups changed!\")\n            groups = window.tab_groups.get_all()\n            print(f\"Now have {len(groups)} groups\")\n\n        dispose = window.tab_groups.on_did_change_tab_groups(\n            on_groups_changed\n        )\n        # Later: dispose()\n    \"\"\"\n    event_name = \"window.onDidChangeTabGroups\"\n    self.client.subscribe(event_name, handler)\n\n    def dispose():\n        self.client.unsubscribe(event_name, handler)\n\n    return dispose\n</code></pre>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroups.on_did_change_tab_groups--later-dispose","title":"Later: dispose()","text":""},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroups.on_did_change_tabs","title":"on_did_change_tabs","text":"<pre><code>on_did_change_tabs(handler: Callable[[Any], None]) -&gt; Callable[[], None]\n</code></pre> <p>Subscribe to tab changes.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable[[Any], None]</code> <p>Callback function for tab changes</p> required <p>Returns:</p> Type Description <code>Callable[[], None]</code> <p>Dispose function to unsubscribe</p> Example <p>def on_tabs_changed(data):     print(\"Tabs changed!\")     active = window.tab_groups.get_active_tab_group()     if active and active.active_tab:         print(f\"Active tab: {active.active_tab.label}\")</p> <p>dispose = window.tab_groups.on_did_change_tabs(on_tabs_changed)</p> Source code in <code>vscode_sockpuppet/tabs.py</code> <pre><code>def on_did_change_tabs(\n    self,\n    handler: Callable[[Any], None],\n) -&gt; Callable[[], None]:\n    \"\"\"\n    Subscribe to tab changes.\n\n    Args:\n        handler: Callback function for tab changes\n\n    Returns:\n        Dispose function to unsubscribe\n\n    Example:\n        def on_tabs_changed(data):\n            print(\"Tabs changed!\")\n            active = window.tab_groups.get_active_tab_group()\n            if active and active.active_tab:\n                print(f\"Active tab: {active.active_tab.label}\")\n\n        dispose = window.tab_groups.on_did_change_tabs(on_tabs_changed)\n        # Later: dispose()\n    \"\"\"\n    event_name = \"window.onDidChangeTabs\"\n    self.client.subscribe(event_name, handler)\n\n    def dispose():\n        self.client.unsubscribe(event_name, handler)\n\n    return dispose\n</code></pre>"},{"location":"api/tabs/#vscode_sockpuppet.tabs.TabGroups.on_did_change_tabs--later-dispose","title":"Later: dispose()","text":""},{"location":"api/terminal/","title":"Terminal","text":"<p>Terminal management and interaction.</p>"},{"location":"api/terminal/#vscode_sockpuppet.terminal.Terminal","title":"Terminal","text":"<pre><code>Terminal(client: VSCodeClient, terminal_id: str, name: Optional[str] = None)\n</code></pre> <p>VS Code terminal instance.</p> <p>Initialize a Terminal instance.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>The VSCodeClient instance</p> required <code>terminal_id</code> <code>str</code> <p>Unique identifier for this terminal</p> required <code>name</code> <code>Optional[str]</code> <p>Optional name of the terminal</p> <code>None</code> Source code in <code>vscode_sockpuppet/terminal.py</code> <pre><code>def __init__(\n    self,\n    client: \"VSCodeClient\",\n    terminal_id: str,\n    name: Optional[str] = None,\n):\n    \"\"\"\n    Initialize a Terminal instance.\n\n    Args:\n        client: The VSCodeClient instance\n        terminal_id: Unique identifier for this terminal\n        name: Optional name of the terminal\n    \"\"\"\n    self.client = client\n    self.terminal_id = terminal_id\n    self.name = name\n</code></pre>"},{"location":"api/terminal/#vscode_sockpuppet.terminal.Terminal.send_text","title":"send_text","text":"<pre><code>send_text(text: str, add_new_line: bool = True) -&gt; dict\n</code></pre> <p>Send text to the terminal.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to send to the terminal</p> required <code>add_new_line</code> <code>bool</code> <p>Whether to add a new line after the text</p> <code>True</code> <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Example <p>terminal.send_text(\"echo 'Hello, World!'\") terminal.send_text(\"cd /path/to/dir\", add_new_line=True)</p> Source code in <code>vscode_sockpuppet/terminal.py</code> <pre><code>def send_text(self, text: str, add_new_line: bool = True) -&gt; dict:\n    \"\"\"\n    Send text to the terminal.\n\n    Args:\n        text: Text to send to the terminal\n        add_new_line: Whether to add a new line after the text\n\n    Returns:\n        Success status\n\n    Example:\n        terminal.send_text(\"echo 'Hello, World!'\")\n        terminal.send_text(\"cd /path/to/dir\", add_new_line=True)\n    \"\"\"\n    return self.client._send_request(\n        \"terminal.sendText\",\n        {\n            \"terminalId\": self.terminal_id,\n            \"text\": text,\n            \"addNewLine\": add_new_line,\n        },\n    )\n</code></pre>"},{"location":"api/terminal/#vscode_sockpuppet.terminal.Terminal.show","title":"show","text":"<pre><code>show(preserve_focus: bool = True) -&gt; dict\n</code></pre> <p>Show the terminal in the UI.</p> <p>Parameters:</p> Name Type Description Default <code>preserve_focus</code> <code>bool</code> <p>If true, the terminal will not take focus</p> <code>True</code> <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Example <p>terminal.show(preserve_focus=False)  # Show and focus terminal.show()  # Show without taking focus</p> Source code in <code>vscode_sockpuppet/terminal.py</code> <pre><code>def show(self, preserve_focus: bool = True) -&gt; dict:\n    \"\"\"\n    Show the terminal in the UI.\n\n    Args:\n        preserve_focus: If true, the terminal will not take focus\n\n    Returns:\n        Success status\n\n    Example:\n        terminal.show(preserve_focus=False)  # Show and focus\n        terminal.show()  # Show without taking focus\n    \"\"\"\n    return self.client._send_request(\n        \"terminal.show\",\n        {\n            \"terminalId\": self.terminal_id,\n            \"preserveFocus\": preserve_focus,\n        },\n    )\n</code></pre>"},{"location":"api/terminal/#vscode_sockpuppet.terminal.Terminal.hide","title":"hide","text":"<pre><code>hide() -&gt; dict\n</code></pre> <p>Hide the terminal from the UI.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Example <p>terminal.hide()</p> Source code in <code>vscode_sockpuppet/terminal.py</code> <pre><code>def hide(self) -&gt; dict:\n    \"\"\"\n    Hide the terminal from the UI.\n\n    Returns:\n        Success status\n\n    Example:\n        terminal.hide()\n    \"\"\"\n    return self.client._send_request(\n        \"terminal.hide\",\n        {\"terminalId\": self.terminal_id},\n    )\n</code></pre>"},{"location":"api/terminal/#vscode_sockpuppet.terminal.Terminal.dispose","title":"dispose","text":"<pre><code>dispose() -&gt; dict\n</code></pre> <p>Dispose the terminal, closing it permanently.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Example <p>terminal.dispose()</p> Source code in <code>vscode_sockpuppet/terminal.py</code> <pre><code>def dispose(self) -&gt; dict:\n    \"\"\"\n    Dispose the terminal, closing it permanently.\n\n    Returns:\n        Success status\n\n    Example:\n        terminal.dispose()\n    \"\"\"\n    return self.client._send_request(\n        \"terminal.dispose\",\n        {\"terminalId\": self.terminal_id},\n    )\n</code></pre>"},{"location":"api/terminal/#vscode_sockpuppet.terminal.Terminal.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>String representation of the terminal.</p> Source code in <code>vscode_sockpuppet/terminal.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"String representation of the terminal.\"\"\"\n    name_str = f\", name={self.name!r}\" if self.name else \"\"\n    return f\"Terminal(id={self.terminal_id!r}{name_str})\"\n</code></pre>"},{"location":"api/types/","title":"Type Definitions","text":"<p>TypedDict definitions for API structures, providing type-safe options for various operations.</p>"},{"location":"api/types/#window-types","title":"Window Types","text":"<p>These types are used for window operations like dialogs and quick picks.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.QuickPickOptions","title":"QuickPickOptions","text":"<p>               Bases: <code>TypedDict</code></p> <p>Options to configure the behavior of the quick pick UI.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.QuickPickOptions.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>An optional title for the quick pick</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.QuickPickOptions.matchOnDescription","title":"matchOnDescription  <code>instance-attribute</code>","text":"<pre><code>matchOnDescription: bool\n</code></pre> <p>Controls if the description of items should be matched</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.QuickPickOptions.matchOnDetail","title":"matchOnDetail  <code>instance-attribute</code>","text":"<pre><code>matchOnDetail: bool\n</code></pre> <p>Controls if the detail of items should be matched</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.QuickPickOptions.placeHolder","title":"placeHolder  <code>instance-attribute</code>","text":"<pre><code>placeHolder: str\n</code></pre> <p>Placeholder text to show in the input box</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.QuickPickOptions.ignoreFocusOut","title":"ignoreFocusOut  <code>instance-attribute</code>","text":"<pre><code>ignoreFocusOut: bool\n</code></pre> <p>Set to true to keep the picker open when focus moves to another part of the editor or to another window</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.QuickPickOptions.canPickMany","title":"canPickMany  <code>instance-attribute</code>","text":"<pre><code>canPickMany: bool\n</code></pre> <p>Allow multiple selections</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.InputBoxOptions","title":"InputBoxOptions","text":"<p>               Bases: <code>TypedDict</code></p> <p>Options to configure the behavior of the input box UI.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.InputBoxOptions.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>An optional title for the input box</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.InputBoxOptions.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>The value to prefill in the input box</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.InputBoxOptions.valueSelection","title":"valueSelection  <code>instance-attribute</code>","text":"<pre><code>valueSelection: tuple[int, int]\n</code></pre> <p>Selection range of the prefilled value (start, end)</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.InputBoxOptions.prompt","title":"prompt  <code>instance-attribute</code>","text":"<pre><code>prompt: str\n</code></pre> <p>The text to display underneath the input box</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.InputBoxOptions.placeHolder","title":"placeHolder  <code>instance-attribute</code>","text":"<pre><code>placeHolder: str\n</code></pre> <p>Placeholder text in the input box</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.InputBoxOptions.password","title":"password  <code>instance-attribute</code>","text":"<pre><code>password: bool\n</code></pre> <p>Set to true to show a password input that hides the typed text</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.InputBoxOptions.ignoreFocusOut","title":"ignoreFocusOut  <code>instance-attribute</code>","text":"<pre><code>ignoreFocusOut: bool\n</code></pre> <p>Set to true to keep the input box open when focus moves to another part of the editor or to another window</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.OpenDialogOptions","title":"OpenDialogOptions","text":"<p>               Bases: <code>TypedDict</code></p> <p>Options to configure the behavior of a file open dialog.</p> <p>Note: On Windows and Linux, a file dialog cannot be both a file selector and a folder selector, so if you set both canSelectFiles and canSelectFolders to True on these platforms, a folder selector will be shown.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.OpenDialogOptions.defaultUri","title":"defaultUri  <code>instance-attribute</code>","text":"<pre><code>defaultUri: str\n</code></pre> <p>The default URI to show when the dialog opens</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.OpenDialogOptions.openLabel","title":"openLabel  <code>instance-attribute</code>","text":"<pre><code>openLabel: str\n</code></pre> <p>A human-readable string for the open button</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.OpenDialogOptions.canSelectFiles","title":"canSelectFiles  <code>instance-attribute</code>","text":"<pre><code>canSelectFiles: bool\n</code></pre> <p>Allow selecting files (default: True)</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.OpenDialogOptions.canSelectFolders","title":"canSelectFolders  <code>instance-attribute</code>","text":"<pre><code>canSelectFolders: bool\n</code></pre> <p>Allow selecting folders (default: False)</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.OpenDialogOptions.canSelectMany","title":"canSelectMany  <code>instance-attribute</code>","text":"<pre><code>canSelectMany: bool\n</code></pre> <p>Allow multiple selections (default: False)</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.OpenDialogOptions.filters","title":"filters  <code>instance-attribute</code>","text":"<pre><code>filters: dict[str, list[str]]\n</code></pre> <p>File filters used by the dialog. Each entry is a human-readable label and an array of extensions. Example: {'Images': ['png', 'jpg'], 'TypeScript': ['ts', 'tsx']}</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.OpenDialogOptions.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>Dialog title</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.SaveDialogOptions","title":"SaveDialogOptions","text":"<p>               Bases: <code>TypedDict</code></p> <p>Options to configure the behavior of a file save dialog.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.SaveDialogOptions.defaultUri","title":"defaultUri  <code>instance-attribute</code>","text":"<pre><code>defaultUri: str\n</code></pre> <p>The resource the dialog shows when opened</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.SaveDialogOptions.saveLabel","title":"saveLabel  <code>instance-attribute</code>","text":"<pre><code>saveLabel: str\n</code></pre> <p>A human-readable string for the save button</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.SaveDialogOptions.filters","title":"filters  <code>instance-attribute</code>","text":"<pre><code>filters: dict[str, list[str]]\n</code></pre> <p>File filters used by the dialog. Each entry is a human-readable label and an array of extensions. Example: {'Images': ['png', 'jpg'], 'TypeScript': ['ts', 'tsx']}</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.SaveDialogOptions.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>Dialog title. Note: This parameter might be ignored, as not all operating systems display a title on save dialogs (for example, macOS).</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.TextDocumentShowOptions","title":"TextDocumentShowOptions","text":"<p>               Bases: <code>TypedDict</code></p> <p>Options to configure the behavior of showing a TextDocument in an editor.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.TextDocumentShowOptions.viewColumn","title":"viewColumn  <code>instance-attribute</code>","text":"<pre><code>viewColumn: int\n</code></pre> <p>An optional view column in which the editor should be shown. The default is the active column. Columns that do not exist will be created as needed.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.TextDocumentShowOptions.preserveFocus","title":"preserveFocus  <code>instance-attribute</code>","text":"<pre><code>preserveFocus: bool\n</code></pre> <p>An optional flag that when true will stop the editor from taking focus</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.TextDocumentShowOptions.preview","title":"preview  <code>instance-attribute</code>","text":"<pre><code>preview: bool\n</code></pre> <p>An optional flag that controls if an editor-tab will be replaced with the next editor or if it will be kept</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.TextDocumentShowOptions.selection","title":"selection  <code>instance-attribute</code>","text":"<pre><code>selection: dict\n</code></pre> <p>An optional selection to apply to the document. Should be a range dict with start and end positions.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.WorkspaceFolderPickOptions","title":"WorkspaceFolderPickOptions","text":"<p>               Bases: <code>TypedDict</code></p> <p>Options for showing the workspace folder picker.</p> <p>This mirrors the small options bag accepted by VS Code for <code>window.showWorkspaceFolderPick</code>, currently supporting <code>placeHolder</code> and <code>ignoreFocusOut</code>.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.WorkspaceFolderPickOptions.placeHolder","title":"placeHolder  <code>instance-attribute</code>","text":"<pre><code>placeHolder: str\n</code></pre> <p>Placeholder text shown in the picker</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.WorkspaceFolderPickOptions.ignoreFocusOut","title":"ignoreFocusOut  <code>instance-attribute</code>","text":"<pre><code>ignoreFocusOut: bool\n</code></pre> <p>Keep the picker open when focus moves out</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.WindowState","title":"WindowState","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents the current window state returned by <code>window.state</code>.</p> <p>Fields are optional because different VS Code versions/platforms may expose slightly different properties. Known fields: - focused: bool \u2014 whether the window is focused - active: bool \u2014 whether the window is active (platform-dependent)</p>"},{"location":"api/types/#position-and-range","title":"Position and Range","text":"<p>Dictionary versions of Position and Range for type hints.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.PositionDict","title":"PositionDict","text":"<p>               Bases: <code>TypedDict</code></p> <p>Dictionary representation of a position in a text document.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.PositionDict.line","title":"line  <code>instance-attribute</code>","text":"<pre><code>line: int\n</code></pre> <p>Line number (0-based)</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.PositionDict.character","title":"character  <code>instance-attribute</code>","text":"<pre><code>character: int\n</code></pre> <p>Character offset on the line (0-based)</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.RangeDict","title":"RangeDict","text":"<p>               Bases: <code>TypedDict</code></p> <p>Dictionary representation of a range in a text document.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.RangeDict.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start: PositionDict\n</code></pre> <p>The start position of the range</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.RangeDict.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end: PositionDict\n</code></pre> <p>The end position of the range</p>"},{"location":"api/types/#decoration-types","title":"Decoration Types","text":"<p>Types for editor decorations and styling.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.DecorationRenderOptions","title":"DecorationRenderOptions","text":"<p>               Bases: <code>ThemableDecorationRenderOptions</code></p> <p>Options for rendering text editor decorations.</p> <p>This mirrors VS Code's DecorationRenderOptions interface. All properties are optional.</p> Example <p>decoration_options: DecorationRenderOptions = {     \"backgroundColor\": \"rgba(255, 0, 0, 0.3)\",     \"border\": \"1px solid red\",     \"borderRadius\": \"3px\",     \"isWholeLine\": True,     \"overviewRulerLane\": 2,  # Center lane     \"light\": {         \"backgroundColor\": \"rgba(255, 0, 0, 0.1)\"     },     \"dark\": {         \"backgroundColor\": \"rgba(255, 0, 0, 0.3)\"     } }</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.ThemableDecorationRenderOptions","title":"ThemableDecorationRenderOptions","text":"<p>               Bases: <code>TypedDict</code></p> <p>Theme-specific rendering options for decorations.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.ThemableDecorationAttachmentRenderOptions","title":"ThemableDecorationAttachmentRenderOptions","text":"<p>               Bases: <code>TypedDict</code></p> <p>Options for rendering decoration attachments (before/after content).</p>"},{"location":"api/types/#workspace-edit-types","title":"Workspace Edit Types","text":"<p>Types for batch file modifications.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.TextEdit","title":"TextEdit","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a single text edit operation.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.TextEdit.range","title":"range  <code>instance-attribute</code>","text":"<pre><code>range: RangeDict\n</code></pre> <p>The range to replace</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.TextEdit.newText","title":"newText  <code>instance-attribute</code>","text":"<pre><code>newText: str\n</code></pre> <p>The new text for the range</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.TextDocumentEdit","title":"TextDocumentEdit","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents edits to a single text document.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.TextDocumentEdit.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri: str\n</code></pre> <p>The URI of the document to edit</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.TextDocumentEdit.edits","title":"edits  <code>instance-attribute</code>","text":"<pre><code>edits: list[TextEdit]\n</code></pre> <p>The text edits to apply</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.WorkspaceEdit","title":"WorkspaceEdit","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a workspace edit with changes to multiple files.</p> <p>A workspace edit can contain text edits for documents and file operations (create, delete, rename). All changes are applied atomically.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.WorkspaceEdit.documentChanges","title":"documentChanges  <code>instance-attribute</code>","text":"<pre><code>documentChanges: list[TextDocumentEdit]\n</code></pre> <p>Text edits grouped by document</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.WorkspaceEdit.createFiles","title":"createFiles  <code>instance-attribute</code>","text":"<pre><code>createFiles: list[CreateFileOperation]\n</code></pre> <p>Files to create</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.WorkspaceEdit.deleteFiles","title":"deleteFiles  <code>instance-attribute</code>","text":"<pre><code>deleteFiles: list[DeleteFileOperation]\n</code></pre> <p>Files to delete</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.WorkspaceEdit.renameFiles","title":"renameFiles  <code>instance-attribute</code>","text":"<pre><code>renameFiles: list[RenameFileOperation]\n</code></pre> <p>Files to rename</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.CreateFileOperation","title":"CreateFileOperation","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a file creation operation.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.CreateFileOperation.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri: str\n</code></pre> <p>The URI of the file to create</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.CreateFileOperation.options","title":"options  <code>instance-attribute</code>","text":"<pre><code>options: dict\n</code></pre> <p>Additional options (overwrite, ignoreIfExists)</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.DeleteFileOperation","title":"DeleteFileOperation","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a file deletion operation.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.DeleteFileOperation.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri: str\n</code></pre> <p>The URI of the file to delete</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.DeleteFileOperation.options","title":"options  <code>instance-attribute</code>","text":"<pre><code>options: dict\n</code></pre> <p>Additional options (recursive, ignoreIfNotExists)</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.RenameFileOperation","title":"RenameFileOperation","text":"<p>               Bases: <code>TypedDict</code></p> <p>Represents a file rename operation.</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.RenameFileOperation.oldUri","title":"oldUri  <code>instance-attribute</code>","text":"<pre><code>oldUri: str\n</code></pre> <p>The old URI of the file</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.RenameFileOperation.newUri","title":"newUri  <code>instance-attribute</code>","text":"<pre><code>newUri: str\n</code></pre> <p>The new URI of the file</p>"},{"location":"api/types/#vscode_sockpuppet.window_types.RenameFileOperation.options","title":"options  <code>instance-attribute</code>","text":"<pre><code>options: dict\n</code></pre> <p>Additional options (overwrite, ignoreIfExists)</p>"},{"location":"api/webview/","title":"Webview","text":"<p>Custom HTML panels for rich UI within VS Code.</p>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel","title":"WebviewPanel","text":"<pre><code>WebviewPanel(client: VSCodeClient, panel_id: str, view_type: str, title: str)\n</code></pre> <p>Represents a VS Code webview panel.</p> <p>A webview panel displays custom HTML content in a VS Code editor tab.</p> <p>Initialize a WebviewPanel.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>VSCodeClient</code> <p>The VS Code client instance</p> required <code>panel_id</code> <code>str</code> <p>Unique identifier for this panel</p> required <code>view_type</code> <code>str</code> <p>Identifier for the webview type</p> required <code>title</code> <code>str</code> <p>Title displayed in the editor tab</p> required Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\", panel_id: str, view_type: str, title: str):\n    \"\"\"\n    Initialize a WebviewPanel.\n\n    Args:\n        client: The VS Code client instance\n        panel_id: Unique identifier for this panel\n        view_type: Identifier for the webview type\n        title: Title displayed in the editor tab\n    \"\"\"\n    self._client = client\n    self._id = panel_id\n    self._view_type = view_type\n    self._title = title\n    self._disposed = False\n    self._message_handlers: list[Callable[[Any], None]] = []\n    self._dispose_handlers: list[Callable[[], None]] = []\n    self._view_state_handlers: list[Callable[[dict], None]] = []\n    self._subscription_active = False\n    self._dispose_subscription_active = False\n    self._view_state_subscription_active = False\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre> <p>Get the unique identifier for this panel.</p>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.view_type","title":"view_type  <code>property</code>","text":"<pre><code>view_type: str\n</code></pre> <p>Get the view type identifier.</p>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.title","title":"title  <code>property</code>","text":"<pre><code>title: str\n</code></pre> <p>Get the panel title.</p>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.disposed","title":"disposed  <code>property</code>","text":"<pre><code>disposed: bool\n</code></pre> <p>Check if the panel has been disposed.</p>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.update_html","title":"update_html","text":"<pre><code>update_html(html: str) -&gt; None\n</code></pre> <p>Update the HTML content of the webview.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str</code> <p>The new HTML content to display</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the panel has been disposed</p> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def update_html(self, html: str) -&gt; None:\n    \"\"\"\n    Update the HTML content of the webview.\n\n    Args:\n        html: The new HTML content to display\n\n    Raises:\n        RuntimeError: If the panel has been disposed\n    \"\"\"\n    if self._disposed:\n        raise RuntimeError(\"Cannot update disposed webview panel\")\n\n    self._client._send_request(\"window.updateWebviewPanel\", {\"id\": self._id, \"html\": html})\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.update_title","title":"update_title","text":"<pre><code>update_title(title: str) -&gt; None\n</code></pre> <p>Update the title of the webview panel.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The new title to display</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the panel has been disposed</p> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def update_title(self, title: str) -&gt; None:\n    \"\"\"\n    Update the title of the webview panel.\n\n    Args:\n        title: The new title to display\n\n    Raises:\n        RuntimeError: If the panel has been disposed\n    \"\"\"\n    if self._disposed:\n        raise RuntimeError(\"Cannot update disposed webview panel\")\n\n    self._title = title\n    self._client._send_request(\"window.updateWebviewPanel\", {\"id\": self._id, \"title\": title})\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.update_icon","title":"update_icon","text":"<pre><code>update_icon(icon_path: str) -&gt; None\n</code></pre> <p>Update the icon of the webview panel.</p> <p>Parameters:</p> Name Type Description Default <code>icon_path</code> <code>str</code> <p>Absolute path to the icon file</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the panel has been disposed</p> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def update_icon(self, icon_path: str) -&gt; None:\n    \"\"\"\n    Update the icon of the webview panel.\n\n    Args:\n        icon_path: Absolute path to the icon file\n\n    Raises:\n        RuntimeError: If the panel has been disposed\n    \"\"\"\n    if self._disposed:\n        raise RuntimeError(\"Cannot update disposed webview panel\")\n\n    self._client._send_request(\n        \"window.updateWebviewPanel\",\n        {\"id\": self._id, \"iconPath\": icon_path},\n    )\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.post_message","title":"post_message","text":"<pre><code>post_message(message: Any) -&gt; None\n</code></pre> <p>Post a message to the webview's JavaScript context.</p> <p>The message can be received in the webview's JavaScript using: window.addEventListener('message', event =&gt; {     const message = event.data;     // Handle message });</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Any</code> <p>The message to send (must be JSON-serializable)</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the panel has been disposed</p> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def post_message(self, message: Any) -&gt; None:\n    \"\"\"\n    Post a message to the webview's JavaScript context.\n\n    The message can be received in the webview's JavaScript using:\n    window.addEventListener('message', event =&gt; {\n        const message = event.data;\n        // Handle message\n    });\n\n    Args:\n        message: The message to send (must be JSON-serializable)\n\n    Raises:\n        RuntimeError: If the panel has been disposed\n    \"\"\"\n    if self._disposed:\n        raise RuntimeError(\"Cannot post message to disposed webview panel\")\n\n    self._client._send_request(\n        \"window.postMessageToWebview\", {\"id\": self._id, \"message\": message}\n    )\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.as_webview_uri","title":"as_webview_uri","text":"<pre><code>as_webview_uri(local_uri: str) -&gt; str\n</code></pre> <p>Convert a local file URI to a webview URI.</p> <p>Webviews cannot directly load resources from the workspace or local file system using file: URIs. This method converts a local file: URI into a URI that can be used inside the webview to load the same resource.</p> <p>The local resource must be in a directory listed in localResourceRoots when creating the webview, otherwise it cannot be loaded.</p> <p>Parameters:</p> Name Type Description Default <code>local_uri</code> <code>str</code> <p>Local file URI (e.g., 'file:///path/to/file.png') or absolute file path</p> required <p>Returns:</p> Type Description <code>str</code> <p>Webview URI that can be used in webview HTML</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the panel has been disposed</p> Example Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def as_webview_uri(self, local_uri: str) -&gt; str:\n    \"\"\"\n    Convert a local file URI to a webview URI.\n\n    Webviews cannot directly load resources from the workspace or local\n    file system using file: URIs. This method converts a local file:\n    URI into a URI that can be used inside the webview to load the same\n    resource.\n\n    The local resource must be in a directory listed in\n    localResourceRoots when creating the webview, otherwise it cannot\n    be loaded.\n\n    Args:\n        local_uri: Local file URI (e.g., 'file:///path/to/file.png')\n            or absolute file path\n\n    Returns:\n        Webview URI that can be used in webview HTML\n\n    Raises:\n        RuntimeError: If the panel has been disposed\n\n    Example:\n        # Convert a local file to webview URI\n        img_uri = panel.as_webview_uri('file:///path/to/image.png')\n\n        # Use in HTML\n        html = f'&lt;img src=\"{img_uri}\"&gt;'\n        panel.update_html(html)\n    \"\"\"\n    if self._disposed:\n        raise RuntimeError(\"Cannot convert URI for disposed webview panel\")\n\n    # Ensure URI is in proper format\n    if not local_uri.startswith(\"file://\"):\n        # Convert absolute path to file URI\n        normalized_path = local_uri.replace(\"\\\\\", \"/\")\n        local_uri = f\"file://{normalized_path}\"\n\n    result = self._client._send_request(\n        \"window.asWebviewUri\", {\"id\": self._id, \"uri\": local_uri}\n    )\n    return result[\"webviewUri\"]\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.as_webview_uri--convert-a-local-file-to-webview-uri","title":"Convert a local file to webview URI","text":"<p>img_uri = panel.as_webview_uri('file:///path/to/image.png')</p>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.as_webview_uri--use-in-html","title":"Use in HTML","text":"<p>html = f'' panel.update_html(html)</p>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.on_did_receive_message","title":"on_did_receive_message","text":"<pre><code>on_did_receive_message(handler: Callable[[Any], None]) -&gt; Callable[[], None]\n</code></pre> <p>Subscribe to messages posted from the webview's JavaScript.</p> <p>The handler will be called whenever the webview posts a message using: const vscode = acquireVsCodeApi(); vscode.postMessage({ your: 'data' });</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable[[Any], None]</code> <p>Callback function that receives the message data</p> required <p>Returns:</p> Type Description <code>Callable[[], None]</code> <p>A function that can be called to unsubscribe the handler</p> Example <p>def handle_message(message):     print(f\"Received: {message}\")</p> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def on_did_receive_message(self, handler: Callable[[Any], None]) -&gt; Callable[[], None]:\n    \"\"\"\n    Subscribe to messages posted from the webview's JavaScript.\n\n    The handler will be called whenever the webview posts a message using:\n    const vscode = acquireVsCodeApi();\n    vscode.postMessage({ your: 'data' });\n\n    Args:\n        handler: Callback function that receives the message data\n\n    Returns:\n        A function that can be called to unsubscribe the handler\n\n    Example:\n        def handle_message(message):\n            print(f\"Received: {message}\")\n\n        # Subscribe\n        unsubscribe = panel.on_did_receive_message(handle_message)\n\n        # Later, to unsubscribe\n        unsubscribe()\n    \"\"\"\n    if self._disposed:\n        raise RuntimeError(\"Cannot subscribe to disposed webview panel\")\n\n    # Add handler to our list\n    self._message_handlers.append(handler)\n\n    # Set up global subscription if not already active\n    if not self._subscription_active:\n        self._setup_message_subscription()\n        self._subscription_active = True\n\n    # Return unsubscribe function\n    def unsubscribe():\n        if handler in self._message_handlers:\n            self._message_handlers.remove(handler)\n\n    return unsubscribe\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.on_did_receive_message--subscribe","title":"Subscribe","text":"<p>unsubscribe = panel.on_did_receive_message(handle_message)</p>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.on_did_receive_message--later-to-unsubscribe","title":"Later, to unsubscribe","text":"<p>unsubscribe()</p>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.on_did_dispose","title":"on_did_dispose","text":"<pre><code>on_did_dispose(handler: Callable[[], None]) -&gt; Callable[[], None]\n</code></pre> <p>Subscribe to the panel disposal event.</p> <p>The handler will be called when the webview panel is disposed, either by calling dispose() or when the user closes the panel.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable[[], None]</code> <p>Callback function called when the panel is disposed</p> required <p>Returns:</p> Type Description <code>Callable[[], None]</code> <p>A function that can be called to unsubscribe the handler</p> <p>Example::</p> <pre><code>def on_dispose():\n    print(\"Webview was closed\")\n\n# Subscribe\nunsubscribe = panel.on_did_dispose(on_dispose)\n\n# Later, to unsubscribe\nunsubscribe()\n</code></pre> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def on_did_dispose(self, handler: Callable[[], None]) -&gt; Callable[[], None]:\n    \"\"\"\n    Subscribe to the panel disposal event.\n\n    The handler will be called when the webview panel is disposed,\n    either by calling dispose() or when the user closes the panel.\n\n    Args:\n        handler: Callback function called when the panel is disposed\n\n    Returns:\n        A function that can be called to unsubscribe the handler\n\n    Example::\n\n        def on_dispose():\n            print(\"Webview was closed\")\n\n        # Subscribe\n        unsubscribe = panel.on_did_dispose(on_dispose)\n\n        # Later, to unsubscribe\n        unsubscribe()\n    \"\"\"\n    if self._disposed:\n        # Already disposed, call handler immediately\n        handler()\n        return lambda: None\n\n    # Add handler to our list\n    self._dispose_handlers.append(handler)\n\n    # Set up global subscription if not already active\n    if not self._dispose_subscription_active:\n        self._setup_dispose_subscription()\n        self._dispose_subscription_active = True\n\n    # Return unsubscribe function\n    def unsubscribe():\n        if handler in self._dispose_handlers:\n            self._dispose_handlers.remove(handler)\n\n    return unsubscribe\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.on_did_change_view_state","title":"on_did_change_view_state","text":"<pre><code>on_did_change_view_state(handler: Callable[[dict], None]) -&gt; Callable[[], None]\n</code></pre> <p>Subscribe to view state change events.</p> <p>The handler will be called when the panel's visibility or active state changes (e.g., when the user switches tabs or focuses the panel).</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable[[dict], None]</code> <p>Callback function that receives a dict with 'visible' and 'active' keys</p> required <p>Returns:</p> Type Description <code>Callable[[], None]</code> <p>A function that can be called to unsubscribe the handler</p> <p>Example::</p> <pre><code>def on_view_state_change(state):\n    print(f\"Visible: {state['visible']}, Active: {state['active']}\")\n    if state['active']:\n        print(\"Panel is now in focus!\")\n\n# Subscribe\nunsubscribe = panel.on_did_change_view_state(on_view_state_change)\n\n# Later, to unsubscribe\nunsubscribe()\n</code></pre> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def on_did_change_view_state(self, handler: Callable[[dict], None]) -&gt; Callable[[], None]:\n    \"\"\"\n    Subscribe to view state change events.\n\n    The handler will be called when the panel's visibility or active\n    state changes (e.g., when the user switches tabs or focuses the panel).\n\n    Args:\n        handler: Callback function that receives a dict with 'visible' and 'active' keys\n\n    Returns:\n        A function that can be called to unsubscribe the handler\n\n    Example::\n\n        def on_view_state_change(state):\n            print(f\"Visible: {state['visible']}, Active: {state['active']}\")\n            if state['active']:\n                print(\"Panel is now in focus!\")\n\n        # Subscribe\n        unsubscribe = panel.on_did_change_view_state(on_view_state_change)\n\n        # Later, to unsubscribe\n        unsubscribe()\n    \"\"\"\n    if self._disposed:\n        return lambda: None\n\n    # Add handler to our list\n    self._view_state_handlers.append(handler)\n\n    # Set up global subscription if not already active\n    if not self._view_state_subscription_active:\n        self._setup_view_state_subscription()\n        self._view_state_subscription_active = True\n\n    # Return unsubscribe function\n    def unsubscribe():\n        if handler in self._view_state_handlers:\n            self._view_state_handlers.remove(handler)\n\n    return unsubscribe\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.dispose","title":"dispose","text":"<pre><code>dispose() -&gt; None\n</code></pre> <p>Dispose of the webview panel, closing it in VS Code.</p> <p>After disposal, the panel cannot be used anymore. This will trigger any registered on_did_dispose handlers.</p> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def dispose(self) -&gt; None:\n    \"\"\"\n    Dispose of the webview panel, closing it in VS Code.\n\n    After disposal, the panel cannot be used anymore.\n    This will trigger any registered on_did_dispose handlers.\n    \"\"\"\n    if self._disposed:\n        return\n\n    self._client._send_request(\"window.disposeWebviewPanel\", {\"id\": self._id})\n    self._disposed = True\n\n    # Call dispose handlers\n    for handler in self._dispose_handlers[:]:\n        try:\n            handler()\n        except Exception as e:\n            print(f\"Error in webview dispose handler: {e}\")\n    # Clear handlers after calling them\n    self._dispose_handlers.clear()\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> <p>Context manager entry.</p> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def __enter__(self):\n    \"\"\"Context manager entry.\"\"\"\n    return self\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewPanel.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_val, exc_tb)\n</code></pre> <p>Context manager exit - automatically dispose the panel.</p> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def __exit__(self, exc_type, exc_val, exc_tb):\n    \"\"\"Context manager exit - automatically dispose the panel.\"\"\"\n    self.dispose()\n    return False\n</code></pre>"},{"location":"api/webview/#webviewoptions","title":"WebviewOptions","text":""},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewOptions","title":"WebviewOptions","text":"<pre><code>WebviewOptions(enable_scripts: bool = True, retain_context_when_hidden: bool = False, local_resource_roots: Optional[list[str]] = None)\n</code></pre> <p>Options for configuring a webview panel.</p> <p>Initialize webview options.</p> <p>Parameters:</p> Name Type Description Default <code>enable_scripts</code> <code>bool</code> <p>Whether to enable JavaScript in the webview</p> <code>True</code> <code>retain_context_when_hidden</code> <code>bool</code> <p>Whether to keep the webview's context when hidden</p> <code>False</code> <code>local_resource_roots</code> <code>Optional[list[str]]</code> <p>List of URI paths that the webview can load local resources from</p> <code>None</code> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def __init__(\n    self,\n    enable_scripts: bool = True,\n    retain_context_when_hidden: bool = False,\n    local_resource_roots: Optional[list[str]] = None,\n):\n    \"\"\"\n    Initialize webview options.\n\n    Args:\n        enable_scripts: Whether to enable JavaScript in the webview\n        retain_context_when_hidden: Whether to keep the webview's\n            context when hidden\n        local_resource_roots: List of URI paths that the webview can\n            load local resources from\n    \"\"\"\n    self.enable_scripts = enable_scripts\n    self.retain_context_when_hidden = retain_context_when_hidden\n    self.local_resource_roots = local_resource_roots or []\n</code></pre>"},{"location":"api/webview/#vscode_sockpuppet.webview.WebviewOptions.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; Dict[str, Any]\n</code></pre> <p>Convert options to a dictionary for JSON serialization.</p> Source code in <code>vscode_sockpuppet/webview.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"Convert options to a dictionary for JSON serialization.\"\"\"\n    return {\n        \"enableScripts\": self.enable_scripts,\n        \"retainContextWhenHidden\": self.retain_context_when_hidden,\n        \"localResourceRoots\": self.local_resource_roots,\n    }\n</code></pre>"},{"location":"api/window/","title":"Window","text":"<p>Window operations including messages, dialogs, editors, and UI components.</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window","title":"Window","text":"<pre><code>Window(client: VSCodeClient)\n</code></pre> <p>VS Code window operations.</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\"):\n    self.client = client\n    self._events = WindowEvents(client)\n    self._tab_groups: Optional[TabGroups] = None\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.tab_groups","title":"tab_groups  <code>property</code>","text":"<pre><code>tab_groups: TabGroups\n</code></pre> <p>Get the tab groups manager.</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.on_did_change_active_text_editor","title":"on_did_change_active_text_editor  <code>property</code>","text":"<pre><code>on_did_change_active_text_editor\n</code></pre> <p>Event fired when the active text editor changes.</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.on_did_change_text_editor_selection","title":"on_did_change_text_editor_selection  <code>property</code>","text":"<pre><code>on_did_change_text_editor_selection\n</code></pre> <p>Event fired when the selection in an editor changes.</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.on_did_change_visible_text_editors","title":"on_did_change_visible_text_editors  <code>property</code>","text":"<pre><code>on_did_change_visible_text_editors\n</code></pre> <p>Event fired when the visible text editors change.</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.on_did_open_terminal","title":"on_did_open_terminal  <code>property</code>","text":"<pre><code>on_did_open_terminal\n</code></pre> <p>Event fired when a terminal is opened.</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.on_did_close_terminal","title":"on_did_close_terminal  <code>property</code>","text":"<pre><code>on_did_close_terminal\n</code></pre> <p>Event fired when a terminal is closed.</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.on_did_change_terminal_state","title":"on_did_change_terminal_state  <code>property</code>","text":"<pre><code>on_did_change_terminal_state\n</code></pre> <p>Event fired when a terminal's state changes.</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.on_did_change_text_editor_visible_ranges","title":"on_did_change_text_editor_visible_ranges  <code>property</code>","text":"<pre><code>on_did_change_text_editor_visible_ranges\n</code></pre> <p>Event fired when visible ranges in an editor change.</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.on_did_change_text_editor_options","title":"on_did_change_text_editor_options  <code>property</code>","text":"<pre><code>on_did_change_text_editor_options\n</code></pre> <p>Event fired when text editor options change.</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.on_did_change_text_editor_view_column","title":"on_did_change_text_editor_view_column  <code>property</code>","text":"<pre><code>on_did_change_text_editor_view_column\n</code></pre> <p>Event fired when an editor's view column changes.</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.on_did_change_window_state","title":"on_did_change_window_state  <code>property</code>","text":"<pre><code>on_did_change_window_state\n</code></pre> <p>Event fired when the window state changes (focus).</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_information_message","title":"show_information_message","text":"<pre><code>show_information_message(message: str, *items: str) -&gt; Optional[str]\n</code></pre> <p>Show an information message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to show</p> required <code>*items</code> <code>str</code> <p>Optional items to show as buttons</p> <code>()</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The selected item or None if dismissed</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def show_information_message(self, message: str, *items: str) -&gt; Optional[str]:\n    \"\"\"\n    Show an information message.\n\n    Args:\n        message: The message to show\n        *items: Optional items to show as buttons\n\n    Returns:\n        The selected item or None if dismissed\n    \"\"\"\n    return self.client._send_request(\n        \"window.showInformationMessage\",\n        {\"message\": message, \"items\": list(items)},\n    )\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_warning_message","title":"show_warning_message","text":"<pre><code>show_warning_message(message: str, *items: str) -&gt; Optional[str]\n</code></pre> <p>Show a warning message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to show</p> required <code>*items</code> <code>str</code> <p>Optional items to show as buttons</p> <code>()</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The selected item or None if dismissed</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def show_warning_message(self, message: str, *items: str) -&gt; Optional[str]:\n    \"\"\"\n    Show a warning message.\n\n    Args:\n        message: The message to show\n        *items: Optional items to show as buttons\n\n    Returns:\n        The selected item or None if dismissed\n    \"\"\"\n    return self.client._send_request(\n        \"window.showWarningMessage\",\n        {\"message\": message, \"items\": list(items)},\n    )\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_error_message","title":"show_error_message","text":"<pre><code>show_error_message(message: str, *items: str) -&gt; Optional[str]\n</code></pre> <p>Show an error message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to show</p> required <code>*items</code> <code>str</code> <p>Optional items to show as buttons</p> <code>()</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The selected item or None if dismissed</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def show_error_message(self, message: str, *items: str) -&gt; Optional[str]:\n    \"\"\"\n    Show an error message.\n\n    Args:\n        message: The message to show\n        *items: Optional items to show as buttons\n\n    Returns:\n        The selected item or None if dismissed\n    \"\"\"\n    return self.client._send_request(\n        \"window.showErrorMessage\",\n        {\"message\": message, \"items\": list(items)},\n    )\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_quick_pick","title":"show_quick_pick","text":"<pre><code>show_quick_pick(items: list[str], options: Optional[QuickPickOptions] = None) -&gt; Optional[str]\n</code></pre> <p>Show a quick pick menu.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[str]</code> <p>The items to pick from</p> required <code>options</code> <code>Optional[QuickPickOptions]</code> <p>Quick pick options (QuickPickOptions TypedDict)</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The selected item(s) or None if dismissed</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def show_quick_pick(\n    self, items: list[str], options: Optional[QuickPickOptions] = None\n) -&gt; Optional[str]:\n    \"\"\"\n    Show a quick pick menu.\n\n    Args:\n        items: The items to pick from\n        options: Quick pick options (QuickPickOptions TypedDict)\n\n    Returns:\n        The selected item(s) or None if dismissed\n    \"\"\"\n    return self.client._send_request(\n        \"window.showQuickPick\", {\"items\": items, \"options\": options or {}}\n    )\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_input_box","title":"show_input_box","text":"<pre><code>show_input_box(options: Optional[InputBoxOptions] = None) -&gt; Optional[str]\n</code></pre> <p>Show an input box.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>Optional[InputBoxOptions]</code> <p>Input box options (InputBoxOptions TypedDict)</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The entered text or None if dismissed</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def show_input_box(self, options: Optional[InputBoxOptions] = None) -&gt; Optional[str]:\n    \"\"\"\n    Show an input box.\n\n    Args:\n        options: Input box options (InputBoxOptions TypedDict)\n\n    Returns:\n        The entered text or None if dismissed\n    \"\"\"\n    return self.client._send_request(\"window.showInputBox\", {\"options\": options or {}})\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_open_dialog","title":"show_open_dialog","text":"<pre><code>show_open_dialog(options: Optional[OpenDialogOptions] = None) -&gt; Optional[list[str]]\n</code></pre> <p>Show a file open dialog to the user.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>Optional[OpenDialogOptions]</code> <p>Dialog options (OpenDialogOptions TypedDict)</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[list[str]]</code> <p>List of selected file/folder URIs, or None if canceled</p> Example Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def show_open_dialog(self, options: Optional[OpenDialogOptions] = None) -&gt; Optional[list[str]]:\n    \"\"\"\n    Show a file open dialog to the user.\n\n    Args:\n        options: Dialog options (OpenDialogOptions TypedDict)\n\n    Returns:\n        List of selected file/folder URIs, or None if canceled\n\n    Example:\n        # Select a single Python file\n        uris = client.window.show_open_dialog({\n            'canSelectFiles': True,\n            'canSelectFolders': False,\n            'canSelectMany': False,\n            'filters': {'Python': ['py']},\n            'title': 'Select a Python file'\n        })\n\n        # Select multiple files or folders\n        uris = client.window.show_open_dialog({\n            'canSelectFiles': True,\n            'canSelectFolders': True,\n            'canSelectMany': True,\n            'title': 'Select files or folders'\n        })\n    \"\"\"\n    result = self.client._send_request(\"window.showOpenDialog\", {\"options\": options or {}})\n    return result.get(\"uris\") if result else None\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_open_dialog--select-a-single-python-file","title":"Select a single Python file","text":"<p>uris = client.window.show_open_dialog({     'canSelectFiles': True,     'canSelectFolders': False,     'canSelectMany': False,     'filters': {'Python': ['py']},     'title': 'Select a Python file' })</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_open_dialog--select-multiple-files-or-folders","title":"Select multiple files or folders","text":"<p>uris = client.window.show_open_dialog({     'canSelectFiles': True,     'canSelectFolders': True,     'canSelectMany': True,     'title': 'Select files or folders' })</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_save_dialog","title":"show_save_dialog","text":"<pre><code>show_save_dialog(options: Optional[SaveDialogOptions] = None) -&gt; Optional[str]\n</code></pre> <p>Show a file save dialog to the user.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>Optional[SaveDialogOptions]</code> <p>Dialog options (SaveDialogOptions TypedDict)</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Selected save location URI, or None if canceled</p> Example Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def show_save_dialog(self, options: Optional[SaveDialogOptions] = None) -&gt; Optional[str]:\n    \"\"\"\n    Show a file save dialog to the user.\n\n    Args:\n        options: Dialog options (SaveDialogOptions TypedDict)\n\n    Returns:\n        Selected save location URI, or None if canceled\n\n    Example:\n        # Save a Python file\n        uri = client.window.show_save_dialog({\n            'filters': {'Python': ['py']},\n            'title': 'Save Python file',\n            'saveLabel': 'Save'\n        })\n\n        if uri:\n            # Write to the selected location\n            client.fs.write_text(uri, 'print(\"Hello\")')\n    \"\"\"\n    result = self.client._send_request(\"window.showSaveDialog\", {\"options\": options or {}})\n    return result.get(\"uri\") if result else None\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_save_dialog--save-a-python-file","title":"Save a Python file","text":"<p>uri = client.window.show_save_dialog({     'filters': {'Python': ['py']},     'title': 'Save Python file',     'saveLabel': 'Save' })</p> <p>if uri:     # Write to the selected location     client.fs.write_text(uri, 'print(\"Hello\")')</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_workspace_folder_pick","title":"show_workspace_folder_pick","text":"<pre><code>show_workspace_folder_pick(options: Optional[dict] = None) -&gt; Optional[dict]\n</code></pre> <p>Show a workspace folder picker to the user.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>Optional[dict]</code> <p>Optional picker options (placeHolder, ignoreFocusOut)</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>A dict with <code>uri</code>, <code>name</code>, and <code>index</code> for the selected folder,</p> <code>Optional[dict]</code> <p>or None if canceled.</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def show_workspace_folder_pick(self, options: Optional[dict] = None) -&gt; Optional[dict]:\n    \"\"\"\n    Show a workspace folder picker to the user.\n\n    Args:\n        options: Optional picker options (placeHolder, ignoreFocusOut)\n\n    Returns:\n        A dict with `uri`, `name`, and `index` for the selected folder,\n        or None if canceled.\n    \"\"\"\n    result = self.client._send_request(\n        \"window.showWorkspaceFolderPick\", {\"options\": options or {}}\n    )\n    return result if result else None\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.show_text_document","title":"show_text_document","text":"<pre><code>show_text_document(uri: str, options: Optional[TextDocumentShowOptions] = None) -&gt; dict\n</code></pre> <p>Show a text document.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the document to show</p> required <code>options</code> <code>Optional[TextDocumentShowOptions]</code> <p>View options (TextDocumentShowOptions TypedDict)</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def show_text_document(\n    self, uri: str, options: Optional[TextDocumentShowOptions] = None\n) -&gt; dict:\n    \"\"\"\n    Show a text document.\n\n    Args:\n        uri: The URI of the document to show\n        options: View options (TextDocumentShowOptions TypedDict)\n\n    Returns:\n        Success status\n    \"\"\"\n    return self.client._send_request(\n        \"window.showTextDocument\", {\"uri\": uri, \"options\": options or {}}\n    )\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.visible_text_editors","title":"visible_text_editors","text":"<pre><code>visible_text_editors() -&gt; list[dict]\n</code></pre> <p>Get a list of currently visible text editors.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>A list of dicts with <code>uri</code>, <code>viewColumn</code>, and <code>selection</code> info.</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def visible_text_editors(self) -&gt; list[dict]:\n    \"\"\"\n    Get a list of currently visible text editors.\n\n    Returns:\n        A list of dicts with `uri`, `viewColumn`, and `selection` info.\n    \"\"\"\n    return self.client._send_request(\"window.visibleTextEditors\", {})\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.get_state","title":"get_state","text":"<pre><code>get_state() -&gt; WindowState\n</code></pre> <p>Get the current window state (focused flag).</p> <p>Returns:</p> Type Description <code>WindowState</code> <p>A dict with <code>focused</code> boolean indicating window focus.</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def get_state(self) -&gt; WindowState:\n    \"\"\"\n    Get the current window state (focused flag).\n\n    Returns:\n        A dict with `focused` boolean indicating window focus.\n    \"\"\"\n    return self.client._send_request(\"window.state\", {})\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.create_output_channel","title":"create_output_channel","text":"<pre><code>create_output_channel(name: str, text: Optional[str] = None, show: bool = False, preserve_focus: bool = True) -&gt; dict\n</code></pre> <p>Create an output channel.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the output channel</p> required <code>text</code> <code>Optional[str]</code> <p>Optional text to append</p> <code>None</code> <code>show</code> <code>bool</code> <p>Whether to show the channel</p> <code>False</code> <code>preserve_focus</code> <code>bool</code> <p>Whether to preserve focus when showing</p> <code>True</code> <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def create_output_channel(\n    self,\n    name: str,\n    text: Optional[str] = None,\n    show: bool = False,\n    preserve_focus: bool = True,\n) -&gt; dict:\n    \"\"\"\n    Create an output channel.\n\n    Args:\n        name: The name of the output channel\n        text: Optional text to append\n        show: Whether to show the channel\n        preserve_focus: Whether to preserve focus when showing\n\n    Returns:\n        Success status\n    \"\"\"\n    return self.client._send_request(\n        \"window.createOutputChannel\",\n        {\n            \"name\": name,\n            \"text\": text,\n            \"show\": show,\n            \"preserveFocus\": preserve_focus,\n        },\n    )\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.create_terminal","title":"create_terminal","text":"<pre><code>create_terminal(name: Optional[str] = None, shell_path: Optional[str] = None, shell_args: Optional[list] = None) -&gt; Terminal\n</code></pre> <p>Create a terminal.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>The name of the terminal</p> <code>None</code> <code>shell_path</code> <code>Optional[str]</code> <p>Path to the shell executable</p> <code>None</code> <code>shell_args</code> <code>Optional[list]</code> <p>Arguments for the shell</p> <code>None</code> <p>Returns:</p> Type Description <code>Terminal</code> <p>Terminal instance for interacting with the terminal</p> Example Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def create_terminal(\n    self,\n    name: Optional[str] = None,\n    shell_path: Optional[str] = None,\n    shell_args: Optional[list] = None,\n) -&gt; \"Terminal\":\n    \"\"\"\n    Create a terminal.\n\n    Args:\n        name: The name of the terminal\n        shell_path: Path to the shell executable\n        shell_args: Arguments for the shell\n\n    Returns:\n        Terminal instance for interacting with the terminal\n\n    Example:\n        # Create a simple terminal\n        terminal = window.create_terminal(name=\"My Terminal\")\n\n        # Create with custom shell\n        terminal = window.create_terminal(\n            name=\"Bash\",\n            shell_path=\"/bin/bash\"\n        )\n\n        # Use the terminal\n        terminal.send_text(\"echo 'Hello!'\")\n        terminal.show()\n    \"\"\"\n    from .terminal import Terminal\n\n    result = self.client._send_request(\n        \"window.createTerminal\",\n        {\n            \"name\": name,\n            \"shellPath\": shell_path,\n            \"shellArgs\": shell_args,\n        },\n    )\n    return Terminal(self.client, result[\"terminalId\"], name)\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.create_terminal--create-a-simple-terminal","title":"Create a simple terminal","text":"<p>terminal = window.create_terminal(name=\"My Terminal\")</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.create_terminal--create-with-custom-shell","title":"Create with custom shell","text":"<p>terminal = window.create_terminal(     name=\"Bash\",     shell_path=\"/bin/bash\" )</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.create_terminal--use-the-terminal","title":"Use the terminal","text":"<p>terminal.send_text(\"echo 'Hello!'\") terminal.show()</p>"},{"location":"api/window/#vscode_sockpuppet.window.Window.set_status_bar_message","title":"set_status_bar_message","text":"<pre><code>set_status_bar_message(text: str, hide_after_timeout: Optional[int] = None) -&gt; dict\n</code></pre> <p>Set a status bar message.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The message to show</p> required <code>hide_after_timeout</code> <code>Optional[int]</code> <p>Optional timeout in milliseconds</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>Success status</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def set_status_bar_message(self, text: str, hide_after_timeout: Optional[int] = None) -&gt; dict:\n    \"\"\"\n    Set a status bar message.\n\n    Args:\n        text: The message to show\n        hide_after_timeout: Optional timeout in milliseconds\n\n    Returns:\n        Success status\n    \"\"\"\n    return self.client._send_request(\n        \"window.setStatusBarMessage\",\n        {\"text\": text, \"hideAfterTimeout\": hide_after_timeout},\n    )\n</code></pre>"},{"location":"api/window/#vscode_sockpuppet.window.Window.create_webview_panel","title":"create_webview_panel","text":"<pre><code>create_webview_panel(title: str, html: str, view_type: Optional[str] = None, panel_id: Optional[str] = None, show_options: int = 1, options: Optional[WebviewOptions] = None) -&gt; WebviewPanel\n</code></pre> <p>Create a webview panel with custom HTML content.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the webview panel</p> required <code>html</code> <code>str</code> <p>The HTML content to display</p> required <code>view_type</code> <code>Optional[str]</code> <p>Identifier for the webview type (auto-generated if None)</p> <code>None</code> <code>panel_id</code> <code>Optional[str]</code> <p>Unique identifier for the panel (auto-generated if None)</p> <code>None</code> <code>show_options</code> <code>int</code> <p>ViewColumn where to show (1=One, 2=Two, 3=Three)</p> <code>1</code> <code>options</code> <code>Optional[WebviewOptions]</code> <p>Webview configuration options</p> <code>None</code> <p>Returns:</p> Type Description <code>WebviewPanel</code> <p>The created WebviewPanel instance</p> Example <p>with window.create_webview_panel(     \"My Panel\",     \"Hello from Python!\" ) as panel:     # Panel will automatically dispose when exiting context     panel.update_html(\"Updated content\")</p> Source code in <code>vscode_sockpuppet/window.py</code> <pre><code>def create_webview_panel(\n    self,\n    title: str,\n    html: str,\n    view_type: Optional[str] = None,\n    panel_id: Optional[str] = None,\n    show_options: int = 1,\n    options: Optional[\"WebviewOptions\"] = None,\n) -&gt; \"WebviewPanel\":\n    \"\"\"\n    Create a webview panel with custom HTML content.\n\n    Args:\n        title: The title of the webview panel\n        html: The HTML content to display\n        view_type: Identifier for the webview type (auto-generated if None)\n        panel_id: Unique identifier for the panel (auto-generated if None)\n        show_options: ViewColumn where to show (1=One, 2=Two, 3=Three)\n        options: Webview configuration options\n\n    Returns:\n        The created WebviewPanel instance\n\n    Example:\n        with window.create_webview_panel(\n            \"My Panel\",\n            \"&lt;h1&gt;Hello from Python!&lt;/h1&gt;\"\n        ) as panel:\n            # Panel will automatically dispose when exiting context\n            panel.update_html(\"&lt;h1&gt;Updated content&lt;/h1&gt;\")\n    \"\"\"\n    from .webview import WebviewOptions, WebviewPanel\n\n    if panel_id is None:\n        panel_id = str(uuid.uuid4())\n\n    if view_type is None:\n        view_type = f\"sockpuppet.webview.{panel_id}\"\n\n    params = {\n        \"id\": panel_id,\n        \"viewType\": view_type,\n        \"title\": title,\n        \"showOptions\": show_options,\n        \"html\": html,\n    }\n\n    if options:\n        params[\"options\"] = options.to_dict()\n    else:\n        # Default options\n        params[\"options\"] = WebviewOptions().to_dict()\n\n    self.client._send_request(\"window.createWebviewPanel\", params)\n\n    return WebviewPanel(self.client, panel_id, view_type, title)\n</code></pre>"},{"location":"api/workspace/","title":"Workspace","text":"<p>Workspace operations including folders, files, configuration, and file watching.</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace","title":"Workspace","text":"<pre><code>Workspace(client: VSCodeClient)\n</code></pre> <p>VS Code workspace operations.</p> Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\"):\n    self.client = client\n    self._events = WorkspaceEvents(client)\n    self._env: Optional[Environment] = None\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.env","title":"env  <code>property</code>","text":"<pre><code>env: Environment\n</code></pre> <p>Access environment properties and methods.</p> <p>Returns:</p> Type Description <code>Environment</code> <p>Environment object with properties and methods</p> Example <p>print(f\"Running in: {client.workspace.env.app_name}\") print(f\"UI Language: {client.workspace.env.language}\") client.workspace.env.open_external(\"https://example.com\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.on_did_open_text_document","title":"on_did_open_text_document  <code>property</code>","text":"<pre><code>on_did_open_text_document\n</code></pre> <p>Event fired when a text document is opened.</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.on_did_close_text_document","title":"on_did_close_text_document  <code>property</code>","text":"<pre><code>on_did_close_text_document\n</code></pre> <p>Event fired when a text document is closed.</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.on_did_save_text_document","title":"on_did_save_text_document  <code>property</code>","text":"<pre><code>on_did_save_text_document\n</code></pre> <p>Event fired when a text document is saved.</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.on_did_change_text_document","title":"on_did_change_text_document  <code>property</code>","text":"<pre><code>on_did_change_text_document\n</code></pre> <p>Event fired when a text document changes.</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.on_did_change_workspace_folders","title":"on_did_change_workspace_folders  <code>property</code>","text":"<pre><code>on_did_change_workspace_folders\n</code></pre> <p>Event fired when workspace folders are added or removed.</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.on_did_change_configuration","title":"on_did_change_configuration  <code>property</code>","text":"<pre><code>on_did_change_configuration\n</code></pre> <p>Event fired when the configuration changes.</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.on_did_create_files","title":"on_did_create_files  <code>property</code>","text":"<pre><code>on_did_create_files\n</code></pre> <p>Event fired when files are created.</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.on_did_delete_files","title":"on_did_delete_files  <code>property</code>","text":"<pre><code>on_did_delete_files\n</code></pre> <p>Event fired when files are deleted.</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.on_did_rename_files","title":"on_did_rename_files  <code>property</code>","text":"<pre><code>on_did_rename_files\n</code></pre> <p>Event fired when files are renamed or moved.</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.open_text_document","title":"open_text_document","text":"<pre><code>open_text_document(uri: Optional[str] = None, content: Optional[str] = None, language: Optional[str] = None) -&gt; TextDocument\n</code></pre> <p>Open a text document.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>Optional[str]</code> <p>The URI of the document to open</p> <code>None</code> <code>content</code> <code>Optional[str]</code> <p>Content for an untitled document</p> <code>None</code> <code>language</code> <code>Optional[str]</code> <p>Language identifier for untitled document</p> <code>None</code> <p>Returns:</p> Type Description <code>TextDocument</code> <p>TextDocument object</p> Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def open_text_document(\n    self,\n    uri: Optional[str] = None,\n    content: Optional[str] = None,\n    language: Optional[str] = None,\n) -&gt; TextDocument:\n    \"\"\"\n    Open a text document.\n\n    Args:\n        uri: The URI of the document to open\n        content: Content for an untitled document\n        language: Language identifier for untitled document\n\n    Returns:\n        TextDocument object\n    \"\"\"\n    data = self.client._send_request(\n        \"workspace.openTextDocument\",\n        {\"uri\": uri, \"content\": content, \"language\": language},\n    )\n    return TextDocument(self.client, data)\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.save_all","title":"save_all","text":"<pre><code>save_all(include_untitled: bool = False) -&gt; bool\n</code></pre> <p>Save all dirty files.</p> <p>Parameters:</p> Name Type Description Default <code>include_untitled</code> <code>bool</code> <p>Whether to include untitled files</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if all files were saved</p> Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def save_all(self, include_untitled: bool = False) -&gt; bool:\n    \"\"\"\n    Save all dirty files.\n\n    Args:\n        include_untitled: Whether to include untitled files\n\n    Returns:\n        True if all files were saved\n    \"\"\"\n    return self.client._send_request(\n        \"workspace.saveAll\", {\"includeUntitled\": include_untitled}\n    )\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.get_workspace_folders","title":"get_workspace_folders","text":"<pre><code>get_workspace_folders() -&gt; list[dict]\n</code></pre> <p>Get all workspace folders.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>List of workspace folders (uri, name, index)</p> Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def get_workspace_folders(self) -&gt; list[dict]:\n    \"\"\"\n    Get all workspace folders.\n\n    Returns:\n        List of workspace folders (uri, name, index)\n    \"\"\"\n    return self.client._send_request(\"workspace.workspaceFolders\", {})\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.text_documents","title":"text_documents","text":"<pre><code>text_documents() -&gt; list[TextDocument]\n</code></pre> <p>Get all open text documents.</p> <p>Returns:</p> Type Description <code>list[TextDocument]</code> <p>List of TextDocument objects</p> Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def text_documents(self) -&gt; list[TextDocument]:\n    \"\"\"\n    Get all open text documents.\n\n    Returns:\n        List of TextDocument objects\n    \"\"\"\n    docs_data = self.client._send_request(\"workspace.textDocuments\", {})\n    return [TextDocument(self.client, data) for data in docs_data]\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.get_text_document","title":"get_text_document","text":"<pre><code>get_text_document(uri: str) -&gt; TextDocument\n</code></pre> <p>Get a specific open text document by URI.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI of the document</p> required <p>Returns:</p> Type Description <code>TextDocument</code> <p>TextDocument object</p> Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def get_text_document(self, uri: str) -&gt; TextDocument:\n    \"\"\"\n    Get a specific open text document by URI.\n\n    Args:\n        uri: The URI of the document\n\n    Returns:\n        TextDocument object\n    \"\"\"\n    data = self.client._send_request(\"workspace.getTextDocument\", {\"uri\": uri})\n    return TextDocument(self.client, data)\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.find_files","title":"find_files","text":"<pre><code>find_files(include: str, exclude: Optional[str] = None, max_results: Optional[int] = None) -&gt; list[str]\n</code></pre> <p>Find files across all workspace folders.</p> <p>Parameters:</p> Name Type Description Default <code>include</code> <code>str</code> <p>Glob pattern for files to search for (e.g., '/*.py', '/*.{js,ts}')</p> required <code>exclude</code> <code>Optional[str]</code> <p>Glob pattern for files/folders to exclude (e.g., '/node_modules/'). Use None for default excludes (files.exclude setting)</p> <code>None</code> <code>max_results</code> <code>Optional[int]</code> <p>Maximum number of results to return</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of file URIs matching the pattern</p> Example Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def find_files(\n    self,\n    include: str,\n    exclude: Optional[str] = None,\n    max_results: Optional[int] = None,\n) -&gt; list[str]:\n    \"\"\"\n    Find files across all workspace folders.\n\n    Args:\n        include: Glob pattern for files to search for\n            (e.g., '**/*.py', '**/*.{js,ts}')\n        exclude: Glob pattern for files/folders to exclude\n            (e.g., '**/node_modules/**'). Use None for default\n            excludes (files.exclude setting)\n        max_results: Maximum number of results to return\n\n    Returns:\n        List of file URIs matching the pattern\n\n    Example:\n        # Find all Python files\n        files = client.workspace.find_files('**/*.py')\n\n        # Find JavaScript files, excluding node_modules\n        files = client.workspace.find_files(\n            '**/*.js',\n            '**/node_modules/**'\n        )\n\n        # Limit results\n        files = client.workspace.find_files('**/*.ts', max_results=10)\n    \"\"\"\n    result = self.client._send_request(\n        \"workspace.findFiles\",\n        {\n            \"include\": include,\n            \"exclude\": exclude,\n            \"maxResults\": max_results,\n        },\n    )\n    return result[\"files\"]\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.find_files--find-all-python-files","title":"Find all Python files","text":"<p>files = client.workspace.find_files('*/.py')</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.find_files--find-javascript-files-excluding-node_modules","title":"Find JavaScript files, excluding node_modules","text":"<p>files = client.workspace.find_files(     '/*.js',     '/node_modules/**' )</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.find_files--limit-results","title":"Limit results","text":"<p>files = client.workspace.find_files('*/.ts', max_results=10)</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.get_workspace_folder","title":"get_workspace_folder","text":"<pre><code>get_workspace_folder(uri: str) -&gt; Optional[dict]\n</code></pre> <p>Get the workspace folder that contains a given URI.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI to find the workspace folder for</p> required <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Workspace folder dict (uri, name, index) or None if not found</p> Example <p>folder = client.workspace.get_workspace_folder(     'file:///path/to/file.py' ) if folder:     print(f\"File is in workspace: {folder['name']}\")</p> Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def get_workspace_folder(self, uri: str) -&gt; Optional[dict]:\n    \"\"\"\n    Get the workspace folder that contains a given URI.\n\n    Args:\n        uri: The URI to find the workspace folder for\n\n    Returns:\n        Workspace folder dict (uri, name, index) or None if not found\n\n    Example:\n        folder = client.workspace.get_workspace_folder(\n            'file:///path/to/file.py'\n        )\n        if folder:\n            print(f\"File is in workspace: {folder['name']}\")\n    \"\"\"\n    result = self.client._send_request(\"workspace.getWorkspaceFolder\", {\"uri\": uri})\n    return result[\"folder\"]\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.as_relative_path","title":"as_relative_path","text":"<pre><code>as_relative_path(path_or_uri: str, include_workspace_folder: bool = False) -&gt; str\n</code></pre> <p>Convert a path or URI to a workspace-relative path.</p> <p>Parameters:</p> Name Type Description Default <code>path_or_uri</code> <code>str</code> <p>Absolute path or URI to convert</p> required <code>include_workspace_folder</code> <code>bool</code> <p>Whether to prepend workspace folder name when multiple folders exist</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Path relative to workspace root, or original input if not</p> <code>str</code> <p>in workspace</p> Example Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def as_relative_path(self, path_or_uri: str, include_workspace_folder: bool = False) -&gt; str:\n    \"\"\"\n    Convert a path or URI to a workspace-relative path.\n\n    Args:\n        path_or_uri: Absolute path or URI to convert\n        include_workspace_folder: Whether to prepend workspace\n            folder name when multiple folders exist\n\n    Returns:\n        Path relative to workspace root, or original input if not\n        in workspace\n\n    Example:\n        # Convert absolute path\n        rel_path = client.workspace.as_relative_path(\n            '/Users/name/project/src/main.py'\n        )\n        # Returns: 'src/main.py'\n\n        # With workspace folder name (when multiple folders)\n        rel_path = client.workspace.as_relative_path(\n            '/Users/name/project/src/main.py',\n            include_workspace_folder=True\n        )\n        # Returns: 'project-name/src/main.py'\n    \"\"\"\n    result = self.client._send_request(\n        \"workspace.asRelativePath\",\n        {\n            \"pathOrUri\": path_or_uri,\n            \"includeWorkspaceFolder\": include_workspace_folder,\n        },\n    )\n    return result[\"relativePath\"]\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.as_relative_path--convert-absolute-path","title":"Convert absolute path","text":"<p>rel_path = client.workspace.as_relative_path(     '/Users/name/project/src/main.py' )</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.as_relative_path--returns-srcmainpy","title":"Returns: 'src/main.py'","text":""},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.as_relative_path--with-workspace-folder-name-when-multiple-folders","title":"With workspace folder name (when multiple folders)","text":"<p>rel_path = client.workspace.as_relative_path(     '/Users/name/project/src/main.py',     include_workspace_folder=True )</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.as_relative_path--returns-project-namesrcmainpy","title":"Returns: 'project-name/src/main.py'","text":""},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.apply_edit","title":"apply_edit","text":"<pre><code>apply_edit(edit: WorkspaceEdit) -&gt; dict\n</code></pre> <p>Apply a workspace edit.</p> <p>This allows making changes to multiple files atomically. The edit can include text changes, file creates, file deletes, and file renames.</p> <p>Parameters:</p> Name Type Description Default <code>edit</code> <code>WorkspaceEdit</code> <p>WorkspaceEdit dict containing: - documentChanges: List of TextDocumentEdit dicts (optional) - createFiles: List of CreateFileOperation dicts (optional) - deleteFiles: List of DeleteFileOperation dicts (optional) - renameFiles: List of RenameFileOperation dicts (optional)</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Dict with: - success: True if edit was applied</p> Example <p>from vscode_sockpuppet import (     WorkspaceEdit, TextDocumentEdit, TextEdit, Range, Position )</p> Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def apply_edit(self, edit: \"WorkspaceEdit\") -&gt; dict:\n    \"\"\"\n    Apply a workspace edit.\n\n    This allows making changes to multiple files atomically. The edit can\n    include text changes, file creates, file deletes, and file renames.\n\n    Args:\n        edit: WorkspaceEdit dict containing:\n            - documentChanges: List of TextDocumentEdit dicts (optional)\n            - createFiles: List of CreateFileOperation dicts (optional)\n            - deleteFiles: List of DeleteFileOperation dicts (optional)\n            - renameFiles: List of RenameFileOperation dicts (optional)\n\n    Returns:\n        Dict with:\n            - success: True if edit was applied\n\n    Example:\n        from vscode_sockpuppet import (\n            WorkspaceEdit, TextDocumentEdit, TextEdit, Range, Position\n        )\n\n        # Create a workspace edit with text changes\n        edit: WorkspaceEdit = {\n            \"documentChanges\": [\n                {\n                    \"uri\": \"file:///path/to/file.py\",\n                    \"edits\": [\n                        {\n                            \"range\": {\n                                \"start\": {\"line\": 0, \"character\": 0},\n                                \"end\": {\"line\": 0, \"character\": 0}\n                            },\n                            \"newText\": \"# New header comment\\\\n\"\n                        }\n                    ]\n                }\n            ]\n        }\n        result = client.workspace.apply_edit(edit)\n        print(f\"Edit applied: {result['success']}\")\n\n        # Create a file and add content\n        edit: WorkspaceEdit = {\n            \"createFiles\": [\n                {\"uri\": \"file:///path/to/new_file.py\"}\n            ],\n            \"documentChanges\": [\n                {\n                    \"uri\": \"file:///path/to/new_file.py\",\n                    \"edits\": [\n                        {\n                            \"range\": {\n                                \"start\": {\"line\": 0, \"character\": 0},\n                                \"end\": {\"line\": 0, \"character\": 0}\n                            },\n                            \"newText\": \"print('Hello, world!')\\\\n\"\n                        }\n                    ]\n                }\n            ]\n        }\n        result = client.workspace.apply_edit(edit)\n    \"\"\"\n    # TypedDict is treated as dict at runtime\n    return self.client._send_request(\n        \"workspace.applyEdit\",\n        dict(edit),  # type: ignore[arg-type]\n    )\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.apply_edit--create-a-workspace-edit-with-text-changes","title":"Create a workspace edit with text changes","text":"<p>edit: WorkspaceEdit = {     \"documentChanges\": [         {             \"uri\": \"file:///path/to/file.py\",             \"edits\": [                 {                     \"range\": {                         \"start\": {\"line\": 0, \"character\": 0},                         \"end\": {\"line\": 0, \"character\": 0}                     },                     \"newText\": \"# New header comment\\n\"                 }             ]         }     ] } result = client.workspace.apply_edit(edit) print(f\"Edit applied: {result['success']}\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.apply_edit--create-a-file-and-add-content","title":"Create a file and add content","text":"<p>edit: WorkspaceEdit = {     \"createFiles\": [         {\"uri\": \"file:///path/to/new_file.py\"}     ],     \"documentChanges\": [         {             \"uri\": \"file:///path/to/new_file.py\",             \"edits\": [                 {                     \"range\": {                         \"start\": {\"line\": 0, \"character\": 0},                         \"end\": {\"line\": 0, \"character\": 0}                     },                     \"newText\": \"print('Hello, world!')\\n\"                 }             ]         }     ] } result = client.workspace.apply_edit(edit)</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.get_configuration","title":"get_configuration","text":"<pre><code>get_configuration(section: Optional[str] = None, scope: Optional[str] = None) -&gt; WorkspaceConfiguration\n</code></pre> <p>Get a workspace configuration object.</p> <p>Parameters:</p> Name Type Description Default <code>section</code> <code>Optional[str]</code> <p>Configuration section (e.g., 'editor', 'python.linting')</p> <code>None</code> <code>scope</code> <code>Optional[str]</code> <p>Resource URI or language ID for scoped configuration</p> <code>None</code> <p>Returns:</p> Type Description <code>WorkspaceConfiguration</code> <p>WorkspaceConfiguration object</p> Example Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def get_configuration(\n    self, section: Optional[str] = None, scope: Optional[str] = None\n) -&gt; WorkspaceConfiguration:\n    \"\"\"\n    Get a workspace configuration object.\n\n    Args:\n        section: Configuration section (e.g., 'editor', 'python.linting')\n        scope: Resource URI or language ID for scoped configuration\n\n    Returns:\n        WorkspaceConfiguration object\n\n    Example:\n        # Get editor configuration\n        config = client.workspace.get_configuration('editor')\n        font_size = config.get('fontSize', 14)\n\n        # Update a setting\n        config.update('fontSize', 16, ConfigurationTarget.GLOBAL)\n\n        # Get all configuration\n        config = client.workspace.get_configuration()\n        value = config.get('editor.fontSize')\n    \"\"\"\n    return WorkspaceConfiguration(self.client, section, scope)\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.get_configuration--get-editor-configuration","title":"Get editor configuration","text":"<p>config = client.workspace.get_configuration('editor') font_size = config.get('fontSize', 14)</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.get_configuration--update-a-setting","title":"Update a setting","text":"<p>config.update('fontSize', 16, ConfigurationTarget.GLOBAL)</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.get_configuration--get-all-configuration","title":"Get all configuration","text":"<p>config = client.workspace.get_configuration() value = config.get('editor.fontSize')</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.create_file_system_watcher","title":"create_file_system_watcher","text":"<pre><code>create_file_system_watcher(glob_pattern: str, ignore_create_events: bool = False, ignore_change_events: bool = False, ignore_delete_events: bool = False) -&gt; FileSystemWatcher\n</code></pre> <p>Create a file system watcher for the given glob pattern.</p> <p>Parameters:</p> Name Type Description Default <code>glob_pattern</code> <code>str</code> <p>Glob pattern to watch (e.g., '/*.py', '/*.{js,ts}')</p> required <code>ignore_create_events</code> <code>bool</code> <p>Don't fire events when files are created</p> <code>False</code> <code>ignore_change_events</code> <code>bool</code> <p>Don't fire events when files are changed</p> <code>False</code> <code>ignore_delete_events</code> <code>bool</code> <p>Don't fire events when files are deleted</p> <code>False</code> <p>Returns:</p> Type Description <code>FileSystemWatcher</code> <p>FileSystemWatcher instance</p> Example Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def create_file_system_watcher(\n    self,\n    glob_pattern: str,\n    ignore_create_events: bool = False,\n    ignore_change_events: bool = False,\n    ignore_delete_events: bool = False,\n) -&gt; \"FileSystemWatcher\":\n    \"\"\"\n    Create a file system watcher for the given glob pattern.\n\n    Args:\n        glob_pattern: Glob pattern to watch\n            (e.g., '**/*.py', '**/*.{js,ts}')\n        ignore_create_events: Don't fire events when files are created\n        ignore_change_events: Don't fire events when files are changed\n        ignore_delete_events: Don't fire events when files are deleted\n\n    Returns:\n        FileSystemWatcher instance\n\n    Example:\n        # Watch all Python files in workspace\n        watcher = workspace.create_file_system_watcher(\"**/*.py\")\n\n        def on_python_file_created(uri):\n            print(f\"New Python file: {uri}\")\n\n        def on_python_file_changed(uri):\n            print(f\"Python file modified: {uri}\")\n\n        # Subscribe to events\n        dispose1 = watcher.on_did_create(on_python_file_created)\n        dispose2 = watcher.on_did_change(on_python_file_changed)\n\n        # Later, stop watching\n        watcher.dispose()\n\n        # Or use as context manager\n        with workspace.create_file_system_watcher(\"**/*.js\") as watcher:\n            watcher.on_did_create(lambda uri: print(f\"Created: {uri}\"))\n            # ... do work ...\n        # Automatically disposed when exiting context\n    \"\"\"\n    from .filewatcher import FileSystemWatcher\n\n    result = self.client._send_request(\n        \"workspace.createFileSystemWatcher\",\n        {\n            \"globPattern\": glob_pattern,\n            \"ignoreCreateEvents\": ignore_create_events,\n            \"ignoreChangeEvents\": ignore_change_events,\n            \"ignoreDeleteEvents\": ignore_delete_events,\n        },\n    )\n\n    return FileSystemWatcher(\n        self.client,\n        result[\"watcherId\"],\n        glob_pattern,\n        ignore_create_events,\n        ignore_change_events,\n        ignore_delete_events,\n    )\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.create_file_system_watcher--watch-all-python-files-in-workspace","title":"Watch all Python files in workspace","text":"<p>watcher = workspace.create_file_system_watcher(\"*/.py\")</p> <p>def on_python_file_created(uri):     print(f\"New Python file: {uri}\")</p> <p>def on_python_file_changed(uri):     print(f\"Python file modified: {uri}\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.create_file_system_watcher--subscribe-to-events","title":"Subscribe to events","text":"<p>dispose1 = watcher.on_did_create(on_python_file_created) dispose2 = watcher.on_did_change(on_python_file_changed)</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.create_file_system_watcher--later-stop-watching","title":"Later, stop watching","text":"<p>watcher.dispose()</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.create_file_system_watcher--or-use-as-context-manager","title":"Or use as context manager","text":"<p>with workspace.create_file_system_watcher(\"*/.js\") as watcher:     watcher.on_did_create(lambda uri: print(f\"Created: {uri}\"))     # ... do work ...</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Workspace.create_file_system_watcher--automatically-disposed-when-exiting-context","title":"Automatically disposed when exiting context","text":""},{"location":"api/workspace/#environment","title":"Environment","text":""},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment","title":"Environment","text":"<pre><code>Environment(client: VSCodeClient)\n</code></pre> <p>VS Code environment properties and methods.</p> Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def __init__(self, client: \"VSCodeClient\"):\n    self.client = client\n    self._cached_properties = {}\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.app_name","title":"app_name  <code>property</code>","text":"<pre><code>app_name: str\n</code></pre> <p>The application name of the editor, like 'VS Code'.</p> <p>Returns:</p> Type Description <code>str</code> <p>Application name</p> Example <p>print(f\"Running in: {client.workspace.env.app_name}\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.app_root","title":"app_root  <code>property</code>","text":"<pre><code>app_root: str\n</code></pre> <p>The application root folder from which the editor is running.</p> <p>Returns:</p> Type Description <code>str</code> <p>Application root path (empty string if not applicable)</p> Example <p>print(f\"App root: {client.workspace.env.app_root}\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.language","title":"language  <code>property</code>","text":"<pre><code>language: str\n</code></pre> <p>The UI language of VS Code.</p> <p>Returns:</p> Type Description <code>str</code> <p>Language identifier (e.g., 'en', 'de', 'zh-cn')</p> Example <p>if client.workspace.env.language == 'en':     print(\"English UI\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.machine_id","title":"machine_id  <code>property</code>","text":"<pre><code>machine_id: str\n</code></pre> <p>A unique identifier for the machine.</p> <p>Returns:</p> Type Description <code>str</code> <p>Machine identifier (anonymized)</p> Example <p>print(f\"Machine ID: {client.workspace.env.machine_id}\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.session_id","title":"session_id  <code>property</code>","text":"<pre><code>session_id: str\n</code></pre> <p>A unique identifier for the current session.</p> <p>Returns:</p> Type Description <code>str</code> <p>Session identifier</p> Example <p>print(f\"Session: {client.workspace.env.session_id}\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.uri_scheme","title":"uri_scheme  <code>property</code>","text":"<pre><code>uri_scheme: str\n</code></pre> <p>The custom URI scheme the editor registers in the OS.</p> <p>Returns:</p> Type Description <code>str</code> <p>URI scheme (typically 'vscode' or 'vscode-insiders')</p> Example <p>print(f\"URI scheme: {client.workspace.env.uri_scheme}\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.shell","title":"shell  <code>property</code>","text":"<pre><code>shell: str\n</code></pre> <p>The detected default shell for the extension host.</p> <p>Returns:</p> Type Description <code>str</code> <p>Path to the default shell</p> Example <p>print(f\"Default shell: {client.workspace.env.shell}\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.ui_kind","title":"ui_kind  <code>property</code>","text":"<pre><code>ui_kind: int\n</code></pre> <p>The UI kind property indicates from which UI extensions are accessed.</p> <p>Returns:</p> Type Description <code>int</code> <p>UI kind (1 = Desktop, 2 = Web)</p> Example <p>if client.workspace.env.ui_kind == 1:     print(\"Running in desktop VS Code\") else:     print(\"Running in web VS Code\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.write_clipboard","title":"write_clipboard","text":"<pre><code>write_clipboard(text: str) -&gt; None\n</code></pre> <p>Write text to clipboard.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to write</p> required Example <p>client.workspace.env.write_clipboard(\"Hello, clipboard!\")</p> Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def write_clipboard(self, text: str) -&gt; None:\n    \"\"\"\n    Write text to clipboard.\n\n    Args:\n        text: The text to write\n\n    Example:\n        client.workspace.env.write_clipboard(\"Hello, clipboard!\")\n    \"\"\"\n    self.client._send_request(\"env.clipboard.writeText\", {\"text\": text})\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.read_clipboard","title":"read_clipboard","text":"<pre><code>read_clipboard() -&gt; str\n</code></pre> <p>Read text from clipboard.</p> <p>Returns:</p> Type Description <code>str</code> <p>The clipboard text</p> Example <p>text = client.workspace.env.read_clipboard() print(f\"Clipboard: {text}\")</p> Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def read_clipboard(self) -&gt; str:\n    \"\"\"\n    Read text from clipboard.\n\n    Returns:\n        The clipboard text\n\n    Example:\n        text = client.workspace.env.read_clipboard()\n        print(f\"Clipboard: {text}\")\n    \"\"\"\n    return self.client._send_request(\"env.clipboard.readText\")\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.open_external","title":"open_external","text":"<pre><code>open_external(uri: str) -&gt; bool\n</code></pre> <p>Open an external URI in the default application.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI to open (http, https, mailto, etc.)</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if successful</p> Example Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def open_external(self, uri: str) -&gt; bool:\n    \"\"\"\n    Open an external URI in the default application.\n\n    Args:\n        uri: The URI to open (http, https, mailto, etc.)\n\n    Returns:\n        True if successful\n\n    Example:\n        # Open URL in browser\n        client.workspace.env.open_external(\"https://code.visualstudio.com\")\n\n        # Open email client\n        client.workspace.env.open_external(\"mailto:user@example.com\")\n    \"\"\"\n    return self.client._send_request(\"env.openExternal\", {\"uri\": uri})\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.open_external--open-url-in-browser","title":"Open URL in browser","text":"<p>client.workspace.env.open_external(\"https://code.visualstudio.com\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.open_external--open-email-client","title":"Open email client","text":"<p>client.workspace.env.open_external(\"mailto:user@example.com\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.as_external_uri","title":"as_external_uri","text":"<pre><code>as_external_uri(uri: str) -&gt; str\n</code></pre> <p>Convert a URI to an external URI that can be opened outside VS Code.</p> <p>This resolves the authority part of a URI using VS Code's port forwarding and tunneling features. For example, when running in a remote SSH session, this converts localhost URIs to publicly accessible URIs.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>The URI to convert (typically a localhost or internal URI)</p> required <p>Returns:</p> Type Description <code>str</code> <p>The external URI as a string</p> Example Source code in <code>vscode_sockpuppet/workspace.py</code> <pre><code>def as_external_uri(self, uri: str) -&gt; str:\n    \"\"\"\n    Convert a URI to an external URI that can be opened outside VS Code.\n\n    This resolves the authority part of a URI using VS Code's port\n    forwarding and tunneling features. For example, when running in a\n    remote SSH session, this converts localhost URIs to publicly\n    accessible URIs.\n\n    Args:\n        uri: The URI to convert (typically a localhost or internal URI)\n\n    Returns:\n        The external URI as a string\n\n    Example:\n        # Convert localhost URI when running remotely\n        external = client.workspace.env.as_external_uri(\n            \"http://localhost:3000\"\n        )\n        print(f\"Public URL: {external}\")\n\n        # Convert workspace file URI\n        file_uri = \"file:///workspace/file.txt\"\n        external = client.workspace.env.as_external_uri(file_uri)\n    \"\"\"\n    return self.client._send_request(\"env.asExternalUri\", {\"uri\": uri})\n</code></pre>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.as_external_uri--convert-localhost-uri-when-running-remotely","title":"Convert localhost URI when running remotely","text":"<p>external = client.workspace.env.as_external_uri(     \"http://localhost:3000\" ) print(f\"Public URL: {external}\")</p>"},{"location":"api/workspace/#vscode_sockpuppet.workspace.Environment.as_external_uri--convert-workspace-file-uri","title":"Convert workspace file URI","text":"<p>file_uri = \"file:///workspace/file.txt\" external = client.workspace.env.as_external_uri(file_uri)</p>"},{"location":"getting-started/examples/","title":"Examples","text":"<p>Practical examples showing common use cases.</p>"},{"location":"getting-started/examples/#example-1-list-open-files","title":"Example 1: List Open Files","text":"<pre><code>from vscode_sockpuppet import VSCodeClient\n\nwith VSCodeClient() as vscode:\n    docs = vscode.workspace.text_documents()\n\n    print(f\"\\n\ud83d\udcc1 {len(docs)} open documents:\\n\")\n    for doc in docs:\n        status = \"\ud83d\udcdd\" if doc.is_dirty else \"\u2713\"\n        print(f\"{status} {doc.file_name}\")\n        print(f\"   Language: {doc.language_id}\")\n        print(f\"   Lines: {doc.line_count}\")\n        print()\n</code></pre>"},{"location":"getting-started/examples/#example-2-find-and-replace","title":"Example 2: Find and Replace","text":"<pre><code>from vscode_sockpuppet import VSCodeClient, Position\n\nwith VSCodeClient() as vscode:\n    editor = vscode.window.active_text_editor\n    if not editor:\n        print(\"No active editor\")\n        return\n\n    doc = editor.document\n    text = doc.get_text()\n\n    # Find all occurrences of \"TODO\"\n    lines_with_todo = []\n    for i in range(doc.line_count):\n        line = doc.line_at(i)\n        if \"TODO\" in line.text:\n            lines_with_todo.append((i, line.text))\n\n    print(f\"Found {len(lines_with_todo)} TODOs:\")\n    for line_num, text in lines_with_todo:\n        print(f\"  Line {line_num}: {text.strip()}\")\n</code></pre>"},{"location":"getting-started/examples/#example-3-create-webview","title":"Example 3: Create Webview","text":"<pre><code>from vscode_sockpuppet import VSCodeClient\n\nwith VSCodeClient() as vscode:\n    html = \"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;style&gt;\n            body {\n                font-family: var(--vscode-font-family);\n                color: var(--vscode-editor-foreground);\n                padding: 20px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Hello from Python!&lt;/h1&gt;\n        &lt;p&gt;This webview was created by a Python script.&lt;/p&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n\n    panel = vscode.window.create_webview_panel(\n        title=\"Python Webview\",\n        html=html\n    )\n</code></pre>"},{"location":"getting-started/examples/#example-4-monitor-events","title":"Example 4: Monitor Events","text":"<pre><code>from vscode_sockpuppet import VSCodeClient\nimport time\n\nwith VSCodeClient() as vscode:\n    # Subscribe to editor changes\n    def on_editor_change(editor):\n        if editor:\n            print(f\"Now editing: {editor.document.file_name}\")\n\n    vscode.window.on_did_change_active_text_editor(on_editor_change)\n\n    print(\"Monitoring editor changes... (Ctrl+C to stop)\")\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        print(\"\\nStopped monitoring\")\n</code></pre>"},{"location":"getting-started/examples/#more-examples","title":"More Examples","text":"<p>See the examples directory for more:</p> <ul> <li>Document manipulation</li> <li>Decorations</li> <li>Terminal management</li> <li>Configuration access</li> <li>And more!</li> </ul>"},{"location":"getting-started/installation/","title":"Getting Started with VSCode Sockpuppet","text":""},{"location":"getting-started/installation/#installation","title":"Installation","text":"<p>Install the VSCode Sockpuppet extension and Python package to get started.</p>"},{"location":"getting-started/installation/#1-install-vs-code-extension","title":"1. Install VS Code Extension","text":"<ol> <li>Open VS Code</li> <li>Go to Extensions (Ctrl+Shift+X)</li> <li>Search for \"VSCode Sockpuppet\"</li> <li>Click Install</li> </ol>"},{"location":"getting-started/installation/#2-install-python-package","title":"2. Install Python Package","text":"<p>Using pip:</p> <pre><code>pip install vscode-sockpuppet\n</code></pre> <p>Using uv (recommended):</p> <pre><code>uv pip install vscode-sockpuppet\n</code></pre>"},{"location":"getting-started/installation/#3-verify-installation","title":"3. Verify Installation","text":"<p>Create a test script:</p> <pre><code>from vscode_sockpuppet import VSCodeClient\n\nwith VSCodeClient() as vscode:\n    vscode.window.show_information_message(\"Hello from Python!\")\n</code></pre> <p>Run it while VS Code is open with the extension active.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Learn the basics</li> <li>Examples - See practical use cases</li> <li>API Reference - Explore the full API</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>Get started with VSCode Sockpuppet in 5 minutes.</p>"},{"location":"getting-started/quickstart/#your-first-script","title":"Your First Script","text":"<pre><code>from vscode_sockpuppet import VSCodeClient\n\n# Connect to VS Code\nwith VSCodeClient() as vscode:\n    # Show a message\n    vscode.window.show_information_message(\"Hello from Python!\")\n\n    # Get active editor\n    editor = vscode.window.active_text_editor\n    if editor:\n        doc = editor.document\n        print(f\"Editing: {doc.file_name}\")\n        print(f\"Lines: {doc.line_count}\")\n</code></pre>"},{"location":"getting-started/quickstart/#common-operations","title":"Common Operations","text":""},{"location":"getting-started/quickstart/#show-messages","title":"Show Messages","text":"<pre><code>with VSCodeClient() as vscode:\n    # Information\n    vscode.window.show_information_message(\"Operation complete!\")\n\n    # Warning\n    vscode.window.show_warning_message(\"Are you sure?\", \"Yes\", \"No\")\n\n    # Error\n    vscode.window.show_error_message(\"Something went wrong!\")\n</code></pre>"},{"location":"getting-started/quickstart/#work-with-files","title":"Work with Files","text":"<pre><code>with VSCodeClient() as vscode:\n    # List workspace folders\n    folders = vscode.workspace.workspace_folders\n    for folder in folders:\n        print(f\"Folder: {folder['name']}\")\n\n    # Get all open documents\n    docs = vscode.workspace.text_documents()\n    for doc in docs:\n        print(f\"{doc.file_name}: {doc.line_count} lines\")\n</code></pre>"},{"location":"getting-started/quickstart/#edit-text","title":"Edit Text","text":"<pre><code>with VSCodeClient() as vscode:\n    editor = vscode.window.active_text_editor\n    if editor:\n        # Insert text\n        success = editor.edit(lambda edit: edit.insert(0, 0, \"// Hello\\n\"))\n\n        # Get selected text\n        selection = editor.selection\n        text = editor.document.get_text(selection)\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Examples - More practical examples</li> <li>API Reference - Complete API documentation</li> </ul>"}]}